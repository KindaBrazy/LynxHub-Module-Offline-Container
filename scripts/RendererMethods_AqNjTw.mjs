// Image Generation
const A1_ID = 'Automatic1111_SD';
const SD_AMD_ID = 'LSHQQYTIGER_SD';
const SD_FORGE_AMD_ID = 'LSHQQYTIGER_Forge_SD';
const SD_FORGE_ID = 'Lllyasviel_SD';
const COMFYUI_ID = 'ComfyUI_SD';
const COMFYUI_ZLUDA_ID = 'ComfyUI_Zluda_ID';
const SD_NEXT_ID = 'VLADMANDIC_SD';
const SWARM_ID = 'McMonkeyProjects_SD';
const KOHYA_ID = 'Bmaltais_SD';
const ONETRAINER_ID = 'Nerogar_SD';
const SD_UIUX_ID = 'Anapnoe_SD';
const INVOKE_ID = 'InvokeAI_SD';
const ALLTALK_ID = 'Erew123_SD';
// Text Generation
const TG_ID = 'Oobabooga_TG';
const SILLYTAVERN_ID = 'SillyTavern_TG';
const OPEN_WEBUI_ID = 'OpenWebUI_TG';
const BOLT_DIY_ID = 'BoltDiy_TG';
const FLOWISEAI_ID = 'FlowiseAI_TG';
const LoLLMS_ID = 'LoLLMS_TG';
const N8N_ID = 'N8N_TG';
const GeminiCli_ID = 'GeminiCli_TG';
// Audio Generation
const TTS_ID = 'Rsxdalv_AG';
const AG_ID = 'Gitmylo_AG';

let isWin = true;
async function isWinOS() {
    if (typeof window !== 'undefined' && window.osPlatform) {
        isWin = window.osPlatform === 'win32';
    }
    else if (typeof process !== 'undefined') {
        const result = await import('os');
        isWin = result.platform() === 'win32';
    }
    return isWin;
}
isWinOS();
function formatSize(size) {
    if (!size)
        return '0KB';
    if (size < 1024 * 1024) {
        return `${(size / 1024).toFixed(2)} KB`;
    }
    else if (size < 1024 * 1024 * 1024) {
        return `${(size / (1024 * 1024)).toFixed(2)} MB`;
    }
    else {
        return `${(size / (1024 * 1024 * 1024)).toFixed(2)} GB`;
    }
}
class DescriptionManager {
    description;
    callback;
    constructor(description, callback) {
        this.description = description;
        this.callback = callback;
        this.callback.setDescription(description);
    }
    updateItem(sectionIndex, itemIndex, value) {
        if (this.description) {
            this.description[sectionIndex].items[itemIndex].result = value;
            this.callback.setDescription([...this.description]);
        }
    }
}
function extractGitUrl(url) {
    // Regular expression to match GitHub and GitLab repository URLs with or without protocol
    const gitRepoRegex = /^(https?:\/\/)?(www\.)?(github|gitlab)\.com\/([^/]+)\/([^/]+?)(?:\.git)?$/;
    const match = url.match(gitRepoRegex);
    if (!match) {
        throw new Error(`Invalid Git repository URL: ${url}`);
    }
    const [, , , platform, owner, repo] = match;
    return { owner, repo, platform: platform };
}
function removeAnsi(str) {
    return str.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
}
function getCdCommand(dirPath) {
    const escapedPath = dirPath.replace(/ /g, '\\ ');
    const quotedPath = `"${dirPath}"`;
    if (isWin) {
        return `cd ${quotedPath}`;
    }
    else {
        return `cd ${escapedPath}`;
    }
}
function getVenvPythonPath(venvPath) {
    return isWin ? `${venvPath}\\Scripts\\python.exe` : `${venvPath}/bin/python`;
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var lodash$2 = {exports: {}};

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
var lodash$1 = lodash$2.exports;

var hasRequiredLodash;

function requireLodash () {
	if (hasRequiredLodash) return lodash$2.exports;
	hasRequiredLodash = 1;
	(function (module, exports) {
(function() {

		  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
		  var undefined$1;

		  /** Used as the semantic version number. */
		  var VERSION = '4.17.21';

		  /** Used as the size to enable large array optimizations. */
		  var LARGE_ARRAY_SIZE = 200;

		  /** Error message constants. */
		  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
		      FUNC_ERROR_TEXT = 'Expected a function',
		      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

		  /** Used to stand-in for `undefined` hash values. */
		  var HASH_UNDEFINED = '__lodash_hash_undefined__';

		  /** Used as the maximum memoize cache size. */
		  var MAX_MEMOIZE_SIZE = 500;

		  /** Used as the internal argument placeholder. */
		  var PLACEHOLDER = '__lodash_placeholder__';

		  /** Used to compose bitmasks for cloning. */
		  var CLONE_DEEP_FLAG = 1,
		      CLONE_FLAT_FLAG = 2,
		      CLONE_SYMBOLS_FLAG = 4;

		  /** Used to compose bitmasks for value comparisons. */
		  var COMPARE_PARTIAL_FLAG = 1,
		      COMPARE_UNORDERED_FLAG = 2;

		  /** Used to compose bitmasks for function metadata. */
		  var WRAP_BIND_FLAG = 1,
		      WRAP_BIND_KEY_FLAG = 2,
		      WRAP_CURRY_BOUND_FLAG = 4,
		      WRAP_CURRY_FLAG = 8,
		      WRAP_CURRY_RIGHT_FLAG = 16,
		      WRAP_PARTIAL_FLAG = 32,
		      WRAP_PARTIAL_RIGHT_FLAG = 64,
		      WRAP_ARY_FLAG = 128,
		      WRAP_REARG_FLAG = 256,
		      WRAP_FLIP_FLAG = 512;

		  /** Used as default options for `_.truncate`. */
		  var DEFAULT_TRUNC_LENGTH = 30,
		      DEFAULT_TRUNC_OMISSION = '...';

		  /** Used to detect hot functions by number of calls within a span of milliseconds. */
		  var HOT_COUNT = 800,
		      HOT_SPAN = 16;

		  /** Used to indicate the type of lazy iteratees. */
		  var LAZY_FILTER_FLAG = 1,
		      LAZY_MAP_FLAG = 2,
		      LAZY_WHILE_FLAG = 3;

		  /** Used as references for various `Number` constants. */
		  var INFINITY = 1 / 0,
		      MAX_SAFE_INTEGER = 9007199254740991,
		      MAX_INTEGER = 1.7976931348623157e+308,
		      NAN = 0 / 0;

		  /** Used as references for the maximum length and index of an array. */
		  var MAX_ARRAY_LENGTH = 4294967295,
		      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
		      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

		  /** Used to associate wrap methods with their bit flags. */
		  var wrapFlags = [
		    ['ary', WRAP_ARY_FLAG],
		    ['bind', WRAP_BIND_FLAG],
		    ['bindKey', WRAP_BIND_KEY_FLAG],
		    ['curry', WRAP_CURRY_FLAG],
		    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
		    ['flip', WRAP_FLIP_FLAG],
		    ['partial', WRAP_PARTIAL_FLAG],
		    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
		    ['rearg', WRAP_REARG_FLAG]
		  ];

		  /** `Object#toString` result references. */
		  var argsTag = '[object Arguments]',
		      arrayTag = '[object Array]',
		      asyncTag = '[object AsyncFunction]',
		      boolTag = '[object Boolean]',
		      dateTag = '[object Date]',
		      domExcTag = '[object DOMException]',
		      errorTag = '[object Error]',
		      funcTag = '[object Function]',
		      genTag = '[object GeneratorFunction]',
		      mapTag = '[object Map]',
		      numberTag = '[object Number]',
		      nullTag = '[object Null]',
		      objectTag = '[object Object]',
		      promiseTag = '[object Promise]',
		      proxyTag = '[object Proxy]',
		      regexpTag = '[object RegExp]',
		      setTag = '[object Set]',
		      stringTag = '[object String]',
		      symbolTag = '[object Symbol]',
		      undefinedTag = '[object Undefined]',
		      weakMapTag = '[object WeakMap]',
		      weakSetTag = '[object WeakSet]';

		  var arrayBufferTag = '[object ArrayBuffer]',
		      dataViewTag = '[object DataView]',
		      float32Tag = '[object Float32Array]',
		      float64Tag = '[object Float64Array]',
		      int8Tag = '[object Int8Array]',
		      int16Tag = '[object Int16Array]',
		      int32Tag = '[object Int32Array]',
		      uint8Tag = '[object Uint8Array]',
		      uint8ClampedTag = '[object Uint8ClampedArray]',
		      uint16Tag = '[object Uint16Array]',
		      uint32Tag = '[object Uint32Array]';

		  /** Used to match empty string literals in compiled template source. */
		  var reEmptyStringLeading = /\b__p \+= '';/g,
		      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
		      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

		  /** Used to match HTML entities and HTML characters. */
		  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
		      reUnescapedHtml = /[&<>"']/g,
		      reHasEscapedHtml = RegExp(reEscapedHtml.source),
		      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

		  /** Used to match template delimiters. */
		  var reEscape = /<%-([\s\S]+?)%>/g,
		      reEvaluate = /<%([\s\S]+?)%>/g,
		      reInterpolate = /<%=([\s\S]+?)%>/g;

		  /** Used to match property names within property paths. */
		  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
		      reIsPlainProp = /^\w*$/,
		      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

		  /**
		   * Used to match `RegExp`
		   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
		   */
		  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
		      reHasRegExpChar = RegExp(reRegExpChar.source);

		  /** Used to match leading whitespace. */
		  var reTrimStart = /^\s+/;

		  /** Used to match a single whitespace character. */
		  var reWhitespace = /\s/;

		  /** Used to match wrap detail comments. */
		  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
		      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
		      reSplitDetails = /,? & /;

		  /** Used to match words composed of alphanumeric characters. */
		  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

		  /**
		   * Used to validate the `validate` option in `_.template` variable.
		   *
		   * Forbids characters which could potentially change the meaning of the function argument definition:
		   * - "()," (modification of function parameters)
		   * - "=" (default value)
		   * - "[]{}" (destructuring of function parameters)
		   * - "/" (beginning of a comment)
		   * - whitespace
		   */
		  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

		  /** Used to match backslashes in property paths. */
		  var reEscapeChar = /\\(\\)?/g;

		  /**
		   * Used to match
		   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
		   */
		  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

		  /** Used to match `RegExp` flags from their coerced string values. */
		  var reFlags = /\w*$/;

		  /** Used to detect bad signed hexadecimal string values. */
		  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

		  /** Used to detect binary string values. */
		  var reIsBinary = /^0b[01]+$/i;

		  /** Used to detect host constructors (Safari). */
		  var reIsHostCtor = /^\[object .+?Constructor\]$/;

		  /** Used to detect octal string values. */
		  var reIsOctal = /^0o[0-7]+$/i;

		  /** Used to detect unsigned integer values. */
		  var reIsUint = /^(?:0|[1-9]\d*)$/;

		  /** Used to match Latin Unicode letters (excluding mathematical operators). */
		  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

		  /** Used to ensure capturing order of template delimiters. */
		  var reNoMatch = /($^)/;

		  /** Used to match unescaped characters in compiled string literals. */
		  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

		  /** Used to compose unicode character classes. */
		  var rsAstralRange = '\\ud800-\\udfff',
		      rsComboMarksRange = '\\u0300-\\u036f',
		      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
		      rsComboSymbolsRange = '\\u20d0-\\u20ff',
		      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
		      rsDingbatRange = '\\u2700-\\u27bf',
		      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
		      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
		      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
		      rsPunctuationRange = '\\u2000-\\u206f',
		      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
		      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
		      rsVarRange = '\\ufe0e\\ufe0f',
		      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

		  /** Used to compose unicode capture groups. */
		  var rsApos = "['\u2019]",
		      rsAstral = '[' + rsAstralRange + ']',
		      rsBreak = '[' + rsBreakRange + ']',
		      rsCombo = '[' + rsComboRange + ']',
		      rsDigits = '\\d+',
		      rsDingbat = '[' + rsDingbatRange + ']',
		      rsLower = '[' + rsLowerRange + ']',
		      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
		      rsFitz = '\\ud83c[\\udffb-\\udfff]',
		      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
		      rsNonAstral = '[^' + rsAstralRange + ']',
		      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
		      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
		      rsUpper = '[' + rsUpperRange + ']',
		      rsZWJ = '\\u200d';

		  /** Used to compose unicode regexes. */
		  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
		      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
		      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
		      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
		      reOptMod = rsModifier + '?',
		      rsOptVar = '[' + rsVarRange + ']?',
		      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
		      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
		      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
		      rsSeq = rsOptVar + reOptMod + rsOptJoin,
		      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
		      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

		  /** Used to match apostrophes. */
		  var reApos = RegExp(rsApos, 'g');

		  /**
		   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
		   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
		   */
		  var reComboMark = RegExp(rsCombo, 'g');

		  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
		  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

		  /** Used to match complex or compound words. */
		  var reUnicodeWord = RegExp([
		    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
		    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
		    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
		    rsUpper + '+' + rsOptContrUpper,
		    rsOrdUpper,
		    rsOrdLower,
		    rsDigits,
		    rsEmoji
		  ].join('|'), 'g');

		  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
		  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

		  /** Used to detect strings that need a more robust regexp to match words. */
		  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

		  /** Used to assign default `context` object properties. */
		  var contextProps = [
		    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
		    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
		    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
		    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
		    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
		  ];

		  /** Used to make template sourceURLs easier to identify. */
		  var templateCounter = -1;

		  /** Used to identify `toStringTag` values of typed arrays. */
		  var typedArrayTags = {};
		  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
		  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
		  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
		  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
		  typedArrayTags[uint32Tag] = true;
		  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
		  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
		  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
		  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
		  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
		  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
		  typedArrayTags[setTag] = typedArrayTags[stringTag] =
		  typedArrayTags[weakMapTag] = false;

		  /** Used to identify `toStringTag` values supported by `_.clone`. */
		  var cloneableTags = {};
		  cloneableTags[argsTag] = cloneableTags[arrayTag] =
		  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
		  cloneableTags[boolTag] = cloneableTags[dateTag] =
		  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
		  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
		  cloneableTags[int32Tag] = cloneableTags[mapTag] =
		  cloneableTags[numberTag] = cloneableTags[objectTag] =
		  cloneableTags[regexpTag] = cloneableTags[setTag] =
		  cloneableTags[stringTag] = cloneableTags[symbolTag] =
		  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
		  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
		  cloneableTags[errorTag] = cloneableTags[funcTag] =
		  cloneableTags[weakMapTag] = false;

		  /** Used to map Latin Unicode letters to basic Latin letters. */
		  var deburredLetters = {
		    // Latin-1 Supplement block.
		    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
		    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
		    '\xc7': 'C',  '\xe7': 'c',
		    '\xd0': 'D',  '\xf0': 'd',
		    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
		    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
		    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
		    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
		    '\xd1': 'N',  '\xf1': 'n',
		    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
		    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
		    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
		    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
		    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
		    '\xc6': 'Ae', '\xe6': 'ae',
		    '\xde': 'Th', '\xfe': 'th',
		    '\xdf': 'ss',
		    // Latin Extended-A block.
		    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
		    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
		    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
		    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
		    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
		    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
		    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
		    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
		    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
		    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
		    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
		    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
		    '\u0134': 'J',  '\u0135': 'j',
		    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
		    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
		    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
		    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
		    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
		    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
		    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
		    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
		    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
		    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
		    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
		    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
		    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
		    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
		    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
		    '\u0174': 'W',  '\u0175': 'w',
		    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
		    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
		    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
		    '\u0132': 'IJ', '\u0133': 'ij',
		    '\u0152': 'Oe', '\u0153': 'oe',
		    '\u0149': "'n", '\u017f': 's'
		  };

		  /** Used to map characters to HTML entities. */
		  var htmlEscapes = {
		    '&': '&amp;',
		    '<': '&lt;',
		    '>': '&gt;',
		    '"': '&quot;',
		    "'": '&#39;'
		  };

		  /** Used to map HTML entities to characters. */
		  var htmlUnescapes = {
		    '&amp;': '&',
		    '&lt;': '<',
		    '&gt;': '>',
		    '&quot;': '"',
		    '&#39;': "'"
		  };

		  /** Used to escape characters for inclusion in compiled string literals. */
		  var stringEscapes = {
		    '\\': '\\',
		    "'": "'",
		    '\n': 'n',
		    '\r': 'r',
		    '\u2028': 'u2028',
		    '\u2029': 'u2029'
		  };

		  /** Built-in method references without a dependency on `root`. */
		  var freeParseFloat = parseFloat,
		      freeParseInt = parseInt;

		  /** Detect free variable `global` from Node.js. */
		  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

		  /** Detect free variable `self`. */
		  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

		  /** Used as a reference to the global object. */
		  var root = freeGlobal || freeSelf || Function('return this')();

		  /** Detect free variable `exports`. */
		  var freeExports = exports && !exports.nodeType && exports;

		  /** Detect free variable `module`. */
		  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		  /** Detect the popular CommonJS extension `module.exports`. */
		  var moduleExports = freeModule && freeModule.exports === freeExports;

		  /** Detect free variable `process` from Node.js. */
		  var freeProcess = moduleExports && freeGlobal.process;

		  /** Used to access faster Node.js helpers. */
		  var nodeUtil = (function() {
		    try {
		      // Use `util.types` for Node.js 10+.
		      var types = freeModule && freeModule.require && freeModule.require('util').types;

		      if (types) {
		        return types;
		      }

		      // Legacy `process.binding('util')` for Node.js < 10.
		      return freeProcess && freeProcess.binding && freeProcess.binding('util');
		    } catch (e) {}
		  }());

		  /* Node.js helper references. */
		  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
		      nodeIsDate = nodeUtil && nodeUtil.isDate,
		      nodeIsMap = nodeUtil && nodeUtil.isMap,
		      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
		      nodeIsSet = nodeUtil && nodeUtil.isSet,
		      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

		  /*--------------------------------------------------------------------------*/

		  /**
		   * A faster alternative to `Function#apply`, this function invokes `func`
		   * with the `this` binding of `thisArg` and the arguments of `args`.
		   *
		   * @private
		   * @param {Function} func The function to invoke.
		   * @param {*} thisArg The `this` binding of `func`.
		   * @param {Array} args The arguments to invoke `func` with.
		   * @returns {*} Returns the result of `func`.
		   */
		  function apply(func, thisArg, args) {
		    switch (args.length) {
		      case 0: return func.call(thisArg);
		      case 1: return func.call(thisArg, args[0]);
		      case 2: return func.call(thisArg, args[0], args[1]);
		      case 3: return func.call(thisArg, args[0], args[1], args[2]);
		    }
		    return func.apply(thisArg, args);
		  }

		  /**
		   * A specialized version of `baseAggregator` for arrays.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} setter The function to set `accumulator` values.
		   * @param {Function} iteratee The iteratee to transform keys.
		   * @param {Object} accumulator The initial aggregated object.
		   * @returns {Function} Returns `accumulator`.
		   */
		  function arrayAggregator(array, setter, iteratee, accumulator) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      var value = array[index];
		      setter(accumulator, value, iteratee(value), array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.forEach` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayEach(array, iteratee) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (iteratee(array[index], index, array) === false) {
		        break;
		      }
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.forEachRight` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayEachRight(array, iteratee) {
		    var length = array == null ? 0 : array.length;

		    while (length--) {
		      if (iteratee(array[length], length, array) === false) {
		        break;
		      }
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.every` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {boolean} Returns `true` if all elements pass the predicate check,
		   *  else `false`.
		   */
		  function arrayEvery(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (!predicate(array[index], index, array)) {
		        return false;
		      }
		    }
		    return true;
		  }

		  /**
		   * A specialized version of `_.filter` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {Array} Returns the new filtered array.
		   */
		  function arrayFilter(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length,
		        resIndex = 0,
		        result = [];

		    while (++index < length) {
		      var value = array[index];
		      if (predicate(value, index, array)) {
		        result[resIndex++] = value;
		      }
		    }
		    return result;
		  }

		  /**
		   * A specialized version of `_.includes` for arrays without support for
		   * specifying an index to search from.
		   *
		   * @private
		   * @param {Array} [array] The array to inspect.
		   * @param {*} target The value to search for.
		   * @returns {boolean} Returns `true` if `target` is found, else `false`.
		   */
		  function arrayIncludes(array, value) {
		    var length = array == null ? 0 : array.length;
		    return !!length && baseIndexOf(array, value, 0) > -1;
		  }

		  /**
		   * This function is like `arrayIncludes` except that it accepts a comparator.
		   *
		   * @private
		   * @param {Array} [array] The array to inspect.
		   * @param {*} target The value to search for.
		   * @param {Function} comparator The comparator invoked per element.
		   * @returns {boolean} Returns `true` if `target` is found, else `false`.
		   */
		  function arrayIncludesWith(array, value, comparator) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (comparator(value, array[index])) {
		        return true;
		      }
		    }
		    return false;
		  }

		  /**
		   * A specialized version of `_.map` for arrays without support for iteratee
		   * shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns the new mapped array.
		   */
		  function arrayMap(array, iteratee) {
		    var index = -1,
		        length = array == null ? 0 : array.length,
		        result = Array(length);

		    while (++index < length) {
		      result[index] = iteratee(array[index], index, array);
		    }
		    return result;
		  }

		  /**
		   * Appends the elements of `values` to `array`.
		   *
		   * @private
		   * @param {Array} array The array to modify.
		   * @param {Array} values The values to append.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayPush(array, values) {
		    var index = -1,
		        length = values.length,
		        offset = array.length;

		    while (++index < length) {
		      array[offset + index] = values[index];
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.reduce` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} [accumulator] The initial value.
		   * @param {boolean} [initAccum] Specify using the first element of `array` as
		   *  the initial value.
		   * @returns {*} Returns the accumulated value.
		   */
		  function arrayReduce(array, iteratee, accumulator, initAccum) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    if (initAccum && length) {
		      accumulator = array[++index];
		    }
		    while (++index < length) {
		      accumulator = iteratee(accumulator, array[index], index, array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.reduceRight` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} [accumulator] The initial value.
		   * @param {boolean} [initAccum] Specify using the last element of `array` as
		   *  the initial value.
		   * @returns {*} Returns the accumulated value.
		   */
		  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
		    var length = array == null ? 0 : array.length;
		    if (initAccum && length) {
		      accumulator = array[--length];
		    }
		    while (length--) {
		      accumulator = iteratee(accumulator, array[length], length, array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.some` for arrays without support for iteratee
		   * shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {boolean} Returns `true` if any element passes the predicate check,
		   *  else `false`.
		   */
		  function arraySome(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (predicate(array[index], index, array)) {
		        return true;
		      }
		    }
		    return false;
		  }

		  /**
		   * Gets the size of an ASCII `string`.
		   *
		   * @private
		   * @param {string} string The string inspect.
		   * @returns {number} Returns the string size.
		   */
		  var asciiSize = baseProperty('length');

		  /**
		   * Converts an ASCII `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function asciiToArray(string) {
		    return string.split('');
		  }

		  /**
		   * Splits an ASCII `string` into an array of its words.
		   *
		   * @private
		   * @param {string} The string to inspect.
		   * @returns {Array} Returns the words of `string`.
		   */
		  function asciiWords(string) {
		    return string.match(reAsciiWord) || [];
		  }

		  /**
		   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
		   * without support for iteratee shorthands, which iterates over `collection`
		   * using `eachFunc`.
		   *
		   * @private
		   * @param {Array|Object} collection The collection to inspect.
		   * @param {Function} predicate The function invoked per iteration.
		   * @param {Function} eachFunc The function to iterate over `collection`.
		   * @returns {*} Returns the found element or its key, else `undefined`.
		   */
		  function baseFindKey(collection, predicate, eachFunc) {
		    var result;
		    eachFunc(collection, function(value, key, collection) {
		      if (predicate(value, key, collection)) {
		        result = key;
		        return false;
		      }
		    });
		    return result;
		  }

		  /**
		   * The base implementation of `_.findIndex` and `_.findLastIndex` without
		   * support for iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {Function} predicate The function invoked per iteration.
		   * @param {number} fromIndex The index to search from.
		   * @param {boolean} [fromRight] Specify iterating from right to left.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseFindIndex(array, predicate, fromIndex, fromRight) {
		    var length = array.length,
		        index = fromIndex + (fromRight ? 1 : -1);

		    while ((fromRight ? index-- : ++index < length)) {
		      if (predicate(array[index], index, array)) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseIndexOf(array, value, fromIndex) {
		    return value === value
		      ? strictIndexOf(array, value, fromIndex)
		      : baseFindIndex(array, baseIsNaN, fromIndex);
		  }

		  /**
		   * This function is like `baseIndexOf` except that it accepts a comparator.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @param {Function} comparator The comparator invoked per element.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseIndexOfWith(array, value, fromIndex, comparator) {
		    var index = fromIndex - 1,
		        length = array.length;

		    while (++index < length) {
		      if (comparator(array[index], value)) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * The base implementation of `_.isNaN` without support for number objects.
		   *
		   * @private
		   * @param {*} value The value to check.
		   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
		   */
		  function baseIsNaN(value) {
		    return value !== value;
		  }

		  /**
		   * The base implementation of `_.mean` and `_.meanBy` without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {number} Returns the mean.
		   */
		  function baseMean(array, iteratee) {
		    var length = array == null ? 0 : array.length;
		    return length ? (baseSum(array, iteratee) / length) : NAN;
		  }

		  /**
		   * The base implementation of `_.property` without support for deep paths.
		   *
		   * @private
		   * @param {string} key The key of the property to get.
		   * @returns {Function} Returns the new accessor function.
		   */
		  function baseProperty(key) {
		    return function(object) {
		      return object == null ? undefined$1 : object[key];
		    };
		  }

		  /**
		   * The base implementation of `_.propertyOf` without support for deep paths.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @returns {Function} Returns the new accessor function.
		   */
		  function basePropertyOf(object) {
		    return function(key) {
		      return object == null ? undefined$1 : object[key];
		    };
		  }

		  /**
		   * The base implementation of `_.reduce` and `_.reduceRight`, without support
		   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
		   *
		   * @private
		   * @param {Array|Object} collection The collection to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} accumulator The initial value.
		   * @param {boolean} initAccum Specify using the first or last element of
		   *  `collection` as the initial value.
		   * @param {Function} eachFunc The function to iterate over `collection`.
		   * @returns {*} Returns the accumulated value.
		   */
		  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
		    eachFunc(collection, function(value, index, collection) {
		      accumulator = initAccum
		        ? (initAccum = false, value)
		        : iteratee(accumulator, value, index, collection);
		    });
		    return accumulator;
		  }

		  /**
		   * The base implementation of `_.sortBy` which uses `comparer` to define the
		   * sort order of `array` and replaces criteria objects with their corresponding
		   * values.
		   *
		   * @private
		   * @param {Array} array The array to sort.
		   * @param {Function} comparer The function to define sort order.
		   * @returns {Array} Returns `array`.
		   */
		  function baseSortBy(array, comparer) {
		    var length = array.length;

		    array.sort(comparer);
		    while (length--) {
		      array[length] = array[length].value;
		    }
		    return array;
		  }

		  /**
		   * The base implementation of `_.sum` and `_.sumBy` without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {number} Returns the sum.
		   */
		  function baseSum(array, iteratee) {
		    var result,
		        index = -1,
		        length = array.length;

		    while (++index < length) {
		      var current = iteratee(array[index]);
		      if (current !== undefined$1) {
		        result = result === undefined$1 ? current : (result + current);
		      }
		    }
		    return result;
		  }

		  /**
		   * The base implementation of `_.times` without support for iteratee shorthands
		   * or max array length checks.
		   *
		   * @private
		   * @param {number} n The number of times to invoke `iteratee`.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns the array of results.
		   */
		  function baseTimes(n, iteratee) {
		    var index = -1,
		        result = Array(n);

		    while (++index < n) {
		      result[index] = iteratee(index);
		    }
		    return result;
		  }

		  /**
		   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
		   * of key-value pairs for `object` corresponding to the property names of `props`.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @param {Array} props The property names to get values for.
		   * @returns {Object} Returns the key-value pairs.
		   */
		  function baseToPairs(object, props) {
		    return arrayMap(props, function(key) {
		      return [key, object[key]];
		    });
		  }

		  /**
		   * The base implementation of `_.trim`.
		   *
		   * @private
		   * @param {string} string The string to trim.
		   * @returns {string} Returns the trimmed string.
		   */
		  function baseTrim(string) {
		    return string
		      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
		      : string;
		  }

		  /**
		   * The base implementation of `_.unary` without support for storing metadata.
		   *
		   * @private
		   * @param {Function} func The function to cap arguments for.
		   * @returns {Function} Returns the new capped function.
		   */
		  function baseUnary(func) {
		    return function(value) {
		      return func(value);
		    };
		  }

		  /**
		   * The base implementation of `_.values` and `_.valuesIn` which creates an
		   * array of `object` property values corresponding to the property names
		   * of `props`.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @param {Array} props The property names to get values for.
		   * @returns {Object} Returns the array of property values.
		   */
		  function baseValues(object, props) {
		    return arrayMap(props, function(key) {
		      return object[key];
		    });
		  }

		  /**
		   * Checks if a `cache` value for `key` exists.
		   *
		   * @private
		   * @param {Object} cache The cache to query.
		   * @param {string} key The key of the entry to check.
		   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		   */
		  function cacheHas(cache, key) {
		    return cache.has(key);
		  }

		  /**
		   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
		   * that is not found in the character symbols.
		   *
		   * @private
		   * @param {Array} strSymbols The string symbols to inspect.
		   * @param {Array} chrSymbols The character symbols to find.
		   * @returns {number} Returns the index of the first unmatched string symbol.
		   */
		  function charsStartIndex(strSymbols, chrSymbols) {
		    var index = -1,
		        length = strSymbols.length;

		    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
		    return index;
		  }

		  /**
		   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
		   * that is not found in the character symbols.
		   *
		   * @private
		   * @param {Array} strSymbols The string symbols to inspect.
		   * @param {Array} chrSymbols The character symbols to find.
		   * @returns {number} Returns the index of the last unmatched string symbol.
		   */
		  function charsEndIndex(strSymbols, chrSymbols) {
		    var index = strSymbols.length;

		    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
		    return index;
		  }

		  /**
		   * Gets the number of `placeholder` occurrences in `array`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} placeholder The placeholder to search for.
		   * @returns {number} Returns the placeholder count.
		   */
		  function countHolders(array, placeholder) {
		    var length = array.length,
		        result = 0;

		    while (length--) {
		      if (array[length] === placeholder) {
		        ++result;
		      }
		    }
		    return result;
		  }

		  /**
		   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
		   * letters to basic Latin letters.
		   *
		   * @private
		   * @param {string} letter The matched letter to deburr.
		   * @returns {string} Returns the deburred letter.
		   */
		  var deburrLetter = basePropertyOf(deburredLetters);

		  /**
		   * Used by `_.escape` to convert characters to HTML entities.
		   *
		   * @private
		   * @param {string} chr The matched character to escape.
		   * @returns {string} Returns the escaped character.
		   */
		  var escapeHtmlChar = basePropertyOf(htmlEscapes);

		  /**
		   * Used by `_.template` to escape characters for inclusion in compiled string literals.
		   *
		   * @private
		   * @param {string} chr The matched character to escape.
		   * @returns {string} Returns the escaped character.
		   */
		  function escapeStringChar(chr) {
		    return '\\' + stringEscapes[chr];
		  }

		  /**
		   * Gets the value at `key` of `object`.
		   *
		   * @private
		   * @param {Object} [object] The object to query.
		   * @param {string} key The key of the property to get.
		   * @returns {*} Returns the property value.
		   */
		  function getValue(object, key) {
		    return object == null ? undefined$1 : object[key];
		  }

		  /**
		   * Checks if `string` contains Unicode symbols.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
		   */
		  function hasUnicode(string) {
		    return reHasUnicode.test(string);
		  }

		  /**
		   * Checks if `string` contains a word composed of Unicode symbols.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {boolean} Returns `true` if a word is found, else `false`.
		   */
		  function hasUnicodeWord(string) {
		    return reHasUnicodeWord.test(string);
		  }

		  /**
		   * Converts `iterator` to an array.
		   *
		   * @private
		   * @param {Object} iterator The iterator to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function iteratorToArray(iterator) {
		    var data,
		        result = [];

		    while (!(data = iterator.next()).done) {
		      result.push(data.value);
		    }
		    return result;
		  }

		  /**
		   * Converts `map` to its key-value pairs.
		   *
		   * @private
		   * @param {Object} map The map to convert.
		   * @returns {Array} Returns the key-value pairs.
		   */
		  function mapToArray(map) {
		    var index = -1,
		        result = Array(map.size);

		    map.forEach(function(value, key) {
		      result[++index] = [key, value];
		    });
		    return result;
		  }

		  /**
		   * Creates a unary function that invokes `func` with its argument transformed.
		   *
		   * @private
		   * @param {Function} func The function to wrap.
		   * @param {Function} transform The argument transform.
		   * @returns {Function} Returns the new function.
		   */
		  function overArg(func, transform) {
		    return function(arg) {
		      return func(transform(arg));
		    };
		  }

		  /**
		   * Replaces all `placeholder` elements in `array` with an internal placeholder
		   * and returns an array of their indexes.
		   *
		   * @private
		   * @param {Array} array The array to modify.
		   * @param {*} placeholder The placeholder to replace.
		   * @returns {Array} Returns the new array of placeholder indexes.
		   */
		  function replaceHolders(array, placeholder) {
		    var index = -1,
		        length = array.length,
		        resIndex = 0,
		        result = [];

		    while (++index < length) {
		      var value = array[index];
		      if (value === placeholder || value === PLACEHOLDER) {
		        array[index] = PLACEHOLDER;
		        result[resIndex++] = index;
		      }
		    }
		    return result;
		  }

		  /**
		   * Converts `set` to an array of its values.
		   *
		   * @private
		   * @param {Object} set The set to convert.
		   * @returns {Array} Returns the values.
		   */
		  function setToArray(set) {
		    var index = -1,
		        result = Array(set.size);

		    set.forEach(function(value) {
		      result[++index] = value;
		    });
		    return result;
		  }

		  /**
		   * Converts `set` to its value-value pairs.
		   *
		   * @private
		   * @param {Object} set The set to convert.
		   * @returns {Array} Returns the value-value pairs.
		   */
		  function setToPairs(set) {
		    var index = -1,
		        result = Array(set.size);

		    set.forEach(function(value) {
		      result[++index] = [value, value];
		    });
		    return result;
		  }

		  /**
		   * A specialized version of `_.indexOf` which performs strict equality
		   * comparisons of values, i.e. `===`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function strictIndexOf(array, value, fromIndex) {
		    var index = fromIndex - 1,
		        length = array.length;

		    while (++index < length) {
		      if (array[index] === value) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * A specialized version of `_.lastIndexOf` which performs strict equality
		   * comparisons of values, i.e. `===`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function strictLastIndexOf(array, value, fromIndex) {
		    var index = fromIndex + 1;
		    while (index--) {
		      if (array[index] === value) {
		        return index;
		      }
		    }
		    return index;
		  }

		  /**
		   * Gets the number of symbols in `string`.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {number} Returns the string size.
		   */
		  function stringSize(string) {
		    return hasUnicode(string)
		      ? unicodeSize(string)
		      : asciiSize(string);
		  }

		  /**
		   * Converts `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function stringToArray(string) {
		    return hasUnicode(string)
		      ? unicodeToArray(string)
		      : asciiToArray(string);
		  }

		  /**
		   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
		   * character of `string`.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {number} Returns the index of the last non-whitespace character.
		   */
		  function trimmedEndIndex(string) {
		    var index = string.length;

		    while (index-- && reWhitespace.test(string.charAt(index))) {}
		    return index;
		  }

		  /**
		   * Used by `_.unescape` to convert HTML entities to characters.
		   *
		   * @private
		   * @param {string} chr The matched character to unescape.
		   * @returns {string} Returns the unescaped character.
		   */
		  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

		  /**
		   * Gets the size of a Unicode `string`.
		   *
		   * @private
		   * @param {string} string The string inspect.
		   * @returns {number} Returns the string size.
		   */
		  function unicodeSize(string) {
		    var result = reUnicode.lastIndex = 0;
		    while (reUnicode.test(string)) {
		      ++result;
		    }
		    return result;
		  }

		  /**
		   * Converts a Unicode `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function unicodeToArray(string) {
		    return string.match(reUnicode) || [];
		  }

		  /**
		   * Splits a Unicode `string` into an array of its words.
		   *
		   * @private
		   * @param {string} The string to inspect.
		   * @returns {Array} Returns the words of `string`.
		   */
		  function unicodeWords(string) {
		    return string.match(reUnicodeWord) || [];
		  }

		  /*--------------------------------------------------------------------------*/

		  /**
		   * Create a new pristine `lodash` function using the `context` object.
		   *
		   * @static
		   * @memberOf _
		   * @since 1.1.0
		   * @category Util
		   * @param {Object} [context=root] The context object.
		   * @returns {Function} Returns a new `lodash` function.
		   * @example
		   *
		   * _.mixin({ 'foo': _.constant('foo') });
		   *
		   * var lodash = _.runInContext();
		   * lodash.mixin({ 'bar': lodash.constant('bar') });
		   *
		   * _.isFunction(_.foo);
		   * // => true
		   * _.isFunction(_.bar);
		   * // => false
		   *
		   * lodash.isFunction(lodash.foo);
		   * // => false
		   * lodash.isFunction(lodash.bar);
		   * // => true
		   *
		   * // Create a suped-up `defer` in Node.js.
		   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
		   */
		  var runInContext = (function runInContext(context) {
		    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

		    /** Built-in constructor references. */
		    var Array = context.Array,
		        Date = context.Date,
		        Error = context.Error,
		        Function = context.Function,
		        Math = context.Math,
		        Object = context.Object,
		        RegExp = context.RegExp,
		        String = context.String,
		        TypeError = context.TypeError;

		    /** Used for built-in method references. */
		    var arrayProto = Array.prototype,
		        funcProto = Function.prototype,
		        objectProto = Object.prototype;

		    /** Used to detect overreaching core-js shims. */
		    var coreJsData = context['__core-js_shared__'];

		    /** Used to resolve the decompiled source of functions. */
		    var funcToString = funcProto.toString;

		    /** Used to check objects for own properties. */
		    var hasOwnProperty = objectProto.hasOwnProperty;

		    /** Used to generate unique IDs. */
		    var idCounter = 0;

		    /** Used to detect methods masquerading as native. */
		    var maskSrcKey = (function() {
		      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
		      return uid ? ('Symbol(src)_1.' + uid) : '';
		    }());

		    /**
		     * Used to resolve the
		     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		     * of values.
		     */
		    var nativeObjectToString = objectProto.toString;

		    /** Used to infer the `Object` constructor. */
		    var objectCtorString = funcToString.call(Object);

		    /** Used to restore the original `_` reference in `_.noConflict`. */
		    var oldDash = root._;

		    /** Used to detect if a method is native. */
		    var reIsNative = RegExp('^' +
		      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
		      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
		    );

		    /** Built-in value references. */
		    var Buffer = moduleExports ? context.Buffer : undefined$1,
		        Symbol = context.Symbol,
		        Uint8Array = context.Uint8Array,
		        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
		        getPrototype = overArg(Object.getPrototypeOf, Object),
		        objectCreate = Object.create,
		        propertyIsEnumerable = objectProto.propertyIsEnumerable,
		        splice = arrayProto.splice,
		        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
		        symIterator = Symbol ? Symbol.iterator : undefined$1,
		        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

		    var defineProperty = (function() {
		      try {
		        var func = getNative(Object, 'defineProperty');
		        func({}, '', {});
		        return func;
		      } catch (e) {}
		    }());

		    /** Mocked built-ins. */
		    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
		        ctxNow = Date && Date.now !== root.Date.now && Date.now,
		        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

		    /* Built-in method references for those with the same name as other `lodash` methods. */
		    var nativeCeil = Math.ceil,
		        nativeFloor = Math.floor,
		        nativeGetSymbols = Object.getOwnPropertySymbols,
		        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
		        nativeIsFinite = context.isFinite,
		        nativeJoin = arrayProto.join,
		        nativeKeys = overArg(Object.keys, Object),
		        nativeMax = Math.max,
		        nativeMin = Math.min,
		        nativeNow = Date.now,
		        nativeParseInt = context.parseInt,
		        nativeRandom = Math.random,
		        nativeReverse = arrayProto.reverse;

		    /* Built-in method references that are verified to be native. */
		    var DataView = getNative(context, 'DataView'),
		        Map = getNative(context, 'Map'),
		        Promise = getNative(context, 'Promise'),
		        Set = getNative(context, 'Set'),
		        WeakMap = getNative(context, 'WeakMap'),
		        nativeCreate = getNative(Object, 'create');

		    /** Used to store function metadata. */
		    var metaMap = WeakMap && new WeakMap;

		    /** Used to lookup unminified function names. */
		    var realNames = {};

		    /** Used to detect maps, sets, and weakmaps. */
		    var dataViewCtorString = toSource(DataView),
		        mapCtorString = toSource(Map),
		        promiseCtorString = toSource(Promise),
		        setCtorString = toSource(Set),
		        weakMapCtorString = toSource(WeakMap);

		    /** Used to convert symbols to primitives and strings. */
		    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
		        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
		        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a `lodash` object which wraps `value` to enable implicit method
		     * chain sequences. Methods that operate on and return arrays, collections,
		     * and functions can be chained together. Methods that retrieve a single value
		     * or may return a primitive value will automatically end the chain sequence
		     * and return the unwrapped value. Otherwise, the value must be unwrapped
		     * with `_#value`.
		     *
		     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
		     * enabled using `_.chain`.
		     *
		     * The execution of chained methods is lazy, that is, it's deferred until
		     * `_#value` is implicitly or explicitly called.
		     *
		     * Lazy evaluation allows several methods to support shortcut fusion.
		     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
		     * the creation of intermediate arrays and can greatly reduce the number of
		     * iteratee executions. Sections of a chain sequence qualify for shortcut
		     * fusion if the section is applied to an array and iteratees accept only
		     * one argument. The heuristic for whether a section qualifies for shortcut
		     * fusion is subject to change.
		     *
		     * Chaining is supported in custom builds as long as the `_#value` method is
		     * directly or indirectly included in the build.
		     *
		     * In addition to lodash methods, wrappers have `Array` and `String` methods.
		     *
		     * The wrapper `Array` methods are:
		     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
		     *
		     * The wrapper `String` methods are:
		     * `replace` and `split`
		     *
		     * The wrapper methods that support shortcut fusion are:
		     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
		     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
		     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
		     *
		     * The chainable wrapper methods are:
		     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
		     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
		     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
		     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
		     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
		     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
		     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
		     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
		     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
		     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
		     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
		     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
		     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
		     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
		     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
		     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
		     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
		     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
		     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
		     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
		     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
		     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
		     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
		     * `zipObject`, `zipObjectDeep`, and `zipWith`
		     *
		     * The wrapper methods that are **not** chainable by default are:
		     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
		     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
		     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
		     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
		     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
		     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
		     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
		     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
		     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
		     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
		     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
		     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
		     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
		     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
		     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
		     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
		     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
		     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
		     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
		     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
		     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
		     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
		     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
		     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
		     * `upperFirst`, `value`, and `words`
		     *
		     * @name _
		     * @constructor
		     * @category Seq
		     * @param {*} value The value to wrap in a `lodash` instance.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var wrapped = _([1, 2, 3]);
		     *
		     * // Returns an unwrapped value.
		     * wrapped.reduce(_.add);
		     * // => 6
		     *
		     * // Returns a wrapped value.
		     * var squares = wrapped.map(square);
		     *
		     * _.isArray(squares);
		     * // => false
		     *
		     * _.isArray(squares.value());
		     * // => true
		     */
		    function lodash(value) {
		      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
		        if (value instanceof LodashWrapper) {
		          return value;
		        }
		        if (hasOwnProperty.call(value, '__wrapped__')) {
		          return wrapperClone(value);
		        }
		      }
		      return new LodashWrapper(value);
		    }

		    /**
		     * The base implementation of `_.create` without support for assigning
		     * properties to the created object.
		     *
		     * @private
		     * @param {Object} proto The object to inherit from.
		     * @returns {Object} Returns the new object.
		     */
		    var baseCreate = (function() {
		      function object() {}
		      return function(proto) {
		        if (!isObject(proto)) {
		          return {};
		        }
		        if (objectCreate) {
		          return objectCreate(proto);
		        }
		        object.prototype = proto;
		        var result = new object;
		        object.prototype = undefined$1;
		        return result;
		      };
		    }());

		    /**
		     * The function whose prototype chain sequence wrappers inherit from.
		     *
		     * @private
		     */
		    function baseLodash() {
		      // No operation performed.
		    }

		    /**
		     * The base constructor for creating `lodash` wrapper objects.
		     *
		     * @private
		     * @param {*} value The value to wrap.
		     * @param {boolean} [chainAll] Enable explicit method chain sequences.
		     */
		    function LodashWrapper(value, chainAll) {
		      this.__wrapped__ = value;
		      this.__actions__ = [];
		      this.__chain__ = !!chainAll;
		      this.__index__ = 0;
		      this.__values__ = undefined$1;
		    }

		    /**
		     * By default, the template delimiters used by lodash are like those in
		     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
		     * following template settings to use alternative delimiters.
		     *
		     * @static
		     * @memberOf _
		     * @type {Object}
		     */
		    lodash.templateSettings = {

		      /**
		       * Used to detect `data` property values to be HTML-escaped.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'escape': reEscape,

		      /**
		       * Used to detect code to be evaluated.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'evaluate': reEvaluate,

		      /**
		       * Used to detect `data` property values to inject.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'interpolate': reInterpolate,

		      /**
		       * Used to reference the data object in the template text.
		       *
		       * @memberOf _.templateSettings
		       * @type {string}
		       */
		      'variable': '',

		      /**
		       * Used to import variables into the compiled template.
		       *
		       * @memberOf _.templateSettings
		       * @type {Object}
		       */
		      'imports': {

		        /**
		         * A reference to the `lodash` function.
		         *
		         * @memberOf _.templateSettings.imports
		         * @type {Function}
		         */
		        '_': lodash
		      }
		    };

		    // Ensure wrappers are instances of `baseLodash`.
		    lodash.prototype = baseLodash.prototype;
		    lodash.prototype.constructor = lodash;

		    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
		    LodashWrapper.prototype.constructor = LodashWrapper;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
		     *
		     * @private
		     * @constructor
		     * @param {*} value The value to wrap.
		     */
		    function LazyWrapper(value) {
		      this.__wrapped__ = value;
		      this.__actions__ = [];
		      this.__dir__ = 1;
		      this.__filtered__ = false;
		      this.__iteratees__ = [];
		      this.__takeCount__ = MAX_ARRAY_LENGTH;
		      this.__views__ = [];
		    }

		    /**
		     * Creates a clone of the lazy wrapper object.
		     *
		     * @private
		     * @name clone
		     * @memberOf LazyWrapper
		     * @returns {Object} Returns the cloned `LazyWrapper` object.
		     */
		    function lazyClone() {
		      var result = new LazyWrapper(this.__wrapped__);
		      result.__actions__ = copyArray(this.__actions__);
		      result.__dir__ = this.__dir__;
		      result.__filtered__ = this.__filtered__;
		      result.__iteratees__ = copyArray(this.__iteratees__);
		      result.__takeCount__ = this.__takeCount__;
		      result.__views__ = copyArray(this.__views__);
		      return result;
		    }

		    /**
		     * Reverses the direction of lazy iteration.
		     *
		     * @private
		     * @name reverse
		     * @memberOf LazyWrapper
		     * @returns {Object} Returns the new reversed `LazyWrapper` object.
		     */
		    function lazyReverse() {
		      if (this.__filtered__) {
		        var result = new LazyWrapper(this);
		        result.__dir__ = -1;
		        result.__filtered__ = true;
		      } else {
		        result = this.clone();
		        result.__dir__ *= -1;
		      }
		      return result;
		    }

		    /**
		     * Extracts the unwrapped value from its lazy wrapper.
		     *
		     * @private
		     * @name value
		     * @memberOf LazyWrapper
		     * @returns {*} Returns the unwrapped value.
		     */
		    function lazyValue() {
		      var array = this.__wrapped__.value(),
		          dir = this.__dir__,
		          isArr = isArray(array),
		          isRight = dir < 0,
		          arrLength = isArr ? array.length : 0,
		          view = getView(0, arrLength, this.__views__),
		          start = view.start,
		          end = view.end,
		          length = end - start,
		          index = isRight ? end : (start - 1),
		          iteratees = this.__iteratees__,
		          iterLength = iteratees.length,
		          resIndex = 0,
		          takeCount = nativeMin(length, this.__takeCount__);

		      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
		        return baseWrapperValue(array, this.__actions__);
		      }
		      var result = [];

		      outer:
		      while (length-- && resIndex < takeCount) {
		        index += dir;

		        var iterIndex = -1,
		            value = array[index];

		        while (++iterIndex < iterLength) {
		          var data = iteratees[iterIndex],
		              iteratee = data.iteratee,
		              type = data.type,
		              computed = iteratee(value);

		          if (type == LAZY_MAP_FLAG) {
		            value = computed;
		          } else if (!computed) {
		            if (type == LAZY_FILTER_FLAG) {
		              continue outer;
		            } else {
		              break outer;
		            }
		          }
		        }
		        result[resIndex++] = value;
		      }
		      return result;
		    }

		    // Ensure `LazyWrapper` is an instance of `baseLodash`.
		    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
		    LazyWrapper.prototype.constructor = LazyWrapper;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a hash object.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function Hash(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the hash.
		     *
		     * @private
		     * @name clear
		     * @memberOf Hash
		     */
		    function hashClear() {
		      this.__data__ = nativeCreate ? nativeCreate(null) : {};
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the hash.
		     *
		     * @private
		     * @name delete
		     * @memberOf Hash
		     * @param {Object} hash The hash to modify.
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function hashDelete(key) {
		      var result = this.has(key) && delete this.__data__[key];
		      this.size -= result ? 1 : 0;
		      return result;
		    }

		    /**
		     * Gets the hash value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf Hash
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function hashGet(key) {
		      var data = this.__data__;
		      if (nativeCreate) {
		        var result = data[key];
		        return result === HASH_UNDEFINED ? undefined$1 : result;
		      }
		      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
		    }

		    /**
		     * Checks if a hash value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf Hash
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function hashHas(key) {
		      var data = this.__data__;
		      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
		    }

		    /**
		     * Sets the hash `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf Hash
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the hash instance.
		     */
		    function hashSet(key, value) {
		      var data = this.__data__;
		      this.size += this.has(key) ? 0 : 1;
		      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
		      return this;
		    }

		    // Add methods to `Hash`.
		    Hash.prototype.clear = hashClear;
		    Hash.prototype['delete'] = hashDelete;
		    Hash.prototype.get = hashGet;
		    Hash.prototype.has = hashHas;
		    Hash.prototype.set = hashSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an list cache object.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function ListCache(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the list cache.
		     *
		     * @private
		     * @name clear
		     * @memberOf ListCache
		     */
		    function listCacheClear() {
		      this.__data__ = [];
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the list cache.
		     *
		     * @private
		     * @name delete
		     * @memberOf ListCache
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function listCacheDelete(key) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      if (index < 0) {
		        return false;
		      }
		      var lastIndex = data.length - 1;
		      if (index == lastIndex) {
		        data.pop();
		      } else {
		        splice.call(data, index, 1);
		      }
		      --this.size;
		      return true;
		    }

		    /**
		     * Gets the list cache value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf ListCache
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function listCacheGet(key) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      return index < 0 ? undefined$1 : data[index][1];
		    }

		    /**
		     * Checks if a list cache value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf ListCache
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function listCacheHas(key) {
		      return assocIndexOf(this.__data__, key) > -1;
		    }

		    /**
		     * Sets the list cache `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf ListCache
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the list cache instance.
		     */
		    function listCacheSet(key, value) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      if (index < 0) {
		        ++this.size;
		        data.push([key, value]);
		      } else {
		        data[index][1] = value;
		      }
		      return this;
		    }

		    // Add methods to `ListCache`.
		    ListCache.prototype.clear = listCacheClear;
		    ListCache.prototype['delete'] = listCacheDelete;
		    ListCache.prototype.get = listCacheGet;
		    ListCache.prototype.has = listCacheHas;
		    ListCache.prototype.set = listCacheSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a map cache object to store key-value pairs.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function MapCache(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the map.
		     *
		     * @private
		     * @name clear
		     * @memberOf MapCache
		     */
		    function mapCacheClear() {
		      this.size = 0;
		      this.__data__ = {
		        'hash': new Hash,
		        'map': new (Map || ListCache),
		        'string': new Hash
		      };
		    }

		    /**
		     * Removes `key` and its value from the map.
		     *
		     * @private
		     * @name delete
		     * @memberOf MapCache
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function mapCacheDelete(key) {
		      var result = getMapData(this, key)['delete'](key);
		      this.size -= result ? 1 : 0;
		      return result;
		    }

		    /**
		     * Gets the map value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf MapCache
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function mapCacheGet(key) {
		      return getMapData(this, key).get(key);
		    }

		    /**
		     * Checks if a map value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf MapCache
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function mapCacheHas(key) {
		      return getMapData(this, key).has(key);
		    }

		    /**
		     * Sets the map `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf MapCache
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the map cache instance.
		     */
		    function mapCacheSet(key, value) {
		      var data = getMapData(this, key),
		          size = data.size;

		      data.set(key, value);
		      this.size += data.size == size ? 0 : 1;
		      return this;
		    }

		    // Add methods to `MapCache`.
		    MapCache.prototype.clear = mapCacheClear;
		    MapCache.prototype['delete'] = mapCacheDelete;
		    MapCache.prototype.get = mapCacheGet;
		    MapCache.prototype.has = mapCacheHas;
		    MapCache.prototype.set = mapCacheSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     *
		     * Creates an array cache object to store unique values.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [values] The values to cache.
		     */
		    function SetCache(values) {
		      var index = -1,
		          length = values == null ? 0 : values.length;

		      this.__data__ = new MapCache;
		      while (++index < length) {
		        this.add(values[index]);
		      }
		    }

		    /**
		     * Adds `value` to the array cache.
		     *
		     * @private
		     * @name add
		     * @memberOf SetCache
		     * @alias push
		     * @param {*} value The value to cache.
		     * @returns {Object} Returns the cache instance.
		     */
		    function setCacheAdd(value) {
		      this.__data__.set(value, HASH_UNDEFINED);
		      return this;
		    }

		    /**
		     * Checks if `value` is in the array cache.
		     *
		     * @private
		     * @name has
		     * @memberOf SetCache
		     * @param {*} value The value to search for.
		     * @returns {number} Returns `true` if `value` is found, else `false`.
		     */
		    function setCacheHas(value) {
		      return this.__data__.has(value);
		    }

		    // Add methods to `SetCache`.
		    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
		    SetCache.prototype.has = setCacheHas;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a stack cache object to store key-value pairs.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function Stack(entries) {
		      var data = this.__data__ = new ListCache(entries);
		      this.size = data.size;
		    }

		    /**
		     * Removes all key-value entries from the stack.
		     *
		     * @private
		     * @name clear
		     * @memberOf Stack
		     */
		    function stackClear() {
		      this.__data__ = new ListCache;
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the stack.
		     *
		     * @private
		     * @name delete
		     * @memberOf Stack
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function stackDelete(key) {
		      var data = this.__data__,
		          result = data['delete'](key);

		      this.size = data.size;
		      return result;
		    }

		    /**
		     * Gets the stack value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf Stack
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function stackGet(key) {
		      return this.__data__.get(key);
		    }

		    /**
		     * Checks if a stack value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf Stack
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function stackHas(key) {
		      return this.__data__.has(key);
		    }

		    /**
		     * Sets the stack `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf Stack
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the stack cache instance.
		     */
		    function stackSet(key, value) {
		      var data = this.__data__;
		      if (data instanceof ListCache) {
		        var pairs = data.__data__;
		        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
		          pairs.push([key, value]);
		          this.size = ++data.size;
		          return this;
		        }
		        data = this.__data__ = new MapCache(pairs);
		      }
		      data.set(key, value);
		      this.size = data.size;
		      return this;
		    }

		    // Add methods to `Stack`.
		    Stack.prototype.clear = stackClear;
		    Stack.prototype['delete'] = stackDelete;
		    Stack.prototype.get = stackGet;
		    Stack.prototype.has = stackHas;
		    Stack.prototype.set = stackSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an array of the enumerable property names of the array-like `value`.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @param {boolean} inherited Specify returning inherited property names.
		     * @returns {Array} Returns the array of property names.
		     */
		    function arrayLikeKeys(value, inherited) {
		      var isArr = isArray(value),
		          isArg = !isArr && isArguments(value),
		          isBuff = !isArr && !isArg && isBuffer(value),
		          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
		          skipIndexes = isArr || isArg || isBuff || isType,
		          result = skipIndexes ? baseTimes(value.length, String) : [],
		          length = result.length;

		      for (var key in value) {
		        if ((inherited || hasOwnProperty.call(value, key)) &&
		            !(skipIndexes && (
		               // Safari 9 has enumerable `arguments.length` in strict mode.
		               key == 'length' ||
		               // Node.js 0.10 has enumerable non-index properties on buffers.
		               (isBuff && (key == 'offset' || key == 'parent')) ||
		               // PhantomJS 2 has enumerable non-index properties on typed arrays.
		               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
		               // Skip index properties.
		               isIndex(key, length)
		            ))) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * A specialized version of `_.sample` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to sample.
		     * @returns {*} Returns the random element.
		     */
		    function arraySample(array) {
		      var length = array.length;
		      return length ? array[baseRandom(0, length - 1)] : undefined$1;
		    }

		    /**
		     * A specialized version of `_.sampleSize` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to sample.
		     * @param {number} n The number of elements to sample.
		     * @returns {Array} Returns the random elements.
		     */
		    function arraySampleSize(array, n) {
		      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
		    }

		    /**
		     * A specialized version of `_.shuffle` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     */
		    function arrayShuffle(array) {
		      return shuffleSelf(copyArray(array));
		    }

		    /**
		     * This function is like `assignValue` except that it doesn't assign
		     * `undefined` values.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function assignMergeValue(object, key, value) {
		      if ((value !== undefined$1 && !eq(object[key], value)) ||
		          (value === undefined$1 && !(key in object))) {
		        baseAssignValue(object, key, value);
		      }
		    }

		    /**
		     * Assigns `value` to `key` of `object` if the existing value is not equivalent
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function assignValue(object, key, value) {
		      var objValue = object[key];
		      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
		          (value === undefined$1 && !(key in object))) {
		        baseAssignValue(object, key, value);
		      }
		    }

		    /**
		     * Gets the index at which the `key` is found in `array` of key-value pairs.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {*} key The key to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     */
		    function assocIndexOf(array, key) {
		      var length = array.length;
		      while (length--) {
		        if (eq(array[length][0], key)) {
		          return length;
		        }
		      }
		      return -1;
		    }

		    /**
		     * Aggregates elements of `collection` on `accumulator` with keys transformed
		     * by `iteratee` and values set by `setter`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} setter The function to set `accumulator` values.
		     * @param {Function} iteratee The iteratee to transform keys.
		     * @param {Object} accumulator The initial aggregated object.
		     * @returns {Function} Returns `accumulator`.
		     */
		    function baseAggregator(collection, setter, iteratee, accumulator) {
		      baseEach(collection, function(value, key, collection) {
		        setter(accumulator, value, iteratee(value), collection);
		      });
		      return accumulator;
		    }

		    /**
		     * The base implementation of `_.assign` without support for multiple sources
		     * or `customizer` functions.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @returns {Object} Returns `object`.
		     */
		    function baseAssign(object, source) {
		      return object && copyObject(source, keys(source), object);
		    }

		    /**
		     * The base implementation of `_.assignIn` without support for multiple sources
		     * or `customizer` functions.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @returns {Object} Returns `object`.
		     */
		    function baseAssignIn(object, source) {
		      return object && copyObject(source, keysIn(source), object);
		    }

		    /**
		     * The base implementation of `assignValue` and `assignMergeValue` without
		     * value checks.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function baseAssignValue(object, key, value) {
		      if (key == '__proto__' && defineProperty) {
		        defineProperty(object, key, {
		          'configurable': true,
		          'enumerable': true,
		          'value': value,
		          'writable': true
		        });
		      } else {
		        object[key] = value;
		      }
		    }

		    /**
		     * The base implementation of `_.at` without support for individual paths.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {string[]} paths The property paths to pick.
		     * @returns {Array} Returns the picked elements.
		     */
		    function baseAt(object, paths) {
		      var index = -1,
		          length = paths.length,
		          result = Array(length),
		          skip = object == null;

		      while (++index < length) {
		        result[index] = skip ? undefined$1 : get(object, paths[index]);
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.clamp` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {number} number The number to clamp.
		     * @param {number} [lower] The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the clamped number.
		     */
		    function baseClamp(number, lower, upper) {
		      if (number === number) {
		        if (upper !== undefined$1) {
		          number = number <= upper ? number : upper;
		        }
		        if (lower !== undefined$1) {
		          number = number >= lower ? number : lower;
		        }
		      }
		      return number;
		    }

		    /**
		     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
		     * traversed objects.
		     *
		     * @private
		     * @param {*} value The value to clone.
		     * @param {boolean} bitmask The bitmask flags.
		     *  1 - Deep clone
		     *  2 - Flatten inherited properties
		     *  4 - Clone symbols
		     * @param {Function} [customizer] The function to customize cloning.
		     * @param {string} [key] The key of `value`.
		     * @param {Object} [object] The parent object of `value`.
		     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
		     * @returns {*} Returns the cloned value.
		     */
		    function baseClone(value, bitmask, customizer, key, object, stack) {
		      var result,
		          isDeep = bitmask & CLONE_DEEP_FLAG,
		          isFlat = bitmask & CLONE_FLAT_FLAG,
		          isFull = bitmask & CLONE_SYMBOLS_FLAG;

		      if (customizer) {
		        result = object ? customizer(value, key, object, stack) : customizer(value);
		      }
		      if (result !== undefined$1) {
		        return result;
		      }
		      if (!isObject(value)) {
		        return value;
		      }
		      var isArr = isArray(value);
		      if (isArr) {
		        result = initCloneArray(value);
		        if (!isDeep) {
		          return copyArray(value, result);
		        }
		      } else {
		        var tag = getTag(value),
		            isFunc = tag == funcTag || tag == genTag;

		        if (isBuffer(value)) {
		          return cloneBuffer(value, isDeep);
		        }
		        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
		          result = (isFlat || isFunc) ? {} : initCloneObject(value);
		          if (!isDeep) {
		            return isFlat
		              ? copySymbolsIn(value, baseAssignIn(result, value))
		              : copySymbols(value, baseAssign(result, value));
		          }
		        } else {
		          if (!cloneableTags[tag]) {
		            return object ? value : {};
		          }
		          result = initCloneByTag(value, tag, isDeep);
		        }
		      }
		      // Check for circular references and return its corresponding clone.
		      stack || (stack = new Stack);
		      var stacked = stack.get(value);
		      if (stacked) {
		        return stacked;
		      }
		      stack.set(value, result);

		      if (isSet(value)) {
		        value.forEach(function(subValue) {
		          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
		        });
		      } else if (isMap(value)) {
		        value.forEach(function(subValue, key) {
		          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
		        });
		      }

		      var keysFunc = isFull
		        ? (isFlat ? getAllKeysIn : getAllKeys)
		        : (isFlat ? keysIn : keys);

		      var props = isArr ? undefined$1 : keysFunc(value);
		      arrayEach(props || value, function(subValue, key) {
		        if (props) {
		          key = subValue;
		          subValue = value[key];
		        }
		        // Recursively populate clone (susceptible to call stack limits).
		        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.conforms` which doesn't clone `source`.
		     *
		     * @private
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseConforms(source) {
		      var props = keys(source);
		      return function(object) {
		        return baseConformsTo(object, source, props);
		      };
		    }

		    /**
		     * The base implementation of `_.conformsTo` which accepts `props` to check.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
		     */
		    function baseConformsTo(object, source, props) {
		      var length = props.length;
		      if (object == null) {
		        return !length;
		      }
		      object = Object(object);
		      while (length--) {
		        var key = props[length],
		            predicate = source[key],
		            value = object[key];

		        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
		          return false;
		        }
		      }
		      return true;
		    }

		    /**
		     * The base implementation of `_.delay` and `_.defer` which accepts `args`
		     * to provide to `func`.
		     *
		     * @private
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @param {Array} args The arguments to provide to `func`.
		     * @returns {number|Object} Returns the timer id or timeout object.
		     */
		    function baseDelay(func, wait, args) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
		    }

		    /**
		     * The base implementation of methods like `_.difference` without support
		     * for excluding multiple arrays or iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Array} values The values to exclude.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     */
		    function baseDifference(array, values, iteratee, comparator) {
		      var index = -1,
		          includes = arrayIncludes,
		          isCommon = true,
		          length = array.length,
		          result = [],
		          valuesLength = values.length;

		      if (!length) {
		        return result;
		      }
		      if (iteratee) {
		        values = arrayMap(values, baseUnary(iteratee));
		      }
		      if (comparator) {
		        includes = arrayIncludesWith;
		        isCommon = false;
		      }
		      else if (values.length >= LARGE_ARRAY_SIZE) {
		        includes = cacheHas;
		        isCommon = false;
		        values = new SetCache(values);
		      }
		      outer:
		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee == null ? value : iteratee(value);

		        value = (comparator || value !== 0) ? value : 0;
		        if (isCommon && computed === computed) {
		          var valuesIndex = valuesLength;
		          while (valuesIndex--) {
		            if (values[valuesIndex] === computed) {
		              continue outer;
		            }
		          }
		          result.push(value);
		        }
		        else if (!includes(values, computed, comparator)) {
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.forEach` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     */
		    var baseEach = createBaseEach(baseForOwn);

		    /**
		     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     */
		    var baseEachRight = createBaseEach(baseForOwnRight, true);

		    /**
		     * The base implementation of `_.every` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {boolean} Returns `true` if all elements pass the predicate check,
		     *  else `false`
		     */
		    function baseEvery(collection, predicate) {
		      var result = true;
		      baseEach(collection, function(value, index, collection) {
		        result = !!predicate(value, index, collection);
		        return result;
		      });
		      return result;
		    }

		    /**
		     * The base implementation of methods like `_.max` and `_.min` which accepts a
		     * `comparator` to determine the extremum value.
		     *
		     * @private
		     * @param {Array} array The array to iterate over.
		     * @param {Function} iteratee The iteratee invoked per iteration.
		     * @param {Function} comparator The comparator used to compare values.
		     * @returns {*} Returns the extremum value.
		     */
		    function baseExtremum(array, iteratee, comparator) {
		      var index = -1,
		          length = array.length;

		      while (++index < length) {
		        var value = array[index],
		            current = iteratee(value);

		        if (current != null && (computed === undefined$1
		              ? (current === current && !isSymbol(current))
		              : comparator(current, computed)
		            )) {
		          var computed = current,
		              result = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.fill` without an iteratee call guard.
		     *
		     * @private
		     * @param {Array} array The array to fill.
		     * @param {*} value The value to fill `array` with.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns `array`.
		     */
		    function baseFill(array, value, start, end) {
		      var length = array.length;

		      start = toInteger(start);
		      if (start < 0) {
		        start = -start > length ? 0 : (length + start);
		      }
		      end = (end === undefined$1 || end > length) ? length : toInteger(end);
		      if (end < 0) {
		        end += length;
		      }
		      end = start > end ? 0 : toLength(end);
		      while (start < end) {
		        array[start++] = value;
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.filter` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     */
		    function baseFilter(collection, predicate) {
		      var result = [];
		      baseEach(collection, function(value, index, collection) {
		        if (predicate(value, index, collection)) {
		          result.push(value);
		        }
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.flatten` with support for restricting flattening.
		     *
		     * @private
		     * @param {Array} array The array to flatten.
		     * @param {number} depth The maximum recursion depth.
		     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
		     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
		     * @param {Array} [result=[]] The initial result value.
		     * @returns {Array} Returns the new flattened array.
		     */
		    function baseFlatten(array, depth, predicate, isStrict, result) {
		      var index = -1,
		          length = array.length;

		      predicate || (predicate = isFlattenable);
		      result || (result = []);

		      while (++index < length) {
		        var value = array[index];
		        if (depth > 0 && predicate(value)) {
		          if (depth > 1) {
		            // Recursively flatten arrays (susceptible to call stack limits).
		            baseFlatten(value, depth - 1, predicate, isStrict, result);
		          } else {
		            arrayPush(result, value);
		          }
		        } else if (!isStrict) {
		          result[result.length] = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `baseForOwn` which iterates over `object`
		     * properties returned by `keysFunc` and invokes `iteratee` for each property.
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @returns {Object} Returns `object`.
		     */
		    var baseFor = createBaseFor();

		    /**
		     * This function is like `baseFor` except that it iterates over properties
		     * in the opposite order.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @returns {Object} Returns `object`.
		     */
		    var baseForRight = createBaseFor(true);

		    /**
		     * The base implementation of `_.forOwn` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     */
		    function baseForOwn(object, iteratee) {
		      return object && baseFor(object, iteratee, keys);
		    }

		    /**
		     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     */
		    function baseForOwnRight(object, iteratee) {
		      return object && baseForRight(object, iteratee, keys);
		    }

		    /**
		     * The base implementation of `_.functions` which creates an array of
		     * `object` function property names filtered from `props`.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Array} props The property names to filter.
		     * @returns {Array} Returns the function names.
		     */
		    function baseFunctions(object, props) {
		      return arrayFilter(props, function(key) {
		        return isFunction(object[key]);
		      });
		    }

		    /**
		     * The base implementation of `_.get` without support for default values.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to get.
		     * @returns {*} Returns the resolved value.
		     */
		    function baseGet(object, path) {
		      path = castPath(path, object);

		      var index = 0,
		          length = path.length;

		      while (object != null && index < length) {
		        object = object[toKey(path[index++])];
		      }
		      return (index && index == length) ? object : undefined$1;
		    }

		    /**
		     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
		     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
		     * symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @param {Function} symbolsFunc The function to get the symbols of `object`.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
		      var result = keysFunc(object);
		      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
		    }

		    /**
		     * The base implementation of `getTag` without fallbacks for buggy environments.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the `toStringTag`.
		     */
		    function baseGetTag(value) {
		      if (value == null) {
		        return value === undefined$1 ? undefinedTag : nullTag;
		      }
		      return (symToStringTag && symToStringTag in Object(value))
		        ? getRawTag(value)
		        : objectToString(value);
		    }

		    /**
		     * The base implementation of `_.gt` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than `other`,
		     *  else `false`.
		     */
		    function baseGt(value, other) {
		      return value > other;
		    }

		    /**
		     * The base implementation of `_.has` without support for deep paths.
		     *
		     * @private
		     * @param {Object} [object] The object to query.
		     * @param {Array|string} key The key to check.
		     * @returns {boolean} Returns `true` if `key` exists, else `false`.
		     */
		    function baseHas(object, key) {
		      return object != null && hasOwnProperty.call(object, key);
		    }

		    /**
		     * The base implementation of `_.hasIn` without support for deep paths.
		     *
		     * @private
		     * @param {Object} [object] The object to query.
		     * @param {Array|string} key The key to check.
		     * @returns {boolean} Returns `true` if `key` exists, else `false`.
		     */
		    function baseHasIn(object, key) {
		      return object != null && key in Object(object);
		    }

		    /**
		     * The base implementation of `_.inRange` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {number} number The number to check.
		     * @param {number} start The start of the range.
		     * @param {number} end The end of the range.
		     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
		     */
		    function baseInRange(number, start, end) {
		      return number >= nativeMin(start, end) && number < nativeMax(start, end);
		    }

		    /**
		     * The base implementation of methods like `_.intersection`, without support
		     * for iteratee shorthands, that accepts an array of arrays to inspect.
		     *
		     * @private
		     * @param {Array} arrays The arrays to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of shared values.
		     */
		    function baseIntersection(arrays, iteratee, comparator) {
		      var includes = comparator ? arrayIncludesWith : arrayIncludes,
		          length = arrays[0].length,
		          othLength = arrays.length,
		          othIndex = othLength,
		          caches = Array(othLength),
		          maxLength = Infinity,
		          result = [];

		      while (othIndex--) {
		        var array = arrays[othIndex];
		        if (othIndex && iteratee) {
		          array = arrayMap(array, baseUnary(iteratee));
		        }
		        maxLength = nativeMin(array.length, maxLength);
		        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
		          ? new SetCache(othIndex && array)
		          : undefined$1;
		      }
		      array = arrays[0];

		      var index = -1,
		          seen = caches[0];

		      outer:
		      while (++index < length && result.length < maxLength) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        value = (comparator || value !== 0) ? value : 0;
		        if (!(seen
		              ? cacheHas(seen, computed)
		              : includes(result, computed, comparator)
		            )) {
		          othIndex = othLength;
		          while (--othIndex) {
		            var cache = caches[othIndex];
		            if (!(cache
		                  ? cacheHas(cache, computed)
		                  : includes(arrays[othIndex], computed, comparator))
		                ) {
		              continue outer;
		            }
		          }
		          if (seen) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.invert` and `_.invertBy` which inverts
		     * `object` with values transformed by `iteratee` and set by `setter`.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} setter The function to set `accumulator` values.
		     * @param {Function} iteratee The iteratee to transform values.
		     * @param {Object} accumulator The initial inverted object.
		     * @returns {Function} Returns `accumulator`.
		     */
		    function baseInverter(object, setter, iteratee, accumulator) {
		      baseForOwn(object, function(value, key, object) {
		        setter(accumulator, iteratee(value), key, object);
		      });
		      return accumulator;
		    }

		    /**
		     * The base implementation of `_.invoke` without support for individual
		     * method arguments.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {Array} args The arguments to invoke the method with.
		     * @returns {*} Returns the result of the invoked method.
		     */
		    function baseInvoke(object, path, args) {
		      path = castPath(path, object);
		      object = parent(object, path);
		      var func = object == null ? object : object[toKey(last(path))];
		      return func == null ? undefined$1 : apply(func, object, args);
		    }

		    /**
		     * The base implementation of `_.isArguments`.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		     */
		    function baseIsArguments(value) {
		      return isObjectLike(value) && baseGetTag(value) == argsTag;
		    }

		    /**
		     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
		     */
		    function baseIsArrayBuffer(value) {
		      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
		    }

		    /**
		     * The base implementation of `_.isDate` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
		     */
		    function baseIsDate(value) {
		      return isObjectLike(value) && baseGetTag(value) == dateTag;
		    }

		    /**
		     * The base implementation of `_.isEqual` which supports partial comparisons
		     * and tracks traversed objects.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @param {boolean} bitmask The bitmask flags.
		     *  1 - Unordered comparison
		     *  2 - Partial comparison
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     */
		    function baseIsEqual(value, other, bitmask, customizer, stack) {
		      if (value === other) {
		        return true;
		      }
		      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
		        return value !== value && other !== other;
		      }
		      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
		    }

		    /**
		     * A specialized version of `baseIsEqual` for arrays and objects which performs
		     * deep comparisons and tracks traversed objects enabling objects with circular
		     * references to be compared.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
		      var objIsArr = isArray(object),
		          othIsArr = isArray(other),
		          objTag = objIsArr ? arrayTag : getTag(object),
		          othTag = othIsArr ? arrayTag : getTag(other);

		      objTag = objTag == argsTag ? objectTag : objTag;
		      othTag = othTag == argsTag ? objectTag : othTag;

		      var objIsObj = objTag == objectTag,
		          othIsObj = othTag == objectTag,
		          isSameTag = objTag == othTag;

		      if (isSameTag && isBuffer(object)) {
		        if (!isBuffer(other)) {
		          return false;
		        }
		        objIsArr = true;
		        objIsObj = false;
		      }
		      if (isSameTag && !objIsObj) {
		        stack || (stack = new Stack);
		        return (objIsArr || isTypedArray(object))
		          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
		          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
		      }
		      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
		        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
		            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

		        if (objIsWrapped || othIsWrapped) {
		          var objUnwrapped = objIsWrapped ? object.value() : object,
		              othUnwrapped = othIsWrapped ? other.value() : other;

		          stack || (stack = new Stack);
		          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
		        }
		      }
		      if (!isSameTag) {
		        return false;
		      }
		      stack || (stack = new Stack);
		      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
		    }

		    /**
		     * The base implementation of `_.isMap` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		     */
		    function baseIsMap(value) {
		      return isObjectLike(value) && getTag(value) == mapTag;
		    }

		    /**
		     * The base implementation of `_.isMatch` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @param {Array} matchData The property names, values, and compare flags to match.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     */
		    function baseIsMatch(object, source, matchData, customizer) {
		      var index = matchData.length,
		          length = index,
		          noCustomizer = !customizer;

		      if (object == null) {
		        return !length;
		      }
		      object = Object(object);
		      while (index--) {
		        var data = matchData[index];
		        if ((noCustomizer && data[2])
		              ? data[1] !== object[data[0]]
		              : !(data[0] in object)
		            ) {
		          return false;
		        }
		      }
		      while (++index < length) {
		        data = matchData[index];
		        var key = data[0],
		            objValue = object[key],
		            srcValue = data[1];

		        if (noCustomizer && data[2]) {
		          if (objValue === undefined$1 && !(key in object)) {
		            return false;
		          }
		        } else {
		          var stack = new Stack;
		          if (customizer) {
		            var result = customizer(objValue, srcValue, key, object, source, stack);
		          }
		          if (!(result === undefined$1
		                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
		                : result
		              )) {
		            return false;
		          }
		        }
		      }
		      return true;
		    }

		    /**
		     * The base implementation of `_.isNative` without bad shim checks.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a native function,
		     *  else `false`.
		     */
		    function baseIsNative(value) {
		      if (!isObject(value) || isMasked(value)) {
		        return false;
		      }
		      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
		      return pattern.test(toSource(value));
		    }

		    /**
		     * The base implementation of `_.isRegExp` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
		     */
		    function baseIsRegExp(value) {
		      return isObjectLike(value) && baseGetTag(value) == regexpTag;
		    }

		    /**
		     * The base implementation of `_.isSet` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		     */
		    function baseIsSet(value) {
		      return isObjectLike(value) && getTag(value) == setTag;
		    }

		    /**
		     * The base implementation of `_.isTypedArray` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		     */
		    function baseIsTypedArray(value) {
		      return isObjectLike(value) &&
		        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
		    }

		    /**
		     * The base implementation of `_.iteratee`.
		     *
		     * @private
		     * @param {*} [value=_.identity] The value to convert to an iteratee.
		     * @returns {Function} Returns the iteratee.
		     */
		    function baseIteratee(value) {
		      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
		      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
		      if (typeof value == 'function') {
		        return value;
		      }
		      if (value == null) {
		        return identity;
		      }
		      if (typeof value == 'object') {
		        return isArray(value)
		          ? baseMatchesProperty(value[0], value[1])
		          : baseMatches(value);
		      }
		      return property(value);
		    }

		    /**
		     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function baseKeys(object) {
		      if (!isPrototype(object)) {
		        return nativeKeys(object);
		      }
		      var result = [];
		      for (var key in Object(object)) {
		        if (hasOwnProperty.call(object, key) && key != 'constructor') {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function baseKeysIn(object) {
		      if (!isObject(object)) {
		        return nativeKeysIn(object);
		      }
		      var isProto = isPrototype(object),
		          result = [];

		      for (var key in object) {
		        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.lt` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than `other`,
		     *  else `false`.
		     */
		    function baseLt(value, other) {
		      return value < other;
		    }

		    /**
		     * The base implementation of `_.map` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array} Returns the new mapped array.
		     */
		    function baseMap(collection, iteratee) {
		      var index = -1,
		          result = isArrayLike(collection) ? Array(collection.length) : [];

		      baseEach(collection, function(value, key, collection) {
		        result[++index] = iteratee(value, key, collection);
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.matches` which doesn't clone `source`.
		     *
		     * @private
		     * @param {Object} source The object of property values to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseMatches(source) {
		      var matchData = getMatchData(source);
		      if (matchData.length == 1 && matchData[0][2]) {
		        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
		      }
		      return function(object) {
		        return object === source || baseIsMatch(object, source, matchData);
		      };
		    }

		    /**
		     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
		     *
		     * @private
		     * @param {string} path The path of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseMatchesProperty(path, srcValue) {
		      if (isKey(path) && isStrictComparable(srcValue)) {
		        return matchesStrictComparable(toKey(path), srcValue);
		      }
		      return function(object) {
		        var objValue = get(object, path);
		        return (objValue === undefined$1 && objValue === srcValue)
		          ? hasIn(object, path)
		          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
		      };
		    }

		    /**
		     * The base implementation of `_.merge` without support for multiple sources.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @param {number} srcIndex The index of `source`.
		     * @param {Function} [customizer] The function to customize merged values.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     */
		    function baseMerge(object, source, srcIndex, customizer, stack) {
		      if (object === source) {
		        return;
		      }
		      baseFor(source, function(srcValue, key) {
		        stack || (stack = new Stack);
		        if (isObject(srcValue)) {
		          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
		        }
		        else {
		          var newValue = customizer
		            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
		            : undefined$1;

		          if (newValue === undefined$1) {
		            newValue = srcValue;
		          }
		          assignMergeValue(object, key, newValue);
		        }
		      }, keysIn);
		    }

		    /**
		     * A specialized version of `baseMerge` for arrays and objects which performs
		     * deep merges and tracks traversed objects enabling objects with circular
		     * references to be merged.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @param {string} key The key of the value to merge.
		     * @param {number} srcIndex The index of `source`.
		     * @param {Function} mergeFunc The function to merge values.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     */
		    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
		      var objValue = safeGet(object, key),
		          srcValue = safeGet(source, key),
		          stacked = stack.get(srcValue);

		      if (stacked) {
		        assignMergeValue(object, key, stacked);
		        return;
		      }
		      var newValue = customizer
		        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
		        : undefined$1;

		      var isCommon = newValue === undefined$1;

		      if (isCommon) {
		        var isArr = isArray(srcValue),
		            isBuff = !isArr && isBuffer(srcValue),
		            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

		        newValue = srcValue;
		        if (isArr || isBuff || isTyped) {
		          if (isArray(objValue)) {
		            newValue = objValue;
		          }
		          else if (isArrayLikeObject(objValue)) {
		            newValue = copyArray(objValue);
		          }
		          else if (isBuff) {
		            isCommon = false;
		            newValue = cloneBuffer(srcValue, true);
		          }
		          else if (isTyped) {
		            isCommon = false;
		            newValue = cloneTypedArray(srcValue, true);
		          }
		          else {
		            newValue = [];
		          }
		        }
		        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
		          newValue = objValue;
		          if (isArguments(objValue)) {
		            newValue = toPlainObject(objValue);
		          }
		          else if (!isObject(objValue) || isFunction(objValue)) {
		            newValue = initCloneObject(srcValue);
		          }
		        }
		        else {
		          isCommon = false;
		        }
		      }
		      if (isCommon) {
		        // Recursively merge objects and arrays (susceptible to call stack limits).
		        stack.set(srcValue, newValue);
		        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
		        stack['delete'](srcValue);
		      }
		      assignMergeValue(object, key, newValue);
		    }

		    /**
		     * The base implementation of `_.nth` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {Array} array The array to query.
		     * @param {number} n The index of the element to return.
		     * @returns {*} Returns the nth element of `array`.
		     */
		    function baseNth(array, n) {
		      var length = array.length;
		      if (!length) {
		        return;
		      }
		      n += n < 0 ? length : 0;
		      return isIndex(n, length) ? array[n] : undefined$1;
		    }

		    /**
		     * The base implementation of `_.orderBy` without param guards.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
		     * @param {string[]} orders The sort orders of `iteratees`.
		     * @returns {Array} Returns the new sorted array.
		     */
		    function baseOrderBy(collection, iteratees, orders) {
		      if (iteratees.length) {
		        iteratees = arrayMap(iteratees, function(iteratee) {
		          if (isArray(iteratee)) {
		            return function(value) {
		              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
		            }
		          }
		          return iteratee;
		        });
		      } else {
		        iteratees = [identity];
		      }

		      var index = -1;
		      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

		      var result = baseMap(collection, function(value, key, collection) {
		        var criteria = arrayMap(iteratees, function(iteratee) {
		          return iteratee(value);
		        });
		        return { 'criteria': criteria, 'index': ++index, 'value': value };
		      });

		      return baseSortBy(result, function(object, other) {
		        return compareMultiple(object, other, orders);
		      });
		    }

		    /**
		     * The base implementation of `_.pick` without support for individual
		     * property identifiers.
		     *
		     * @private
		     * @param {Object} object The source object.
		     * @param {string[]} paths The property paths to pick.
		     * @returns {Object} Returns the new object.
		     */
		    function basePick(object, paths) {
		      return basePickBy(object, paths, function(value, path) {
		        return hasIn(object, path);
		      });
		    }

		    /**
		     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The source object.
		     * @param {string[]} paths The property paths to pick.
		     * @param {Function} predicate The function invoked per property.
		     * @returns {Object} Returns the new object.
		     */
		    function basePickBy(object, paths, predicate) {
		      var index = -1,
		          length = paths.length,
		          result = {};

		      while (++index < length) {
		        var path = paths[index],
		            value = baseGet(object, path);

		        if (predicate(value, path)) {
		          baseSet(result, castPath(path, object), value);
		        }
		      }
		      return result;
		    }

		    /**
		     * A specialized version of `baseProperty` which supports deep paths.
		     *
		     * @private
		     * @param {Array|string} path The path of the property to get.
		     * @returns {Function} Returns the new accessor function.
		     */
		    function basePropertyDeep(path) {
		      return function(object) {
		        return baseGet(object, path);
		      };
		    }

		    /**
		     * The base implementation of `_.pullAllBy` without support for iteratee
		     * shorthands.
		     *
		     * @private
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns `array`.
		     */
		    function basePullAll(array, values, iteratee, comparator) {
		      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
		          index = -1,
		          length = values.length,
		          seen = array;

		      if (array === values) {
		        values = copyArray(values);
		      }
		      if (iteratee) {
		        seen = arrayMap(array, baseUnary(iteratee));
		      }
		      while (++index < length) {
		        var fromIndex = 0,
		            value = values[index],
		            computed = iteratee ? iteratee(value) : value;

		        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
		          if (seen !== array) {
		            splice.call(seen, fromIndex, 1);
		          }
		          splice.call(array, fromIndex, 1);
		        }
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.pullAt` without support for individual
		     * indexes or capturing the removed elements.
		     *
		     * @private
		     * @param {Array} array The array to modify.
		     * @param {number[]} indexes The indexes of elements to remove.
		     * @returns {Array} Returns `array`.
		     */
		    function basePullAt(array, indexes) {
		      var length = array ? indexes.length : 0,
		          lastIndex = length - 1;

		      while (length--) {
		        var index = indexes[length];
		        if (length == lastIndex || index !== previous) {
		          var previous = index;
		          if (isIndex(index)) {
		            splice.call(array, index, 1);
		          } else {
		            baseUnset(array, index);
		          }
		        }
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.random` without support for returning
		     * floating-point numbers.
		     *
		     * @private
		     * @param {number} lower The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the random number.
		     */
		    function baseRandom(lower, upper) {
		      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
		    }

		    /**
		     * The base implementation of `_.range` and `_.rangeRight` which doesn't
		     * coerce arguments.
		     *
		     * @private
		     * @param {number} start The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} step The value to increment or decrement by.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Array} Returns the range of numbers.
		     */
		    function baseRange(start, end, step, fromRight) {
		      var index = -1,
		          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
		          result = Array(length);

		      while (length--) {
		        result[fromRight ? length : ++index] = start;
		        start += step;
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.repeat` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {string} string The string to repeat.
		     * @param {number} n The number of times to repeat the string.
		     * @returns {string} Returns the repeated string.
		     */
		    function baseRepeat(string, n) {
		      var result = '';
		      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
		        return result;
		      }
		      // Leverage the exponentiation by squaring algorithm for a faster repeat.
		      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
		      do {
		        if (n % 2) {
		          result += string;
		        }
		        n = nativeFloor(n / 2);
		        if (n) {
		          string += string;
		        }
		      } while (n);

		      return result;
		    }

		    /**
		     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @returns {Function} Returns the new function.
		     */
		    function baseRest(func, start) {
		      return setToString(overRest(func, start, identity), func + '');
		    }

		    /**
		     * The base implementation of `_.sample`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to sample.
		     * @returns {*} Returns the random element.
		     */
		    function baseSample(collection) {
		      return arraySample(values(collection));
		    }

		    /**
		     * The base implementation of `_.sampleSize` without param guards.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to sample.
		     * @param {number} n The number of elements to sample.
		     * @returns {Array} Returns the random elements.
		     */
		    function baseSampleSize(collection, n) {
		      var array = values(collection);
		      return shuffleSelf(array, baseClamp(n, 0, array.length));
		    }

		    /**
		     * The base implementation of `_.set`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @param {Function} [customizer] The function to customize path creation.
		     * @returns {Object} Returns `object`.
		     */
		    function baseSet(object, path, value, customizer) {
		      if (!isObject(object)) {
		        return object;
		      }
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length,
		          lastIndex = length - 1,
		          nested = object;

		      while (nested != null && ++index < length) {
		        var key = toKey(path[index]),
		            newValue = value;

		        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
		          return object;
		        }

		        if (index != lastIndex) {
		          var objValue = nested[key];
		          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
		          if (newValue === undefined$1) {
		            newValue = isObject(objValue)
		              ? objValue
		              : (isIndex(path[index + 1]) ? [] : {});
		          }
		        }
		        assignValue(nested, key, newValue);
		        nested = nested[key];
		      }
		      return object;
		    }

		    /**
		     * The base implementation of `setData` without support for hot loop shorting.
		     *
		     * @private
		     * @param {Function} func The function to associate metadata with.
		     * @param {*} data The metadata.
		     * @returns {Function} Returns `func`.
		     */
		    var baseSetData = !metaMap ? identity : function(func, data) {
		      metaMap.set(func, data);
		      return func;
		    };

		    /**
		     * The base implementation of `setToString` without support for hot loop shorting.
		     *
		     * @private
		     * @param {Function} func The function to modify.
		     * @param {Function} string The `toString` result.
		     * @returns {Function} Returns `func`.
		     */
		    var baseSetToString = !defineProperty ? identity : function(func, string) {
		      return defineProperty(func, 'toString', {
		        'configurable': true,
		        'enumerable': false,
		        'value': constant(string),
		        'writable': true
		      });
		    };

		    /**
		     * The base implementation of `_.shuffle`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     */
		    function baseShuffle(collection) {
		      return shuffleSelf(values(collection));
		    }

		    /**
		     * The base implementation of `_.slice` without an iteratee call guard.
		     *
		     * @private
		     * @param {Array} array The array to slice.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function baseSlice(array, start, end) {
		      var index = -1,
		          length = array.length;

		      if (start < 0) {
		        start = -start > length ? 0 : (length + start);
		      }
		      end = end > length ? length : end;
		      if (end < 0) {
		        end += length;
		      }
		      length = start > end ? 0 : ((end - start) >>> 0);
		      start >>>= 0;

		      var result = Array(length);
		      while (++index < length) {
		        result[index] = array[index + start];
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.some` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {boolean} Returns `true` if any element passes the predicate check,
		     *  else `false`.
		     */
		    function baseSome(collection, predicate) {
		      var result;

		      baseEach(collection, function(value, index, collection) {
		        result = predicate(value, index, collection);
		        return !result;
		      });
		      return !!result;
		    }

		    /**
		     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
		     * performs a binary search of `array` to determine the index at which `value`
		     * should be inserted into `array` in order to maintain its sort order.
		     *
		     * @private
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {boolean} [retHighest] Specify returning the highest qualified index.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     */
		    function baseSortedIndex(array, value, retHighest) {
		      var low = 0,
		          high = array == null ? low : array.length;

		      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
		        while (low < high) {
		          var mid = (low + high) >>> 1,
		              computed = array[mid];

		          if (computed !== null && !isSymbol(computed) &&
		              (retHighest ? (computed <= value) : (computed < value))) {
		            low = mid + 1;
		          } else {
		            high = mid;
		          }
		        }
		        return high;
		      }
		      return baseSortedIndexBy(array, value, identity, retHighest);
		    }

		    /**
		     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
		     * which invokes `iteratee` for `value` and each element of `array` to compute
		     * their sort ranking. The iteratee is invoked with one argument; (value).
		     *
		     * @private
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} iteratee The iteratee invoked per element.
		     * @param {boolean} [retHighest] Specify returning the highest qualified index.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     */
		    function baseSortedIndexBy(array, value, iteratee, retHighest) {
		      var low = 0,
		          high = array == null ? 0 : array.length;
		      if (high === 0) {
		        return 0;
		      }

		      value = iteratee(value);
		      var valIsNaN = value !== value,
		          valIsNull = value === null,
		          valIsSymbol = isSymbol(value),
		          valIsUndefined = value === undefined$1;

		      while (low < high) {
		        var mid = nativeFloor((low + high) / 2),
		            computed = iteratee(array[mid]),
		            othIsDefined = computed !== undefined$1,
		            othIsNull = computed === null,
		            othIsReflexive = computed === computed,
		            othIsSymbol = isSymbol(computed);

		        if (valIsNaN) {
		          var setLow = retHighest || othIsReflexive;
		        } else if (valIsUndefined) {
		          setLow = othIsReflexive && (retHighest || othIsDefined);
		        } else if (valIsNull) {
		          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
		        } else if (valIsSymbol) {
		          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
		        } else if (othIsNull || othIsSymbol) {
		          setLow = false;
		        } else {
		          setLow = retHighest ? (computed <= value) : (computed < value);
		        }
		        if (setLow) {
		          low = mid + 1;
		        } else {
		          high = mid;
		        }
		      }
		      return nativeMin(high, MAX_ARRAY_INDEX);
		    }

		    /**
		     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
		     * support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     */
		    function baseSortedUniq(array, iteratee) {
		      var index = -1,
		          length = array.length,
		          resIndex = 0,
		          result = [];

		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        if (!index || !eq(computed, seen)) {
		          var seen = computed;
		          result[resIndex++] = value === 0 ? 0 : value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.toNumber` which doesn't ensure correct
		     * conversions of binary, hexadecimal, or octal string values.
		     *
		     * @private
		     * @param {*} value The value to process.
		     * @returns {number} Returns the number.
		     */
		    function baseToNumber(value) {
		      if (typeof value == 'number') {
		        return value;
		      }
		      if (isSymbol(value)) {
		        return NAN;
		      }
		      return +value;
		    }

		    /**
		     * The base implementation of `_.toString` which doesn't convert nullish
		     * values to empty strings.
		     *
		     * @private
		     * @param {*} value The value to process.
		     * @returns {string} Returns the string.
		     */
		    function baseToString(value) {
		      // Exit early for strings to avoid a performance hit in some environments.
		      if (typeof value == 'string') {
		        return value;
		      }
		      if (isArray(value)) {
		        // Recursively convert values (susceptible to call stack limits).
		        return arrayMap(value, baseToString) + '';
		      }
		      if (isSymbol(value)) {
		        return symbolToString ? symbolToString.call(value) : '';
		      }
		      var result = (value + '');
		      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		    }

		    /**
		     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     */
		    function baseUniq(array, iteratee, comparator) {
		      var index = -1,
		          includes = arrayIncludes,
		          length = array.length,
		          isCommon = true,
		          result = [],
		          seen = result;

		      if (comparator) {
		        isCommon = false;
		        includes = arrayIncludesWith;
		      }
		      else if (length >= LARGE_ARRAY_SIZE) {
		        var set = iteratee ? null : createSet(array);
		        if (set) {
		          return setToArray(set);
		        }
		        isCommon = false;
		        includes = cacheHas;
		        seen = new SetCache;
		      }
		      else {
		        seen = iteratee ? [] : result;
		      }
		      outer:
		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        value = (comparator || value !== 0) ? value : 0;
		        if (isCommon && computed === computed) {
		          var seenIndex = seen.length;
		          while (seenIndex--) {
		            if (seen[seenIndex] === computed) {
		              continue outer;
		            }
		          }
		          if (iteratee) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		        else if (!includes(seen, computed, comparator)) {
		          if (seen !== result) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.unset`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The property path to unset.
		     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
		     */
		    function baseUnset(object, path) {
		      path = castPath(path, object);
		      object = parent(object, path);
		      return object == null || delete object[toKey(last(path))];
		    }

		    /**
		     * The base implementation of `_.update`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to update.
		     * @param {Function} updater The function to produce the updated value.
		     * @param {Function} [customizer] The function to customize path creation.
		     * @returns {Object} Returns `object`.
		     */
		    function baseUpdate(object, path, updater, customizer) {
		      return baseSet(object, path, updater(baseGet(object, path)), customizer);
		    }

		    /**
		     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
		     * without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to query.
		     * @param {Function} predicate The function invoked per iteration.
		     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function baseWhile(array, predicate, isDrop, fromRight) {
		      var length = array.length,
		          index = fromRight ? length : -1;

		      while ((fromRight ? index-- : ++index < length) &&
		        predicate(array[index], index, array)) {}

		      return isDrop
		        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
		        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
		    }

		    /**
		     * The base implementation of `wrapperValue` which returns the result of
		     * performing a sequence of actions on the unwrapped `value`, where each
		     * successive action is supplied the return value of the previous.
		     *
		     * @private
		     * @param {*} value The unwrapped value.
		     * @param {Array} actions Actions to perform to resolve the unwrapped value.
		     * @returns {*} Returns the resolved value.
		     */
		    function baseWrapperValue(value, actions) {
		      var result = value;
		      if (result instanceof LazyWrapper) {
		        result = result.value();
		      }
		      return arrayReduce(actions, function(result, action) {
		        return action.func.apply(action.thisArg, arrayPush([result], action.args));
		      }, result);
		    }

		    /**
		     * The base implementation of methods like `_.xor`, without support for
		     * iteratee shorthands, that accepts an array of arrays to inspect.
		     *
		     * @private
		     * @param {Array} arrays The arrays to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of values.
		     */
		    function baseXor(arrays, iteratee, comparator) {
		      var length = arrays.length;
		      if (length < 2) {
		        return length ? baseUniq(arrays[0]) : [];
		      }
		      var index = -1,
		          result = Array(length);

		      while (++index < length) {
		        var array = arrays[index],
		            othIndex = -1;

		        while (++othIndex < length) {
		          if (othIndex != index) {
		            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
		          }
		        }
		      }
		      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
		    }

		    /**
		     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
		     *
		     * @private
		     * @param {Array} props The property identifiers.
		     * @param {Array} values The property values.
		     * @param {Function} assignFunc The function to assign values.
		     * @returns {Object} Returns the new object.
		     */
		    function baseZipObject(props, values, assignFunc) {
		      var index = -1,
		          length = props.length,
		          valsLength = values.length,
		          result = {};

		      while (++index < length) {
		        var value = index < valsLength ? values[index] : undefined$1;
		        assignFunc(result, props[index], value);
		      }
		      return result;
		    }

		    /**
		     * Casts `value` to an empty array if it's not an array like object.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {Array|Object} Returns the cast array-like object.
		     */
		    function castArrayLikeObject(value) {
		      return isArrayLikeObject(value) ? value : [];
		    }

		    /**
		     * Casts `value` to `identity` if it's not a function.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {Function} Returns cast function.
		     */
		    function castFunction(value) {
		      return typeof value == 'function' ? value : identity;
		    }

		    /**
		     * Casts `value` to a path array if it's not one.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @param {Object} [object] The object to query keys on.
		     * @returns {Array} Returns the cast property path array.
		     */
		    function castPath(value, object) {
		      if (isArray(value)) {
		        return value;
		      }
		      return isKey(value, object) ? [value] : stringToPath(toString(value));
		    }

		    /**
		     * A `baseRest` alias which can be replaced with `identity` by module
		     * replacement plugins.
		     *
		     * @private
		     * @type {Function}
		     * @param {Function} func The function to apply a rest parameter to.
		     * @returns {Function} Returns the new function.
		     */
		    var castRest = baseRest;

		    /**
		     * Casts `array` to a slice if it's needed.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {number} start The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the cast slice.
		     */
		    function castSlice(array, start, end) {
		      var length = array.length;
		      end = end === undefined$1 ? length : end;
		      return (!start && end >= length) ? array : baseSlice(array, start, end);
		    }

		    /**
		     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
		     *
		     * @private
		     * @param {number|Object} id The timer id or timeout object of the timer to clear.
		     */
		    var clearTimeout = ctxClearTimeout || function(id) {
		      return root.clearTimeout(id);
		    };

		    /**
		     * Creates a clone of  `buffer`.
		     *
		     * @private
		     * @param {Buffer} buffer The buffer to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Buffer} Returns the cloned buffer.
		     */
		    function cloneBuffer(buffer, isDeep) {
		      if (isDeep) {
		        return buffer.slice();
		      }
		      var length = buffer.length,
		          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

		      buffer.copy(result);
		      return result;
		    }

		    /**
		     * Creates a clone of `arrayBuffer`.
		     *
		     * @private
		     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
		     * @returns {ArrayBuffer} Returns the cloned array buffer.
		     */
		    function cloneArrayBuffer(arrayBuffer) {
		      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
		      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
		      return result;
		    }

		    /**
		     * Creates a clone of `dataView`.
		     *
		     * @private
		     * @param {Object} dataView The data view to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the cloned data view.
		     */
		    function cloneDataView(dataView, isDeep) {
		      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
		      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
		    }

		    /**
		     * Creates a clone of `regexp`.
		     *
		     * @private
		     * @param {Object} regexp The regexp to clone.
		     * @returns {Object} Returns the cloned regexp.
		     */
		    function cloneRegExp(regexp) {
		      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
		      result.lastIndex = regexp.lastIndex;
		      return result;
		    }

		    /**
		     * Creates a clone of the `symbol` object.
		     *
		     * @private
		     * @param {Object} symbol The symbol object to clone.
		     * @returns {Object} Returns the cloned symbol object.
		     */
		    function cloneSymbol(symbol) {
		      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
		    }

		    /**
		     * Creates a clone of `typedArray`.
		     *
		     * @private
		     * @param {Object} typedArray The typed array to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the cloned typed array.
		     */
		    function cloneTypedArray(typedArray, isDeep) {
		      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
		      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
		    }

		    /**
		     * Compares values to sort them in ascending order.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {number} Returns the sort order indicator for `value`.
		     */
		    function compareAscending(value, other) {
		      if (value !== other) {
		        var valIsDefined = value !== undefined$1,
		            valIsNull = value === null,
		            valIsReflexive = value === value,
		            valIsSymbol = isSymbol(value);

		        var othIsDefined = other !== undefined$1,
		            othIsNull = other === null,
		            othIsReflexive = other === other,
		            othIsSymbol = isSymbol(other);

		        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
		            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
		            (valIsNull && othIsDefined && othIsReflexive) ||
		            (!valIsDefined && othIsReflexive) ||
		            !valIsReflexive) {
		          return 1;
		        }
		        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
		            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
		            (othIsNull && valIsDefined && valIsReflexive) ||
		            (!othIsDefined && valIsReflexive) ||
		            !othIsReflexive) {
		          return -1;
		        }
		      }
		      return 0;
		    }

		    /**
		     * Used by `_.orderBy` to compare multiple properties of a value to another
		     * and stable sort them.
		     *
		     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
		     * specify an order of "desc" for descending or "asc" for ascending sort order
		     * of corresponding values.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {boolean[]|string[]} orders The order to sort by for each property.
		     * @returns {number} Returns the sort order indicator for `object`.
		     */
		    function compareMultiple(object, other, orders) {
		      var index = -1,
		          objCriteria = object.criteria,
		          othCriteria = other.criteria,
		          length = objCriteria.length,
		          ordersLength = orders.length;

		      while (++index < length) {
		        var result = compareAscending(objCriteria[index], othCriteria[index]);
		        if (result) {
		          if (index >= ordersLength) {
		            return result;
		          }
		          var order = orders[index];
		          return result * (order == 'desc' ? -1 : 1);
		        }
		      }
		      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
		      // that causes it, under certain circumstances, to provide the same value for
		      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
		      // for more details.
		      //
		      // This also ensures a stable sort in V8 and other engines.
		      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
		      return object.index - other.index;
		    }

		    /**
		     * Creates an array that is the composition of partially applied arguments,
		     * placeholders, and provided arguments into a single array of arguments.
		     *
		     * @private
		     * @param {Array} args The provided arguments.
		     * @param {Array} partials The arguments to prepend to those provided.
		     * @param {Array} holders The `partials` placeholder indexes.
		     * @params {boolean} [isCurried] Specify composing for a curried function.
		     * @returns {Array} Returns the new array of composed arguments.
		     */
		    function composeArgs(args, partials, holders, isCurried) {
		      var argsIndex = -1,
		          argsLength = args.length,
		          holdersLength = holders.length,
		          leftIndex = -1,
		          leftLength = partials.length,
		          rangeLength = nativeMax(argsLength - holdersLength, 0),
		          result = Array(leftLength + rangeLength),
		          isUncurried = !isCurried;

		      while (++leftIndex < leftLength) {
		        result[leftIndex] = partials[leftIndex];
		      }
		      while (++argsIndex < holdersLength) {
		        if (isUncurried || argsIndex < argsLength) {
		          result[holders[argsIndex]] = args[argsIndex];
		        }
		      }
		      while (rangeLength--) {
		        result[leftIndex++] = args[argsIndex++];
		      }
		      return result;
		    }

		    /**
		     * This function is like `composeArgs` except that the arguments composition
		     * is tailored for `_.partialRight`.
		     *
		     * @private
		     * @param {Array} args The provided arguments.
		     * @param {Array} partials The arguments to append to those provided.
		     * @param {Array} holders The `partials` placeholder indexes.
		     * @params {boolean} [isCurried] Specify composing for a curried function.
		     * @returns {Array} Returns the new array of composed arguments.
		     */
		    function composeArgsRight(args, partials, holders, isCurried) {
		      var argsIndex = -1,
		          argsLength = args.length,
		          holdersIndex = -1,
		          holdersLength = holders.length,
		          rightIndex = -1,
		          rightLength = partials.length,
		          rangeLength = nativeMax(argsLength - holdersLength, 0),
		          result = Array(rangeLength + rightLength),
		          isUncurried = !isCurried;

		      while (++argsIndex < rangeLength) {
		        result[argsIndex] = args[argsIndex];
		      }
		      var offset = argsIndex;
		      while (++rightIndex < rightLength) {
		        result[offset + rightIndex] = partials[rightIndex];
		      }
		      while (++holdersIndex < holdersLength) {
		        if (isUncurried || argsIndex < argsLength) {
		          result[offset + holders[holdersIndex]] = args[argsIndex++];
		        }
		      }
		      return result;
		    }

		    /**
		     * Copies the values of `source` to `array`.
		     *
		     * @private
		     * @param {Array} source The array to copy values from.
		     * @param {Array} [array=[]] The array to copy values to.
		     * @returns {Array} Returns `array`.
		     */
		    function copyArray(source, array) {
		      var index = -1,
		          length = source.length;

		      array || (array = Array(length));
		      while (++index < length) {
		        array[index] = source[index];
		      }
		      return array;
		    }

		    /**
		     * Copies properties of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy properties from.
		     * @param {Array} props The property identifiers to copy.
		     * @param {Object} [object={}] The object to copy properties to.
		     * @param {Function} [customizer] The function to customize copied values.
		     * @returns {Object} Returns `object`.
		     */
		    function copyObject(source, props, object, customizer) {
		      var isNew = !object;
		      object || (object = {});

		      var index = -1,
		          length = props.length;

		      while (++index < length) {
		        var key = props[index];

		        var newValue = customizer
		          ? customizer(object[key], source[key], key, object, source)
		          : undefined$1;

		        if (newValue === undefined$1) {
		          newValue = source[key];
		        }
		        if (isNew) {
		          baseAssignValue(object, key, newValue);
		        } else {
		          assignValue(object, key, newValue);
		        }
		      }
		      return object;
		    }

		    /**
		     * Copies own symbols of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy symbols from.
		     * @param {Object} [object={}] The object to copy symbols to.
		     * @returns {Object} Returns `object`.
		     */
		    function copySymbols(source, object) {
		      return copyObject(source, getSymbols(source), object);
		    }

		    /**
		     * Copies own and inherited symbols of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy symbols from.
		     * @param {Object} [object={}] The object to copy symbols to.
		     * @returns {Object} Returns `object`.
		     */
		    function copySymbolsIn(source, object) {
		      return copyObject(source, getSymbolsIn(source), object);
		    }

		    /**
		     * Creates a function like `_.groupBy`.
		     *
		     * @private
		     * @param {Function} setter The function to set accumulator values.
		     * @param {Function} [initializer] The accumulator object initializer.
		     * @returns {Function} Returns the new aggregator function.
		     */
		    function createAggregator(setter, initializer) {
		      return function(collection, iteratee) {
		        var func = isArray(collection) ? arrayAggregator : baseAggregator,
		            accumulator = initializer ? initializer() : {};

		        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
		      };
		    }

		    /**
		     * Creates a function like `_.assign`.
		     *
		     * @private
		     * @param {Function} assigner The function to assign values.
		     * @returns {Function} Returns the new assigner function.
		     */
		    function createAssigner(assigner) {
		      return baseRest(function(object, sources) {
		        var index = -1,
		            length = sources.length,
		            customizer = length > 1 ? sources[length - 1] : undefined$1,
		            guard = length > 2 ? sources[2] : undefined$1;

		        customizer = (assigner.length > 3 && typeof customizer == 'function')
		          ? (length--, customizer)
		          : undefined$1;

		        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
		          customizer = length < 3 ? undefined$1 : customizer;
		          length = 1;
		        }
		        object = Object(object);
		        while (++index < length) {
		          var source = sources[index];
		          if (source) {
		            assigner(object, source, index, customizer);
		          }
		        }
		        return object;
		      });
		    }

		    /**
		     * Creates a `baseEach` or `baseEachRight` function.
		     *
		     * @private
		     * @param {Function} eachFunc The function to iterate over a collection.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new base function.
		     */
		    function createBaseEach(eachFunc, fromRight) {
		      return function(collection, iteratee) {
		        if (collection == null) {
		          return collection;
		        }
		        if (!isArrayLike(collection)) {
		          return eachFunc(collection, iteratee);
		        }
		        var length = collection.length,
		            index = fromRight ? length : -1,
		            iterable = Object(collection);

		        while ((fromRight ? index-- : ++index < length)) {
		          if (iteratee(iterable[index], index, iterable) === false) {
		            break;
		          }
		        }
		        return collection;
		      };
		    }

		    /**
		     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new base function.
		     */
		    function createBaseFor(fromRight) {
		      return function(object, iteratee, keysFunc) {
		        var index = -1,
		            iterable = Object(object),
		            props = keysFunc(object),
		            length = props.length;

		        while (length--) {
		          var key = props[fromRight ? length : ++index];
		          if (iteratee(iterable[key], key, iterable) === false) {
		            break;
		          }
		        }
		        return object;
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with the optional `this`
		     * binding of `thisArg`.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createBind(func, bitmask, thisArg) {
		      var isBind = bitmask & WRAP_BIND_FLAG,
		          Ctor = createCtor(func);

		      function wrapper() {
		        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
		        return fn.apply(isBind ? thisArg : this, arguments);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a function like `_.lowerFirst`.
		     *
		     * @private
		     * @param {string} methodName The name of the `String` case method to use.
		     * @returns {Function} Returns the new case function.
		     */
		    function createCaseFirst(methodName) {
		      return function(string) {
		        string = toString(string);

		        var strSymbols = hasUnicode(string)
		          ? stringToArray(string)
		          : undefined$1;

		        var chr = strSymbols
		          ? strSymbols[0]
		          : string.charAt(0);

		        var trailing = strSymbols
		          ? castSlice(strSymbols, 1).join('')
		          : string.slice(1);

		        return chr[methodName]() + trailing;
		      };
		    }

		    /**
		     * Creates a function like `_.camelCase`.
		     *
		     * @private
		     * @param {Function} callback The function to combine each word.
		     * @returns {Function} Returns the new compounder function.
		     */
		    function createCompounder(callback) {
		      return function(string) {
		        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
		      };
		    }

		    /**
		     * Creates a function that produces an instance of `Ctor` regardless of
		     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
		     *
		     * @private
		     * @param {Function} Ctor The constructor to wrap.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createCtor(Ctor) {
		      return function() {
		        // Use a `switch` statement to work with class constructors. See
		        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
		        // for more details.
		        var args = arguments;
		        switch (args.length) {
		          case 0: return new Ctor;
		          case 1: return new Ctor(args[0]);
		          case 2: return new Ctor(args[0], args[1]);
		          case 3: return new Ctor(args[0], args[1], args[2]);
		          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
		          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
		          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
		          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
		        }
		        var thisBinding = baseCreate(Ctor.prototype),
		            result = Ctor.apply(thisBinding, args);

		        // Mimic the constructor's `return` behavior.
		        // See https://es5.github.io/#x13.2.2 for more details.
		        return isObject(result) ? result : thisBinding;
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to enable currying.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {number} arity The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createCurry(func, bitmask, arity) {
		      var Ctor = createCtor(func);

		      function wrapper() {
		        var length = arguments.length,
		            args = Array(length),
		            index = length,
		            placeholder = getHolder(wrapper);

		        while (index--) {
		          args[index] = arguments[index];
		        }
		        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
		          ? []
		          : replaceHolders(args, placeholder);

		        length -= holders.length;
		        if (length < arity) {
		          return createRecurry(
		            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
		            args, holders, undefined$1, undefined$1, arity - length);
		        }
		        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
		        return apply(fn, this, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a `_.find` or `_.findLast` function.
		     *
		     * @private
		     * @param {Function} findIndexFunc The function to find the collection index.
		     * @returns {Function} Returns the new find function.
		     */
		    function createFind(findIndexFunc) {
		      return function(collection, predicate, fromIndex) {
		        var iterable = Object(collection);
		        if (!isArrayLike(collection)) {
		          var iteratee = getIteratee(predicate, 3);
		          collection = keys(collection);
		          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
		        }
		        var index = findIndexFunc(collection, predicate, fromIndex);
		        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
		      };
		    }

		    /**
		     * Creates a `_.flow` or `_.flowRight` function.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new flow function.
		     */
		    function createFlow(fromRight) {
		      return flatRest(function(funcs) {
		        var length = funcs.length,
		            index = length,
		            prereq = LodashWrapper.prototype.thru;

		        if (fromRight) {
		          funcs.reverse();
		        }
		        while (index--) {
		          var func = funcs[index];
		          if (typeof func != 'function') {
		            throw new TypeError(FUNC_ERROR_TEXT);
		          }
		          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
		            var wrapper = new LodashWrapper([], true);
		          }
		        }
		        index = wrapper ? index : length;
		        while (++index < length) {
		          func = funcs[index];

		          var funcName = getFuncName(func),
		              data = funcName == 'wrapper' ? getData(func) : undefined$1;

		          if (data && isLaziable(data[0]) &&
		                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
		                !data[4].length && data[9] == 1
		              ) {
		            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
		          } else {
		            wrapper = (func.length == 1 && isLaziable(func))
		              ? wrapper[funcName]()
		              : wrapper.thru(func);
		          }
		        }
		        return function() {
		          var args = arguments,
		              value = args[0];

		          if (wrapper && args.length == 1 && isArray(value)) {
		            return wrapper.plant(value).value();
		          }
		          var index = 0,
		              result = length ? funcs[index].apply(this, args) : value;

		          while (++index < length) {
		            result = funcs[index].call(this, result);
		          }
		          return result;
		        };
		      });
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with optional `this`
		     * binding of `thisArg`, partial application, and currying.
		     *
		     * @private
		     * @param {Function|string} func The function or method name to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to prepend to those provided to
		     *  the new function.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [partialsRight] The arguments to append to those provided
		     *  to the new function.
		     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
		      var isAry = bitmask & WRAP_ARY_FLAG,
		          isBind = bitmask & WRAP_BIND_FLAG,
		          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
		          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
		          isFlip = bitmask & WRAP_FLIP_FLAG,
		          Ctor = isBindKey ? undefined$1 : createCtor(func);

		      function wrapper() {
		        var length = arguments.length,
		            args = Array(length),
		            index = length;

		        while (index--) {
		          args[index] = arguments[index];
		        }
		        if (isCurried) {
		          var placeholder = getHolder(wrapper),
		              holdersCount = countHolders(args, placeholder);
		        }
		        if (partials) {
		          args = composeArgs(args, partials, holders, isCurried);
		        }
		        if (partialsRight) {
		          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
		        }
		        length -= holdersCount;
		        if (isCurried && length < arity) {
		          var newHolders = replaceHolders(args, placeholder);
		          return createRecurry(
		            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
		            args, newHolders, argPos, ary, arity - length
		          );
		        }
		        var thisBinding = isBind ? thisArg : this,
		            fn = isBindKey ? thisBinding[func] : func;

		        length = args.length;
		        if (argPos) {
		          args = reorder(args, argPos);
		        } else if (isFlip && length > 1) {
		          args.reverse();
		        }
		        if (isAry && ary < length) {
		          args.length = ary;
		        }
		        if (this && this !== root && this instanceof wrapper) {
		          fn = Ctor || createCtor(fn);
		        }
		        return fn.apply(thisBinding, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a function like `_.invertBy`.
		     *
		     * @private
		     * @param {Function} setter The function to set accumulator values.
		     * @param {Function} toIteratee The function to resolve iteratees.
		     * @returns {Function} Returns the new inverter function.
		     */
		    function createInverter(setter, toIteratee) {
		      return function(object, iteratee) {
		        return baseInverter(object, setter, toIteratee(iteratee), {});
		      };
		    }

		    /**
		     * Creates a function that performs a mathematical operation on two values.
		     *
		     * @private
		     * @param {Function} operator The function to perform the operation.
		     * @param {number} [defaultValue] The value used for `undefined` arguments.
		     * @returns {Function} Returns the new mathematical operation function.
		     */
		    function createMathOperation(operator, defaultValue) {
		      return function(value, other) {
		        var result;
		        if (value === undefined$1 && other === undefined$1) {
		          return defaultValue;
		        }
		        if (value !== undefined$1) {
		          result = value;
		        }
		        if (other !== undefined$1) {
		          if (result === undefined$1) {
		            return other;
		          }
		          if (typeof value == 'string' || typeof other == 'string') {
		            value = baseToString(value);
		            other = baseToString(other);
		          } else {
		            value = baseToNumber(value);
		            other = baseToNumber(other);
		          }
		          result = operator(value, other);
		        }
		        return result;
		      };
		    }

		    /**
		     * Creates a function like `_.over`.
		     *
		     * @private
		     * @param {Function} arrayFunc The function to iterate over iteratees.
		     * @returns {Function} Returns the new over function.
		     */
		    function createOver(arrayFunc) {
		      return flatRest(function(iteratees) {
		        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
		        return baseRest(function(args) {
		          var thisArg = this;
		          return arrayFunc(iteratees, function(iteratee) {
		            return apply(iteratee, thisArg, args);
		          });
		        });
		      });
		    }

		    /**
		     * Creates the padding for `string` based on `length`. The `chars` string
		     * is truncated if the number of characters exceeds `length`.
		     *
		     * @private
		     * @param {number} length The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padding for `string`.
		     */
		    function createPadding(length, chars) {
		      chars = chars === undefined$1 ? ' ' : baseToString(chars);

		      var charsLength = chars.length;
		      if (charsLength < 2) {
		        return charsLength ? baseRepeat(chars, length) : chars;
		      }
		      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
		      return hasUnicode(chars)
		        ? castSlice(stringToArray(result), 0, length).join('')
		        : result.slice(0, length);
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with the `this` binding
		     * of `thisArg` and `partials` prepended to the arguments it receives.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} thisArg The `this` binding of `func`.
		     * @param {Array} partials The arguments to prepend to those provided to
		     *  the new function.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createPartial(func, bitmask, thisArg, partials) {
		      var isBind = bitmask & WRAP_BIND_FLAG,
		          Ctor = createCtor(func);

		      function wrapper() {
		        var argsIndex = -1,
		            argsLength = arguments.length,
		            leftIndex = -1,
		            leftLength = partials.length,
		            args = Array(leftLength + argsLength),
		            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

		        while (++leftIndex < leftLength) {
		          args[leftIndex] = partials[leftIndex];
		        }
		        while (argsLength--) {
		          args[leftIndex++] = arguments[++argsIndex];
		        }
		        return apply(fn, isBind ? thisArg : this, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a `_.range` or `_.rangeRight` function.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new range function.
		     */
		    function createRange(fromRight) {
		      return function(start, end, step) {
		        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
		          end = step = undefined$1;
		        }
		        // Ensure the sign of `-0` is preserved.
		        start = toFinite(start);
		        if (end === undefined$1) {
		          end = start;
		          start = 0;
		        } else {
		          end = toFinite(end);
		        }
		        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
		        return baseRange(start, end, step, fromRight);
		      };
		    }

		    /**
		     * Creates a function that performs a relational operation on two values.
		     *
		     * @private
		     * @param {Function} operator The function to perform the operation.
		     * @returns {Function} Returns the new relational operation function.
		     */
		    function createRelationalOperation(operator) {
		      return function(value, other) {
		        if (!(typeof value == 'string' && typeof other == 'string')) {
		          value = toNumber(value);
		          other = toNumber(other);
		        }
		        return operator(value, other);
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to continue currying.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {Function} wrapFunc The function to create the `func` wrapper.
		     * @param {*} placeholder The placeholder value.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to prepend to those provided to
		     *  the new function.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
		      var isCurry = bitmask & WRAP_CURRY_FLAG,
		          newHolders = isCurry ? holders : undefined$1,
		          newHoldersRight = isCurry ? undefined$1 : holders,
		          newPartials = isCurry ? partials : undefined$1,
		          newPartialsRight = isCurry ? undefined$1 : partials;

		      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
		      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

		      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
		        bitmask &= -4;
		      }
		      var newData = [
		        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
		        newHoldersRight, argPos, ary, arity
		      ];

		      var result = wrapFunc.apply(undefined$1, newData);
		      if (isLaziable(func)) {
		        setData(result, newData);
		      }
		      result.placeholder = placeholder;
		      return setWrapToString(result, func, bitmask);
		    }

		    /**
		     * Creates a function like `_.round`.
		     *
		     * @private
		     * @param {string} methodName The name of the `Math` method to use when rounding.
		     * @returns {Function} Returns the new round function.
		     */
		    function createRound(methodName) {
		      var func = Math[methodName];
		      return function(number, precision) {
		        number = toNumber(number);
		        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
		        if (precision && nativeIsFinite(number)) {
		          // Shift with exponential notation to avoid floating-point issues.
		          // See [MDN](https://mdn.io/round#Examples) for more details.
		          var pair = (toString(number) + 'e').split('e'),
		              value = func(pair[0] + 'e' + (+pair[1] + precision));

		          pair = (toString(value) + 'e').split('e');
		          return +(pair[0] + 'e' + (+pair[1] - precision));
		        }
		        return func(number);
		      };
		    }

		    /**
		     * Creates a set object of `values`.
		     *
		     * @private
		     * @param {Array} values The values to add to the set.
		     * @returns {Object} Returns the new set.
		     */
		    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
		      return new Set(values);
		    };

		    /**
		     * Creates a `_.toPairs` or `_.toPairsIn` function.
		     *
		     * @private
		     * @param {Function} keysFunc The function to get the keys of a given object.
		     * @returns {Function} Returns the new pairs function.
		     */
		    function createToPairs(keysFunc) {
		      return function(object) {
		        var tag = getTag(object);
		        if (tag == mapTag) {
		          return mapToArray(object);
		        }
		        if (tag == setTag) {
		          return setToPairs(object);
		        }
		        return baseToPairs(object, keysFunc(object));
		      };
		    }

		    /**
		     * Creates a function that either curries or invokes `func` with optional
		     * `this` binding and partially applied arguments.
		     *
		     * @private
		     * @param {Function|string} func The function or method name to wrap.
		     * @param {number} bitmask The bitmask flags.
		     *    1 - `_.bind`
		     *    2 - `_.bindKey`
		     *    4 - `_.curry` or `_.curryRight` of a bound function
		     *    8 - `_.curry`
		     *   16 - `_.curryRight`
		     *   32 - `_.partial`
		     *   64 - `_.partialRight`
		     *  128 - `_.rearg`
		     *  256 - `_.ary`
		     *  512 - `_.flip`
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to be partially applied.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
		      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
		      if (!isBindKey && typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      var length = partials ? partials.length : 0;
		      if (!length) {
		        bitmask &= -97;
		        partials = holders = undefined$1;
		      }
		      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
		      arity = arity === undefined$1 ? arity : toInteger(arity);
		      length -= holders ? holders.length : 0;

		      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
		        var partialsRight = partials,
		            holdersRight = holders;

		        partials = holders = undefined$1;
		      }
		      var data = isBindKey ? undefined$1 : getData(func);

		      var newData = [
		        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
		        argPos, ary, arity
		      ];

		      if (data) {
		        mergeData(newData, data);
		      }
		      func = newData[0];
		      bitmask = newData[1];
		      thisArg = newData[2];
		      partials = newData[3];
		      holders = newData[4];
		      arity = newData[9] = newData[9] === undefined$1
		        ? (isBindKey ? 0 : func.length)
		        : nativeMax(newData[9] - length, 0);

		      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
		        bitmask &= -25;
		      }
		      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
		        var result = createBind(func, bitmask, thisArg);
		      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
		        result = createCurry(func, bitmask, arity);
		      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
		        result = createPartial(func, bitmask, thisArg, partials);
		      } else {
		        result = createHybrid.apply(undefined$1, newData);
		      }
		      var setter = data ? baseSetData : setData;
		      return setWrapToString(setter(result, newData), func, bitmask);
		    }

		    /**
		     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
		     * of source objects to the destination object for all destination properties
		     * that resolve to `undefined`.
		     *
		     * @private
		     * @param {*} objValue The destination value.
		     * @param {*} srcValue The source value.
		     * @param {string} key The key of the property to assign.
		     * @param {Object} object The parent object of `objValue`.
		     * @returns {*} Returns the value to assign.
		     */
		    function customDefaultsAssignIn(objValue, srcValue, key, object) {
		      if (objValue === undefined$1 ||
		          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
		        return srcValue;
		      }
		      return objValue;
		    }

		    /**
		     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
		     * objects into destination objects that are passed thru.
		     *
		     * @private
		     * @param {*} objValue The destination value.
		     * @param {*} srcValue The source value.
		     * @param {string} key The key of the property to merge.
		     * @param {Object} object The parent object of `objValue`.
		     * @param {Object} source The parent object of `srcValue`.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     * @returns {*} Returns the value to assign.
		     */
		    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
		      if (isObject(objValue) && isObject(srcValue)) {
		        // Recursively merge objects and arrays (susceptible to call stack limits).
		        stack.set(srcValue, objValue);
		        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
		        stack['delete'](srcValue);
		      }
		      return objValue;
		    }

		    /**
		     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
		     * objects.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @param {string} key The key of the property to inspect.
		     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
		     */
		    function customOmitClone(value) {
		      return isPlainObject(value) ? undefined$1 : value;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for arrays with support for
		     * partial deep comparisons.
		     *
		     * @private
		     * @param {Array} array The array to compare.
		     * @param {Array} other The other array to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `array` and `other` objects.
		     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
		     */
		    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
		      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		          arrLength = array.length,
		          othLength = other.length;

		      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
		        return false;
		      }
		      // Check that cyclic values are equal.
		      var arrStacked = stack.get(array);
		      var othStacked = stack.get(other);
		      if (arrStacked && othStacked) {
		        return arrStacked == other && othStacked == array;
		      }
		      var index = -1,
		          result = true,
		          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

		      stack.set(array, other);
		      stack.set(other, array);

		      // Ignore non-index properties.
		      while (++index < arrLength) {
		        var arrValue = array[index],
		            othValue = other[index];

		        if (customizer) {
		          var compared = isPartial
		            ? customizer(othValue, arrValue, index, other, array, stack)
		            : customizer(arrValue, othValue, index, array, other, stack);
		        }
		        if (compared !== undefined$1) {
		          if (compared) {
		            continue;
		          }
		          result = false;
		          break;
		        }
		        // Recursively compare arrays (susceptible to call stack limits).
		        if (seen) {
		          if (!arraySome(other, function(othValue, othIndex) {
		                if (!cacheHas(seen, othIndex) &&
		                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
		                  return seen.push(othIndex);
		                }
		              })) {
		            result = false;
		            break;
		          }
		        } else if (!(
		              arrValue === othValue ||
		                equalFunc(arrValue, othValue, bitmask, customizer, stack)
		            )) {
		          result = false;
		          break;
		        }
		      }
		      stack['delete'](array);
		      stack['delete'](other);
		      return result;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for comparing objects of
		     * the same `toStringTag`.
		     *
		     * **Note:** This function only supports comparing values with tags of
		     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {string} tag The `toStringTag` of the objects to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
		      switch (tag) {
		        case dataViewTag:
		          if ((object.byteLength != other.byteLength) ||
		              (object.byteOffset != other.byteOffset)) {
		            return false;
		          }
		          object = object.buffer;
		          other = other.buffer;

		        case arrayBufferTag:
		          if ((object.byteLength != other.byteLength) ||
		              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
		            return false;
		          }
		          return true;

		        case boolTag:
		        case dateTag:
		        case numberTag:
		          // Coerce booleans to `1` or `0` and dates to milliseconds.
		          // Invalid dates are coerced to `NaN`.
		          return eq(+object, +other);

		        case errorTag:
		          return object.name == other.name && object.message == other.message;

		        case regexpTag:
		        case stringTag:
		          // Coerce regexes to strings and treat strings, primitives and objects,
		          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
		          // for more details.
		          return object == (other + '');

		        case mapTag:
		          var convert = mapToArray;

		        case setTag:
		          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
		          convert || (convert = setToArray);

		          if (object.size != other.size && !isPartial) {
		            return false;
		          }
		          // Assume cyclic values are equal.
		          var stacked = stack.get(object);
		          if (stacked) {
		            return stacked == other;
		          }
		          bitmask |= COMPARE_UNORDERED_FLAG;

		          // Recursively compare objects (susceptible to call stack limits).
		          stack.set(object, other);
		          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
		          stack['delete'](object);
		          return result;

		        case symbolTag:
		          if (symbolValueOf) {
		            return symbolValueOf.call(object) == symbolValueOf.call(other);
		          }
		      }
		      return false;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for objects with support for
		     * partial deep comparisons.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
		      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		          objProps = getAllKeys(object),
		          objLength = objProps.length,
		          othProps = getAllKeys(other),
		          othLength = othProps.length;

		      if (objLength != othLength && !isPartial) {
		        return false;
		      }
		      var index = objLength;
		      while (index--) {
		        var key = objProps[index];
		        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
		          return false;
		        }
		      }
		      // Check that cyclic values are equal.
		      var objStacked = stack.get(object);
		      var othStacked = stack.get(other);
		      if (objStacked && othStacked) {
		        return objStacked == other && othStacked == object;
		      }
		      var result = true;
		      stack.set(object, other);
		      stack.set(other, object);

		      var skipCtor = isPartial;
		      while (++index < objLength) {
		        key = objProps[index];
		        var objValue = object[key],
		            othValue = other[key];

		        if (customizer) {
		          var compared = isPartial
		            ? customizer(othValue, objValue, key, other, object, stack)
		            : customizer(objValue, othValue, key, object, other, stack);
		        }
		        // Recursively compare objects (susceptible to call stack limits).
		        if (!(compared === undefined$1
		              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
		              : compared
		            )) {
		          result = false;
		          break;
		        }
		        skipCtor || (skipCtor = key == 'constructor');
		      }
		      if (result && !skipCtor) {
		        var objCtor = object.constructor,
		            othCtor = other.constructor;

		        // Non `Object` object instances with different constructors are not equal.
		        if (objCtor != othCtor &&
		            ('constructor' in object && 'constructor' in other) &&
		            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
		              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
		          result = false;
		        }
		      }
		      stack['delete'](object);
		      stack['delete'](other);
		      return result;
		    }

		    /**
		     * A specialized version of `baseRest` which flattens the rest array.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @returns {Function} Returns the new function.
		     */
		    function flatRest(func) {
		      return setToString(overRest(func, undefined$1, flatten), func + '');
		    }

		    /**
		     * Creates an array of own enumerable property names and symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function getAllKeys(object) {
		      return baseGetAllKeys(object, keys, getSymbols);
		    }

		    /**
		     * Creates an array of own and inherited enumerable property names and
		     * symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function getAllKeysIn(object) {
		      return baseGetAllKeys(object, keysIn, getSymbolsIn);
		    }

		    /**
		     * Gets metadata for `func`.
		     *
		     * @private
		     * @param {Function} func The function to query.
		     * @returns {*} Returns the metadata for `func`.
		     */
		    var getData = !metaMap ? noop : function(func) {
		      return metaMap.get(func);
		    };

		    /**
		     * Gets the name of `func`.
		     *
		     * @private
		     * @param {Function} func The function to query.
		     * @returns {string} Returns the function name.
		     */
		    function getFuncName(func) {
		      var result = (func.name + ''),
		          array = realNames[result],
		          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

		      while (length--) {
		        var data = array[length],
		            otherFunc = data.func;
		        if (otherFunc == null || otherFunc == func) {
		          return data.name;
		        }
		      }
		      return result;
		    }

		    /**
		     * Gets the argument placeholder value for `func`.
		     *
		     * @private
		     * @param {Function} func The function to inspect.
		     * @returns {*} Returns the placeholder value.
		     */
		    function getHolder(func) {
		      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
		      return object.placeholder;
		    }

		    /**
		     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
		     * this function returns the custom method, otherwise it returns `baseIteratee`.
		     * If arguments are provided, the chosen function is invoked with them and
		     * its result is returned.
		     *
		     * @private
		     * @param {*} [value] The value to convert to an iteratee.
		     * @param {number} [arity] The arity of the created iteratee.
		     * @returns {Function} Returns the chosen function or its result.
		     */
		    function getIteratee() {
		      var result = lodash.iteratee || iteratee;
		      result = result === iteratee ? baseIteratee : result;
		      return arguments.length ? result(arguments[0], arguments[1]) : result;
		    }

		    /**
		     * Gets the data for `map`.
		     *
		     * @private
		     * @param {Object} map The map to query.
		     * @param {string} key The reference key.
		     * @returns {*} Returns the map data.
		     */
		    function getMapData(map, key) {
		      var data = map.__data__;
		      return isKeyable(key)
		        ? data[typeof key == 'string' ? 'string' : 'hash']
		        : data.map;
		    }

		    /**
		     * Gets the property names, values, and compare flags of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the match data of `object`.
		     */
		    function getMatchData(object) {
		      var result = keys(object),
		          length = result.length;

		      while (length--) {
		        var key = result[length],
		            value = object[key];

		        result[length] = [key, value, isStrictComparable(value)];
		      }
		      return result;
		    }

		    /**
		     * Gets the native function at `key` of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {string} key The key of the method to get.
		     * @returns {*} Returns the function if it's native, else `undefined`.
		     */
		    function getNative(object, key) {
		      var value = getValue(object, key);
		      return baseIsNative(value) ? value : undefined$1;
		    }

		    /**
		     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the raw `toStringTag`.
		     */
		    function getRawTag(value) {
		      var isOwn = hasOwnProperty.call(value, symToStringTag),
		          tag = value[symToStringTag];

		      try {
		        value[symToStringTag] = undefined$1;
		        var unmasked = true;
		      } catch (e) {}

		      var result = nativeObjectToString.call(value);
		      if (unmasked) {
		        if (isOwn) {
		          value[symToStringTag] = tag;
		        } else {
		          delete value[symToStringTag];
		        }
		      }
		      return result;
		    }

		    /**
		     * Creates an array of the own enumerable symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of symbols.
		     */
		    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
		      if (object == null) {
		        return [];
		      }
		      object = Object(object);
		      return arrayFilter(nativeGetSymbols(object), function(symbol) {
		        return propertyIsEnumerable.call(object, symbol);
		      });
		    };

		    /**
		     * Creates an array of the own and inherited enumerable symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of symbols.
		     */
		    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
		      var result = [];
		      while (object) {
		        arrayPush(result, getSymbols(object));
		        object = getPrototype(object);
		      }
		      return result;
		    };

		    /**
		     * Gets the `toStringTag` of `value`.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the `toStringTag`.
		     */
		    var getTag = baseGetTag;

		    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
		    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
		        (Map && getTag(new Map) != mapTag) ||
		        (Promise && getTag(Promise.resolve()) != promiseTag) ||
		        (Set && getTag(new Set) != setTag) ||
		        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
		      getTag = function(value) {
		        var result = baseGetTag(value),
		            Ctor = result == objectTag ? value.constructor : undefined$1,
		            ctorString = Ctor ? toSource(Ctor) : '';

		        if (ctorString) {
		          switch (ctorString) {
		            case dataViewCtorString: return dataViewTag;
		            case mapCtorString: return mapTag;
		            case promiseCtorString: return promiseTag;
		            case setCtorString: return setTag;
		            case weakMapCtorString: return weakMapTag;
		          }
		        }
		        return result;
		      };
		    }

		    /**
		     * Gets the view, applying any `transforms` to the `start` and `end` positions.
		     *
		     * @private
		     * @param {number} start The start of the view.
		     * @param {number} end The end of the view.
		     * @param {Array} transforms The transformations to apply to the view.
		     * @returns {Object} Returns an object containing the `start` and `end`
		     *  positions of the view.
		     */
		    function getView(start, end, transforms) {
		      var index = -1,
		          length = transforms.length;

		      while (++index < length) {
		        var data = transforms[index],
		            size = data.size;

		        switch (data.type) {
		          case 'drop':      start += size; break;
		          case 'dropRight': end -= size; break;
		          case 'take':      end = nativeMin(end, start + size); break;
		          case 'takeRight': start = nativeMax(start, end - size); break;
		        }
		      }
		      return { 'start': start, 'end': end };
		    }

		    /**
		     * Extracts wrapper details from the `source` body comment.
		     *
		     * @private
		     * @param {string} source The source to inspect.
		     * @returns {Array} Returns the wrapper details.
		     */
		    function getWrapDetails(source) {
		      var match = source.match(reWrapDetails);
		      return match ? match[1].split(reSplitDetails) : [];
		    }

		    /**
		     * Checks if `path` exists on `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @param {Function} hasFunc The function to check properties.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     */
		    function hasPath(object, path, hasFunc) {
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length,
		          result = false;

		      while (++index < length) {
		        var key = toKey(path[index]);
		        if (!(result = object != null && hasFunc(object, key))) {
		          break;
		        }
		        object = object[key];
		      }
		      if (result || ++index != length) {
		        return result;
		      }
		      length = object == null ? 0 : object.length;
		      return !!length && isLength(length) && isIndex(key, length) &&
		        (isArray(object) || isArguments(object));
		    }

		    /**
		     * Initializes an array clone.
		     *
		     * @private
		     * @param {Array} array The array to clone.
		     * @returns {Array} Returns the initialized clone.
		     */
		    function initCloneArray(array) {
		      var length = array.length,
		          result = new array.constructor(length);

		      // Add properties assigned by `RegExp#exec`.
		      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
		        result.index = array.index;
		        result.input = array.input;
		      }
		      return result;
		    }

		    /**
		     * Initializes an object clone.
		     *
		     * @private
		     * @param {Object} object The object to clone.
		     * @returns {Object} Returns the initialized clone.
		     */
		    function initCloneObject(object) {
		      return (typeof object.constructor == 'function' && !isPrototype(object))
		        ? baseCreate(getPrototype(object))
		        : {};
		    }

		    /**
		     * Initializes an object clone based on its `toStringTag`.
		     *
		     * **Note:** This function only supports cloning values with tags of
		     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
		     *
		     * @private
		     * @param {Object} object The object to clone.
		     * @param {string} tag The `toStringTag` of the object to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the initialized clone.
		     */
		    function initCloneByTag(object, tag, isDeep) {
		      var Ctor = object.constructor;
		      switch (tag) {
		        case arrayBufferTag:
		          return cloneArrayBuffer(object);

		        case boolTag:
		        case dateTag:
		          return new Ctor(+object);

		        case dataViewTag:
		          return cloneDataView(object, isDeep);

		        case float32Tag: case float64Tag:
		        case int8Tag: case int16Tag: case int32Tag:
		        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
		          return cloneTypedArray(object, isDeep);

		        case mapTag:
		          return new Ctor;

		        case numberTag:
		        case stringTag:
		          return new Ctor(object);

		        case regexpTag:
		          return cloneRegExp(object);

		        case setTag:
		          return new Ctor;

		        case symbolTag:
		          return cloneSymbol(object);
		      }
		    }

		    /**
		     * Inserts wrapper `details` in a comment at the top of the `source` body.
		     *
		     * @private
		     * @param {string} source The source to modify.
		     * @returns {Array} details The details to insert.
		     * @returns {string} Returns the modified source.
		     */
		    function insertWrapDetails(source, details) {
		      var length = details.length;
		      if (!length) {
		        return source;
		      }
		      var lastIndex = length - 1;
		      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
		      details = details.join(length > 2 ? ', ' : ' ');
		      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
		    }

		    /**
		     * Checks if `value` is a flattenable `arguments` object or array.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
		     */
		    function isFlattenable(value) {
		      return isArray(value) || isArguments(value) ||
		        !!(spreadableSymbol && value && value[spreadableSymbol]);
		    }

		    /**
		     * Checks if `value` is a valid array-like index.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		     */
		    function isIndex(value, length) {
		      var type = typeof value;
		      length = length == null ? MAX_SAFE_INTEGER : length;

		      return !!length &&
		        (type == 'number' ||
		          (type != 'symbol' && reIsUint.test(value))) &&
		            (value > -1 && value % 1 == 0 && value < length);
		    }

		    /**
		     * Checks if the given arguments are from an iteratee call.
		     *
		     * @private
		     * @param {*} value The potential iteratee value argument.
		     * @param {*} index The potential iteratee index or key argument.
		     * @param {*} object The potential iteratee object argument.
		     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
		     *  else `false`.
		     */
		    function isIterateeCall(value, index, object) {
		      if (!isObject(object)) {
		        return false;
		      }
		      var type = typeof index;
		      if (type == 'number'
		            ? (isArrayLike(object) && isIndex(index, object.length))
		            : (type == 'string' && index in object)
		          ) {
		        return eq(object[index], value);
		      }
		      return false;
		    }

		    /**
		     * Checks if `value` is a property name and not a property path.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @param {Object} [object] The object to query keys on.
		     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
		     */
		    function isKey(value, object) {
		      if (isArray(value)) {
		        return false;
		      }
		      var type = typeof value;
		      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
		          value == null || isSymbol(value)) {
		        return true;
		      }
		      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
		        (object != null && value in Object(object));
		    }

		    /**
		     * Checks if `value` is suitable for use as unique object key.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
		     */
		    function isKeyable(value) {
		      var type = typeof value;
		      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
		        ? (value !== '__proto__')
		        : (value === null);
		    }

		    /**
		     * Checks if `func` has a lazy counterpart.
		     *
		     * @private
		     * @param {Function} func The function to check.
		     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
		     *  else `false`.
		     */
		    function isLaziable(func) {
		      var funcName = getFuncName(func),
		          other = lodash[funcName];

		      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
		        return false;
		      }
		      if (func === other) {
		        return true;
		      }
		      var data = getData(other);
		      return !!data && func === data[0];
		    }

		    /**
		     * Checks if `func` has its source masked.
		     *
		     * @private
		     * @param {Function} func The function to check.
		     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
		     */
		    function isMasked(func) {
		      return !!maskSrcKey && (maskSrcKey in func);
		    }

		    /**
		     * Checks if `func` is capable of being masked.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
		     */
		    var isMaskable = coreJsData ? isFunction : stubFalse;

		    /**
		     * Checks if `value` is likely a prototype object.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
		     */
		    function isPrototype(value) {
		      var Ctor = value && value.constructor,
		          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

		      return value === proto;
		    }

		    /**
		     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` if suitable for strict
		     *  equality comparisons, else `false`.
		     */
		    function isStrictComparable(value) {
		      return value === value && !isObject(value);
		    }

		    /**
		     * A specialized version of `matchesProperty` for source values suitable
		     * for strict equality comparisons, i.e. `===`.
		     *
		     * @private
		     * @param {string} key The key of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function matchesStrictComparable(key, srcValue) {
		      return function(object) {
		        if (object == null) {
		          return false;
		        }
		        return object[key] === srcValue &&
		          (srcValue !== undefined$1 || (key in Object(object)));
		      };
		    }

		    /**
		     * A specialized version of `_.memoize` which clears the memoized function's
		     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
		     *
		     * @private
		     * @param {Function} func The function to have its output memoized.
		     * @returns {Function} Returns the new memoized function.
		     */
		    function memoizeCapped(func) {
		      var result = memoize(func, function(key) {
		        if (cache.size === MAX_MEMOIZE_SIZE) {
		          cache.clear();
		        }
		        return key;
		      });

		      var cache = result.cache;
		      return result;
		    }

		    /**
		     * Merges the function metadata of `source` into `data`.
		     *
		     * Merging metadata reduces the number of wrappers used to invoke a function.
		     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
		     * may be applied regardless of execution order. Methods like `_.ary` and
		     * `_.rearg` modify function arguments, making the order in which they are
		     * executed important, preventing the merging of metadata. However, we make
		     * an exception for a safe combined case where curried functions have `_.ary`
		     * and or `_.rearg` applied.
		     *
		     * @private
		     * @param {Array} data The destination metadata.
		     * @param {Array} source The source metadata.
		     * @returns {Array} Returns `data`.
		     */
		    function mergeData(data, source) {
		      var bitmask = data[1],
		          srcBitmask = source[1],
		          newBitmask = bitmask | srcBitmask,
		          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

		      var isCombo =
		        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
		        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
		        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

		      // Exit early if metadata can't be merged.
		      if (!(isCommon || isCombo)) {
		        return data;
		      }
		      // Use source `thisArg` if available.
		      if (srcBitmask & WRAP_BIND_FLAG) {
		        data[2] = source[2];
		        // Set when currying a bound function.
		        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
		      }
		      // Compose partial arguments.
		      var value = source[3];
		      if (value) {
		        var partials = data[3];
		        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
		        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
		      }
		      // Compose partial right arguments.
		      value = source[5];
		      if (value) {
		        partials = data[5];
		        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
		        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
		      }
		      // Use source `argPos` if available.
		      value = source[7];
		      if (value) {
		        data[7] = value;
		      }
		      // Use source `ary` if it's smaller.
		      if (srcBitmask & WRAP_ARY_FLAG) {
		        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
		      }
		      // Use source `arity` if one is not provided.
		      if (data[9] == null) {
		        data[9] = source[9];
		      }
		      // Use source `func` and merge bitmasks.
		      data[0] = source[0];
		      data[1] = newBitmask;

		      return data;
		    }

		    /**
		     * This function is like
		     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		     * except that it includes inherited enumerable properties.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function nativeKeysIn(object) {
		      var result = [];
		      if (object != null) {
		        for (var key in Object(object)) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * Converts `value` to a string using `Object.prototype.toString`.
		     *
		     * @private
		     * @param {*} value The value to convert.
		     * @returns {string} Returns the converted string.
		     */
		    function objectToString(value) {
		      return nativeObjectToString.call(value);
		    }

		    /**
		     * A specialized version of `baseRest` which transforms the rest array.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @param {Function} transform The rest array transform.
		     * @returns {Function} Returns the new function.
		     */
		    function overRest(func, start, transform) {
		      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
		      return function() {
		        var args = arguments,
		            index = -1,
		            length = nativeMax(args.length - start, 0),
		            array = Array(length);

		        while (++index < length) {
		          array[index] = args[start + index];
		        }
		        index = -1;
		        var otherArgs = Array(start + 1);
		        while (++index < start) {
		          otherArgs[index] = args[index];
		        }
		        otherArgs[start] = transform(array);
		        return apply(func, this, otherArgs);
		      };
		    }

		    /**
		     * Gets the parent value at `path` of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array} path The path to get the parent value of.
		     * @returns {*} Returns the parent value.
		     */
		    function parent(object, path) {
		      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
		    }

		    /**
		     * Reorder `array` according to the specified indexes where the element at
		     * the first index is assigned as the first element, the element at
		     * the second index is assigned as the second element, and so on.
		     *
		     * @private
		     * @param {Array} array The array to reorder.
		     * @param {Array} indexes The arranged array indexes.
		     * @returns {Array} Returns `array`.
		     */
		    function reorder(array, indexes) {
		      var arrLength = array.length,
		          length = nativeMin(indexes.length, arrLength),
		          oldArray = copyArray(array);

		      while (length--) {
		        var index = indexes[length];
		        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
		      }
		      return array;
		    }

		    /**
		     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {string} key The key of the property to get.
		     * @returns {*} Returns the property value.
		     */
		    function safeGet(object, key) {
		      if (key === 'constructor' && typeof object[key] === 'function') {
		        return;
		      }

		      if (key == '__proto__') {
		        return;
		      }

		      return object[key];
		    }

		    /**
		     * Sets metadata for `func`.
		     *
		     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
		     * period of time, it will trip its breaker and transition to an identity
		     * function to avoid garbage collection pauses in V8. See
		     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
		     * for more details.
		     *
		     * @private
		     * @param {Function} func The function to associate metadata with.
		     * @param {*} data The metadata.
		     * @returns {Function} Returns `func`.
		     */
		    var setData = shortOut(baseSetData);

		    /**
		     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
		     *
		     * @private
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @returns {number|Object} Returns the timer id or timeout object.
		     */
		    var setTimeout = ctxSetTimeout || function(func, wait) {
		      return root.setTimeout(func, wait);
		    };

		    /**
		     * Sets the `toString` method of `func` to return `string`.
		     *
		     * @private
		     * @param {Function} func The function to modify.
		     * @param {Function} string The `toString` result.
		     * @returns {Function} Returns `func`.
		     */
		    var setToString = shortOut(baseSetToString);

		    /**
		     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
		     * with wrapper details in a comment at the top of the source body.
		     *
		     * @private
		     * @param {Function} wrapper The function to modify.
		     * @param {Function} reference The reference function.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @returns {Function} Returns `wrapper`.
		     */
		    function setWrapToString(wrapper, reference, bitmask) {
		      var source = (reference + '');
		      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
		    }

		    /**
		     * Creates a function that'll short out and invoke `identity` instead
		     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
		     * milliseconds.
		     *
		     * @private
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new shortable function.
		     */
		    function shortOut(func) {
		      var count = 0,
		          lastCalled = 0;

		      return function() {
		        var stamp = nativeNow(),
		            remaining = HOT_SPAN - (stamp - lastCalled);

		        lastCalled = stamp;
		        if (remaining > 0) {
		          if (++count >= HOT_COUNT) {
		            return arguments[0];
		          }
		        } else {
		          count = 0;
		        }
		        return func.apply(undefined$1, arguments);
		      };
		    }

		    /**
		     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
		     *
		     * @private
		     * @param {Array} array The array to shuffle.
		     * @param {number} [size=array.length] The size of `array`.
		     * @returns {Array} Returns `array`.
		     */
		    function shuffleSelf(array, size) {
		      var index = -1,
		          length = array.length,
		          lastIndex = length - 1;

		      size = size === undefined$1 ? length : size;
		      while (++index < size) {
		        var rand = baseRandom(index, lastIndex),
		            value = array[rand];

		        array[rand] = array[index];
		        array[index] = value;
		      }
		      array.length = size;
		      return array;
		    }

		    /**
		     * Converts `string` to a property path array.
		     *
		     * @private
		     * @param {string} string The string to convert.
		     * @returns {Array} Returns the property path array.
		     */
		    var stringToPath = memoizeCapped(function(string) {
		      var result = [];
		      if (string.charCodeAt(0) === 46 /* . */) {
		        result.push('');
		      }
		      string.replace(rePropName, function(match, number, quote, subString) {
		        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
		      });
		      return result;
		    });

		    /**
		     * Converts `value` to a string key if it's not a string or symbol.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {string|symbol} Returns the key.
		     */
		    function toKey(value) {
		      if (typeof value == 'string' || isSymbol(value)) {
		        return value;
		      }
		      var result = (value + '');
		      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		    }

		    /**
		     * Converts `func` to its source code.
		     *
		     * @private
		     * @param {Function} func The function to convert.
		     * @returns {string} Returns the source code.
		     */
		    function toSource(func) {
		      if (func != null) {
		        try {
		          return funcToString.call(func);
		        } catch (e) {}
		        try {
		          return (func + '');
		        } catch (e) {}
		      }
		      return '';
		    }

		    /**
		     * Updates wrapper `details` based on `bitmask` flags.
		     *
		     * @private
		     * @returns {Array} details The details to modify.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @returns {Array} Returns `details`.
		     */
		    function updateWrapDetails(details, bitmask) {
		      arrayEach(wrapFlags, function(pair) {
		        var value = '_.' + pair[0];
		        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
		          details.push(value);
		        }
		      });
		      return details.sort();
		    }

		    /**
		     * Creates a clone of `wrapper`.
		     *
		     * @private
		     * @param {Object} wrapper The wrapper to clone.
		     * @returns {Object} Returns the cloned wrapper.
		     */
		    function wrapperClone(wrapper) {
		      if (wrapper instanceof LazyWrapper) {
		        return wrapper.clone();
		      }
		      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
		      result.__actions__ = copyArray(wrapper.__actions__);
		      result.__index__  = wrapper.__index__;
		      result.__values__ = wrapper.__values__;
		      return result;
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an array of elements split into groups the length of `size`.
		     * If `array` can't be split evenly, the final chunk will be the remaining
		     * elements.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to process.
		     * @param {number} [size=1] The length of each chunk
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the new array of chunks.
		     * @example
		     *
		     * _.chunk(['a', 'b', 'c', 'd'], 2);
		     * // => [['a', 'b'], ['c', 'd']]
		     *
		     * _.chunk(['a', 'b', 'c', 'd'], 3);
		     * // => [['a', 'b', 'c'], ['d']]
		     */
		    function chunk(array, size, guard) {
		      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
		        size = 1;
		      } else {
		        size = nativeMax(toInteger(size), 0);
		      }
		      var length = array == null ? 0 : array.length;
		      if (!length || size < 1) {
		        return [];
		      }
		      var index = 0,
		          resIndex = 0,
		          result = Array(nativeCeil(length / size));

		      while (index < length) {
		        result[resIndex++] = baseSlice(array, index, (index += size));
		      }
		      return result;
		    }

		    /**
		     * Creates an array with all falsey values removed. The values `false`, `null`,
		     * `0`, `""`, `undefined`, and `NaN` are falsey.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to compact.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.compact([0, 1, false, 2, '', 3]);
		     * // => [1, 2, 3]
		     */
		    function compact(array) {
		      var index = -1,
		          length = array == null ? 0 : array.length,
		          resIndex = 0,
		          result = [];

		      while (++index < length) {
		        var value = array[index];
		        if (value) {
		          result[resIndex++] = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * Creates a new array concatenating `array` with any additional arrays
		     * and/or values.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to concatenate.
		     * @param {...*} [values] The values to concatenate.
		     * @returns {Array} Returns the new concatenated array.
		     * @example
		     *
		     * var array = [1];
		     * var other = _.concat(array, 2, [3], [[4]]);
		     *
		     * console.log(other);
		     * // => [1, 2, 3, [4]]
		     *
		     * console.log(array);
		     * // => [1]
		     */
		    function concat() {
		      var length = arguments.length;
		      if (!length) {
		        return [];
		      }
		      var args = Array(length - 1),
		          array = arguments[0],
		          index = length;

		      while (index--) {
		        args[index - 1] = arguments[index];
		      }
		      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
		    }

		    /**
		     * Creates an array of `array` values not included in the other given arrays
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. The order and references of result values are
		     * determined by the first array.
		     *
		     * **Note:** Unlike `_.pullAll`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.without, _.xor
		     * @example
		     *
		     * _.difference([2, 1], [2, 3]);
		     * // => [1]
		     */
		    var difference = baseRest(function(array, values) {
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
		        : [];
		    });

		    /**
		     * This method is like `_.difference` except that it accepts `iteratee` which
		     * is invoked for each element of `array` and `values` to generate the criterion
		     * by which they're compared. The order and references of result values are
		     * determined by the first array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
		     * // => [{ 'x': 2 }]
		     */
		    var differenceBy = baseRest(function(array, values) {
		      var iteratee = last(values);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
		        : [];
		    });

		    /**
		     * This method is like `_.difference` except that it accepts `comparator`
		     * which is invoked to compare elements of `array` to `values`. The order and
		     * references of result values are determined by the first array. The comparator
		     * is invoked with two arguments: (arrVal, othVal).
		     *
		     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     *
		     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
		     * // => [{ 'x': 2, 'y': 1 }]
		     */
		    var differenceWith = baseRest(function(array, values) {
		      var comparator = last(values);
		      if (isArrayLikeObject(comparator)) {
		        comparator = undefined$1;
		      }
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
		        : [];
		    });

		    /**
		     * Creates a slice of `array` with `n` elements dropped from the beginning.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to drop.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.drop([1, 2, 3]);
		     * // => [2, 3]
		     *
		     * _.drop([1, 2, 3], 2);
		     * // => [3]
		     *
		     * _.drop([1, 2, 3], 5);
		     * // => []
		     *
		     * _.drop([1, 2, 3], 0);
		     * // => [1, 2, 3]
		     */
		    function drop(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      return baseSlice(array, n < 0 ? 0 : n, length);
		    }

		    /**
		     * Creates a slice of `array` with `n` elements dropped from the end.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to drop.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.dropRight([1, 2, 3]);
		     * // => [1, 2]
		     *
		     * _.dropRight([1, 2, 3], 2);
		     * // => [1]
		     *
		     * _.dropRight([1, 2, 3], 5);
		     * // => []
		     *
		     * _.dropRight([1, 2, 3], 0);
		     * // => [1, 2, 3]
		     */
		    function dropRight(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      n = length - n;
		      return baseSlice(array, 0, n < 0 ? 0 : n);
		    }

		    /**
		     * Creates a slice of `array` excluding elements dropped from the end.
		     * Elements are dropped until `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.dropRightWhile(users, function(o) { return !o.active; });
		     * // => objects for ['barney']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.dropRightWhile(users, ['active', false]);
		     * // => objects for ['barney']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.dropRightWhile(users, 'active');
		     * // => objects for ['barney', 'fred', 'pebbles']
		     */
		    function dropRightWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), true, true)
		        : [];
		    }

		    /**
		     * Creates a slice of `array` excluding elements dropped from the beginning.
		     * Elements are dropped until `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.dropWhile(users, function(o) { return !o.active; });
		     * // => objects for ['pebbles']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.dropWhile(users, { 'user': 'barney', 'active': false });
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.dropWhile(users, ['active', false]);
		     * // => objects for ['pebbles']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.dropWhile(users, 'active');
		     * // => objects for ['barney', 'fred', 'pebbles']
		     */
		    function dropWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), true)
		        : [];
		    }

		    /**
		     * Fills elements of `array` with `value` from `start` up to, but not
		     * including, `end`.
		     *
		     * **Note:** This method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Array
		     * @param {Array} array The array to fill.
		     * @param {*} value The value to fill `array` with.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _.fill(array, 'a');
		     * console.log(array);
		     * // => ['a', 'a', 'a']
		     *
		     * _.fill(Array(3), 2);
		     * // => [2, 2, 2]
		     *
		     * _.fill([4, 6, 8, 10], '*', 1, 3);
		     * // => [4, '*', '*', 10]
		     */
		    function fill(array, value, start, end) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
		        start = 0;
		        end = length;
		      }
		      return baseFill(array, value, start, end);
		    }

		    /**
		     * This method is like `_.find` except that it returns the index of the first
		     * element `predicate` returns truthy for instead of the element itself.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {number} Returns the index of the found element, else `-1`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.findIndex(users, function(o) { return o.user == 'barney'; });
		     * // => 0
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findIndex(users, { 'user': 'fred', 'active': false });
		     * // => 1
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findIndex(users, ['active', false]);
		     * // => 0
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findIndex(users, 'active');
		     * // => 2
		     */
		    function findIndex(array, predicate, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = fromIndex == null ? 0 : toInteger(fromIndex);
		      if (index < 0) {
		        index = nativeMax(length + index, 0);
		      }
		      return baseFindIndex(array, getIteratee(predicate, 3), index);
		    }

		    /**
		     * This method is like `_.findIndex` except that it iterates over elements
		     * of `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=array.length-1] The index to search from.
		     * @returns {number} Returns the index of the found element, else `-1`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
		     * // => 2
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
		     * // => 0
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findLastIndex(users, ['active', false]);
		     * // => 2
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findLastIndex(users, 'active');
		     * // => 0
		     */
		    function findLastIndex(array, predicate, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = length - 1;
		      if (fromIndex !== undefined$1) {
		        index = toInteger(fromIndex);
		        index = fromIndex < 0
		          ? nativeMax(length + index, 0)
		          : nativeMin(index, length - 1);
		      }
		      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
		    }

		    /**
		     * Flattens `array` a single level deep.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * _.flatten([1, [2, [3, [4]], 5]]);
		     * // => [1, 2, [3, [4]], 5]
		     */
		    function flatten(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseFlatten(array, 1) : [];
		    }

		    /**
		     * Recursively flattens `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * _.flattenDeep([1, [2, [3, [4]], 5]]);
		     * // => [1, 2, 3, 4, 5]
		     */
		    function flattenDeep(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseFlatten(array, INFINITY) : [];
		    }

		    /**
		     * Recursively flatten `array` up to `depth` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.4.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @param {number} [depth=1] The maximum recursion depth.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * var array = [1, [2, [3, [4]], 5]];
		     *
		     * _.flattenDepth(array, 1);
		     * // => [1, 2, [3, [4]], 5]
		     *
		     * _.flattenDepth(array, 2);
		     * // => [1, 2, 3, [4], 5]
		     */
		    function flattenDepth(array, depth) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      depth = depth === undefined$1 ? 1 : toInteger(depth);
		      return baseFlatten(array, depth);
		    }

		    /**
		     * The inverse of `_.toPairs`; this method returns an object composed
		     * from key-value `pairs`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} pairs The key-value pairs.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.fromPairs([['a', 1], ['b', 2]]);
		     * // => { 'a': 1, 'b': 2 }
		     */
		    function fromPairs(pairs) {
		      var index = -1,
		          length = pairs == null ? 0 : pairs.length,
		          result = {};

		      while (++index < length) {
		        var pair = pairs[index];
		        result[pair[0]] = pair[1];
		      }
		      return result;
		    }

		    /**
		     * Gets the first element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @alias first
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {*} Returns the first element of `array`.
		     * @example
		     *
		     * _.head([1, 2, 3]);
		     * // => 1
		     *
		     * _.head([]);
		     * // => undefined
		     */
		    function head(array) {
		      return (array && array.length) ? array[0] : undefined$1;
		    }

		    /**
		     * Gets the index at which the first occurrence of `value` is found in `array`
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. If `fromIndex` is negative, it's used as the
		     * offset from the end of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.indexOf([1, 2, 1, 2], 2);
		     * // => 1
		     *
		     * // Search from the `fromIndex`.
		     * _.indexOf([1, 2, 1, 2], 2, 2);
		     * // => 3
		     */
		    function indexOf(array, value, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = fromIndex == null ? 0 : toInteger(fromIndex);
		      if (index < 0) {
		        index = nativeMax(length + index, 0);
		      }
		      return baseIndexOf(array, value, index);
		    }

		    /**
		     * Gets all but the last element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.initial([1, 2, 3]);
		     * // => [1, 2]
		     */
		    function initial(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseSlice(array, 0, -1) : [];
		    }

		    /**
		     * Creates an array of unique values that are included in all given arrays
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. The order and references of result values are
		     * determined by the first array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * _.intersection([2, 1], [2, 3]);
		     * // => [2]
		     */
		    var intersection = baseRest(function(arrays) {
		      var mapped = arrayMap(arrays, castArrayLikeObject);
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped)
		        : [];
		    });

		    /**
		     * This method is like `_.intersection` except that it accepts `iteratee`
		     * which is invoked for each element of each `arrays` to generate the criterion
		     * by which they're compared. The order and references of result values are
		     * determined by the first array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [2.1]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }]
		     */
		    var intersectionBy = baseRest(function(arrays) {
		      var iteratee = last(arrays),
		          mapped = arrayMap(arrays, castArrayLikeObject);

		      if (iteratee === last(mapped)) {
		        iteratee = undefined$1;
		      } else {
		        mapped.pop();
		      }
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped, getIteratee(iteratee, 2))
		        : [];
		    });

		    /**
		     * This method is like `_.intersection` except that it accepts `comparator`
		     * which is invoked to compare elements of `arrays`. The order and references
		     * of result values are determined by the first array. The comparator is
		     * invoked with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.intersectionWith(objects, others, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }]
		     */
		    var intersectionWith = baseRest(function(arrays) {
		      var comparator = last(arrays),
		          mapped = arrayMap(arrays, castArrayLikeObject);

		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      if (comparator) {
		        mapped.pop();
		      }
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped, undefined$1, comparator)
		        : [];
		    });

		    /**
		     * Converts all elements in `array` into a string separated by `separator`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to convert.
		     * @param {string} [separator=','] The element separator.
		     * @returns {string} Returns the joined string.
		     * @example
		     *
		     * _.join(['a', 'b', 'c'], '~');
		     * // => 'a~b~c'
		     */
		    function join(array, separator) {
		      return array == null ? '' : nativeJoin.call(array, separator);
		    }

		    /**
		     * Gets the last element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {*} Returns the last element of `array`.
		     * @example
		     *
		     * _.last([1, 2, 3]);
		     * // => 3
		     */
		    function last(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? array[length - 1] : undefined$1;
		    }

		    /**
		     * This method is like `_.indexOf` except that it iterates over elements of
		     * `array` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=array.length-1] The index to search from.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.lastIndexOf([1, 2, 1, 2], 2);
		     * // => 3
		     *
		     * // Search from the `fromIndex`.
		     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
		     * // => 1
		     */
		    function lastIndexOf(array, value, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = length;
		      if (fromIndex !== undefined$1) {
		        index = toInteger(fromIndex);
		        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
		      }
		      return value === value
		        ? strictLastIndexOf(array, value, index)
		        : baseFindIndex(array, baseIsNaN, index, true);
		    }

		    /**
		     * Gets the element at index `n` of `array`. If `n` is negative, the nth
		     * element from the end is returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.11.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=0] The index of the element to return.
		     * @returns {*} Returns the nth element of `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'd'];
		     *
		     * _.nth(array, 1);
		     * // => 'b'
		     *
		     * _.nth(array, -2);
		     * // => 'c';
		     */
		    function nth(array, n) {
		      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
		    }

		    /**
		     * Removes all given values from `array` using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
		     * to remove elements from an array by predicate.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {...*} [values] The values to remove.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
		     *
		     * _.pull(array, 'a', 'c');
		     * console.log(array);
		     * // => ['b', 'b']
		     */
		    var pull = baseRest(pullAll);

		    /**
		     * This method is like `_.pull` except that it accepts an array of values to remove.
		     *
		     * **Note:** Unlike `_.difference`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
		     *
		     * _.pullAll(array, ['a', 'c']);
		     * console.log(array);
		     * // => ['b', 'b']
		     */
		    function pullAll(array, values) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values)
		        : array;
		    }

		    /**
		     * This method is like `_.pullAll` except that it accepts `iteratee` which is
		     * invoked for each element of `array` and `values` to generate the criterion
		     * by which they're compared. The iteratee is invoked with one argument: (value).
		     *
		     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
		     *
		     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
		     * console.log(array);
		     * // => [{ 'x': 2 }]
		     */
		    function pullAllBy(array, values, iteratee) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values, getIteratee(iteratee, 2))
		        : array;
		    }

		    /**
		     * This method is like `_.pullAll` except that it accepts `comparator` which
		     * is invoked to compare elements of `array` to `values`. The comparator is
		     * invoked with two arguments: (arrVal, othVal).
		     *
		     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
		     *
		     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
		     * console.log(array);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
		     */
		    function pullAllWith(array, values, comparator) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values, undefined$1, comparator)
		        : array;
		    }

		    /**
		     * Removes elements from `array` corresponding to `indexes` and returns an
		     * array of removed elements.
		     *
		     * **Note:** Unlike `_.at`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
		     * @returns {Array} Returns the new array of removed elements.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'd'];
		     * var pulled = _.pullAt(array, [1, 3]);
		     *
		     * console.log(array);
		     * // => ['a', 'c']
		     *
		     * console.log(pulled);
		     * // => ['b', 'd']
		     */
		    var pullAt = flatRest(function(array, indexes) {
		      var length = array == null ? 0 : array.length,
		          result = baseAt(array, indexes);

		      basePullAt(array, arrayMap(indexes, function(index) {
		        return isIndex(index, length) ? +index : index;
		      }).sort(compareAscending));

		      return result;
		    });

		    /**
		     * Removes all elements from `array` that `predicate` returns truthy for
		     * and returns an array of the removed elements. The predicate is invoked
		     * with three arguments: (value, index, array).
		     *
		     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
		     * to pull elements from an array by value.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new array of removed elements.
		     * @example
		     *
		     * var array = [1, 2, 3, 4];
		     * var evens = _.remove(array, function(n) {
		     *   return n % 2 == 0;
		     * });
		     *
		     * console.log(array);
		     * // => [1, 3]
		     *
		     * console.log(evens);
		     * // => [2, 4]
		     */
		    function remove(array, predicate) {
		      var result = [];
		      if (!(array && array.length)) {
		        return result;
		      }
		      var index = -1,
		          indexes = [],
		          length = array.length;

		      predicate = getIteratee(predicate, 3);
		      while (++index < length) {
		        var value = array[index];
		        if (predicate(value, index, array)) {
		          result.push(value);
		          indexes.push(index);
		        }
		      }
		      basePullAt(array, indexes);
		      return result;
		    }

		    /**
		     * Reverses `array` so that the first element becomes the last, the second
		     * element becomes the second to last, and so on.
		     *
		     * **Note:** This method mutates `array` and is based on
		     * [`Array#reverse`](https://mdn.io/Array/reverse).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _.reverse(array);
		     * // => [3, 2, 1]
		     *
		     * console.log(array);
		     * // => [3, 2, 1]
		     */
		    function reverse(array) {
		      return array == null ? array : nativeReverse.call(array);
		    }

		    /**
		     * Creates a slice of `array` from `start` up to, but not including, `end`.
		     *
		     * **Note:** This method is used instead of
		     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
		     * returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to slice.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function slice(array, start, end) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
		        start = 0;
		        end = length;
		      }
		      else {
		        start = start == null ? 0 : toInteger(start);
		        end = end === undefined$1 ? length : toInteger(end);
		      }
		      return baseSlice(array, start, end);
		    }

		    /**
		     * Uses a binary search to determine the lowest index at which `value`
		     * should be inserted into `array` in order to maintain its sort order.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * _.sortedIndex([30, 50], 40);
		     * // => 1
		     */
		    function sortedIndex(array, value) {
		      return baseSortedIndex(array, value);
		    }

		    /**
		     * This method is like `_.sortedIndex` except that it accepts `iteratee`
		     * which is invoked for `value` and each element of `array` to compute their
		     * sort ranking. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * var objects = [{ 'x': 4 }, { 'x': 5 }];
		     *
		     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
		     * // => 0
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
		     * // => 0
		     */
		    function sortedIndexBy(array, value, iteratee) {
		      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
		    }

		    /**
		     * This method is like `_.indexOf` except that it performs a binary
		     * search on a sorted `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
		     * // => 1
		     */
		    function sortedIndexOf(array, value) {
		      var length = array == null ? 0 : array.length;
		      if (length) {
		        var index = baseSortedIndex(array, value);
		        if (index < length && eq(array[index], value)) {
		          return index;
		        }
		      }
		      return -1;
		    }

		    /**
		     * This method is like `_.sortedIndex` except that it returns the highest
		     * index at which `value` should be inserted into `array` in order to
		     * maintain its sort order.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
		     * // => 4
		     */
		    function sortedLastIndex(array, value) {
		      return baseSortedIndex(array, value, true);
		    }

		    /**
		     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
		     * which is invoked for `value` and each element of `array` to compute their
		     * sort ranking. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * var objects = [{ 'x': 4 }, { 'x': 5 }];
		     *
		     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
		     * // => 1
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
		     * // => 1
		     */
		    function sortedLastIndexBy(array, value, iteratee) {
		      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
		    }

		    /**
		     * This method is like `_.lastIndexOf` except that it performs a binary
		     * search on a sorted `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
		     * // => 3
		     */
		    function sortedLastIndexOf(array, value) {
		      var length = array == null ? 0 : array.length;
		      if (length) {
		        var index = baseSortedIndex(array, value, true) - 1;
		        if (eq(array[index], value)) {
		          return index;
		        }
		      }
		      return -1;
		    }

		    /**
		     * This method is like `_.uniq` except that it's designed and optimized
		     * for sorted arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.sortedUniq([1, 1, 2]);
		     * // => [1, 2]
		     */
		    function sortedUniq(array) {
		      return (array && array.length)
		        ? baseSortedUniq(array)
		        : [];
		    }

		    /**
		     * This method is like `_.uniqBy` except that it's designed and optimized
		     * for sorted arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
		     * // => [1.1, 2.3]
		     */
		    function sortedUniqBy(array, iteratee) {
		      return (array && array.length)
		        ? baseSortedUniq(array, getIteratee(iteratee, 2))
		        : [];
		    }

		    /**
		     * Gets all but the first element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.tail([1, 2, 3]);
		     * // => [2, 3]
		     */
		    function tail(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseSlice(array, 1, length) : [];
		    }

		    /**
		     * Creates a slice of `array` with `n` elements taken from the beginning.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to take.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.take([1, 2, 3]);
		     * // => [1]
		     *
		     * _.take([1, 2, 3], 2);
		     * // => [1, 2]
		     *
		     * _.take([1, 2, 3], 5);
		     * // => [1, 2, 3]
		     *
		     * _.take([1, 2, 3], 0);
		     * // => []
		     */
		    function take(array, n, guard) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      return baseSlice(array, 0, n < 0 ? 0 : n);
		    }

		    /**
		     * Creates a slice of `array` with `n` elements taken from the end.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to take.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.takeRight([1, 2, 3]);
		     * // => [3]
		     *
		     * _.takeRight([1, 2, 3], 2);
		     * // => [2, 3]
		     *
		     * _.takeRight([1, 2, 3], 5);
		     * // => [1, 2, 3]
		     *
		     * _.takeRight([1, 2, 3], 0);
		     * // => []
		     */
		    function takeRight(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      n = length - n;
		      return baseSlice(array, n < 0 ? 0 : n, length);
		    }

		    /**
		     * Creates a slice of `array` with elements taken from the end. Elements are
		     * taken until `predicate` returns falsey. The predicate is invoked with
		     * three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.takeRightWhile(users, function(o) { return !o.active; });
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
		     * // => objects for ['pebbles']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.takeRightWhile(users, ['active', false]);
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.takeRightWhile(users, 'active');
		     * // => []
		     */
		    function takeRightWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), false, true)
		        : [];
		    }

		    /**
		     * Creates a slice of `array` with elements taken from the beginning. Elements
		     * are taken until `predicate` returns falsey. The predicate is invoked with
		     * three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.takeWhile(users, function(o) { return !o.active; });
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.takeWhile(users, { 'user': 'barney', 'active': false });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.takeWhile(users, ['active', false]);
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.takeWhile(users, 'active');
		     * // => []
		     */
		    function takeWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3))
		        : [];
		    }

		    /**
		     * Creates an array of unique values, in order, from all given arrays using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * _.union([2], [1, 2]);
		     * // => [2, 1]
		     */
		    var union = baseRest(function(arrays) {
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
		    });

		    /**
		     * This method is like `_.union` except that it accepts `iteratee` which is
		     * invoked for each element of each `arrays` to generate the criterion by
		     * which uniqueness is computed. Result values are chosen from the first
		     * array in which the value occurs. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
		     * // => [2.1, 1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }, { 'x': 2 }]
		     */
		    var unionBy = baseRest(function(arrays) {
		      var iteratee = last(arrays);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
		    });

		    /**
		     * This method is like `_.union` except that it accepts `comparator` which
		     * is invoked to compare elements of `arrays`. Result values are chosen from
		     * the first array in which the value occurs. The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.unionWith(objects, others, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
		     */
		    var unionWith = baseRest(function(arrays) {
		      var comparator = last(arrays);
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
		    });

		    /**
		     * Creates a duplicate-free version of an array, using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons, in which only the first occurrence of each element
		     * is kept. The order of result values is determined by the order they occur
		     * in the array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.uniq([2, 1, 2]);
		     * // => [2, 1]
		     */
		    function uniq(array) {
		      return (array && array.length) ? baseUniq(array) : [];
		    }

		    /**
		     * This method is like `_.uniq` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * uniqueness is computed. The order of result values is determined by the
		     * order they occur in the array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
		     * // => [2.1, 1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }, { 'x': 2 }]
		     */
		    function uniqBy(array, iteratee) {
		      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
		    }

		    /**
		     * This method is like `_.uniq` except that it accepts `comparator` which
		     * is invoked to compare elements of `array`. The order of result values is
		     * determined by the order they occur in the array.The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.uniqWith(objects, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
		     */
		    function uniqWith(array, comparator) {
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
		    }

		    /**
		     * This method is like `_.zip` except that it accepts an array of grouped
		     * elements and creates an array regrouping the elements to their pre-zip
		     * configuration.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.2.0
		     * @category Array
		     * @param {Array} array The array of grouped elements to process.
		     * @returns {Array} Returns the new array of regrouped elements.
		     * @example
		     *
		     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
		     * // => [['a', 1, true], ['b', 2, false]]
		     *
		     * _.unzip(zipped);
		     * // => [['a', 'b'], [1, 2], [true, false]]
		     */
		    function unzip(array) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      var length = 0;
		      array = arrayFilter(array, function(group) {
		        if (isArrayLikeObject(group)) {
		          length = nativeMax(group.length, length);
		          return true;
		        }
		      });
		      return baseTimes(length, function(index) {
		        return arrayMap(array, baseProperty(index));
		      });
		    }

		    /**
		     * This method is like `_.unzip` except that it accepts `iteratee` to specify
		     * how regrouped values should be combined. The iteratee is invoked with the
		     * elements of each group: (...group).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Array
		     * @param {Array} array The array of grouped elements to process.
		     * @param {Function} [iteratee=_.identity] The function to combine
		     *  regrouped values.
		     * @returns {Array} Returns the new array of regrouped elements.
		     * @example
		     *
		     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
		     * // => [[1, 10, 100], [2, 20, 200]]
		     *
		     * _.unzipWith(zipped, _.add);
		     * // => [3, 30, 300]
		     */
		    function unzipWith(array, iteratee) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      var result = unzip(array);
		      if (iteratee == null) {
		        return result;
		      }
		      return arrayMap(result, function(group) {
		        return apply(iteratee, undefined$1, group);
		      });
		    }

		    /**
		     * Creates an array excluding all given values using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * **Note:** Unlike `_.pull`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...*} [values] The values to exclude.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.difference, _.xor
		     * @example
		     *
		     * _.without([2, 1, 2, 3], 1, 2);
		     * // => [3]
		     */
		    var without = baseRest(function(array, values) {
		      return isArrayLikeObject(array)
		        ? baseDifference(array, values)
		        : [];
		    });

		    /**
		     * Creates an array of unique values that is the
		     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
		     * of the given arrays. The order of result values is determined by the order
		     * they occur in the arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.difference, _.without
		     * @example
		     *
		     * _.xor([2, 1], [2, 3]);
		     * // => [1, 3]
		     */
		    var xor = baseRest(function(arrays) {
		      return baseXor(arrayFilter(arrays, isArrayLikeObject));
		    });

		    /**
		     * This method is like `_.xor` except that it accepts `iteratee` which is
		     * invoked for each element of each `arrays` to generate the criterion by
		     * which by which they're compared. The order of result values is determined
		     * by the order they occur in the arrays. The iteratee is invoked with one
		     * argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [1.2, 3.4]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 2 }]
		     */
		    var xorBy = baseRest(function(arrays) {
		      var iteratee = last(arrays);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
		    });

		    /**
		     * This method is like `_.xor` except that it accepts `comparator` which is
		     * invoked to compare elements of `arrays`. The order of result values is
		     * determined by the order they occur in the arrays. The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.xorWith(objects, others, _.isEqual);
		     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
		     */
		    var xorWith = baseRest(function(arrays) {
		      var comparator = last(arrays);
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
		    });

		    /**
		     * Creates an array of grouped elements, the first of which contains the
		     * first elements of the given arrays, the second of which contains the
		     * second elements of the given arrays, and so on.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to process.
		     * @returns {Array} Returns the new array of grouped elements.
		     * @example
		     *
		     * _.zip(['a', 'b'], [1, 2], [true, false]);
		     * // => [['a', 1, true], ['b', 2, false]]
		     */
		    var zip = baseRest(unzip);

		    /**
		     * This method is like `_.fromPairs` except that it accepts two arrays,
		     * one of property identifiers and one of corresponding values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.4.0
		     * @category Array
		     * @param {Array} [props=[]] The property identifiers.
		     * @param {Array} [values=[]] The property values.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.zipObject(['a', 'b'], [1, 2]);
		     * // => { 'a': 1, 'b': 2 }
		     */
		    function zipObject(props, values) {
		      return baseZipObject(props || [], values || [], assignValue);
		    }

		    /**
		     * This method is like `_.zipObject` except that it supports property paths.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.1.0
		     * @category Array
		     * @param {Array} [props=[]] The property identifiers.
		     * @param {Array} [values=[]] The property values.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
		     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
		     */
		    function zipObjectDeep(props, values) {
		      return baseZipObject(props || [], values || [], baseSet);
		    }

		    /**
		     * This method is like `_.zip` except that it accepts `iteratee` to specify
		     * how grouped values should be combined. The iteratee is invoked with the
		     * elements of each group: (...group).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to process.
		     * @param {Function} [iteratee=_.identity] The function to combine
		     *  grouped values.
		     * @returns {Array} Returns the new array of grouped elements.
		     * @example
		     *
		     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
		     *   return a + b + c;
		     * });
		     * // => [111, 222]
		     */
		    var zipWith = baseRest(function(arrays) {
		      var length = arrays.length,
		          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

		      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
		      return unzipWith(arrays, iteratee);
		    });

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
		     * chain sequences enabled. The result of such sequences must be unwrapped
		     * with `_#value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.3.0
		     * @category Seq
		     * @param {*} value The value to wrap.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36 },
		     *   { 'user': 'fred',    'age': 40 },
		     *   { 'user': 'pebbles', 'age': 1 }
		     * ];
		     *
		     * var youngest = _
		     *   .chain(users)
		     *   .sortBy('age')
		     *   .map(function(o) {
		     *     return o.user + ' is ' + o.age;
		     *   })
		     *   .head()
		     *   .value();
		     * // => 'pebbles is 1'
		     */
		    function chain(value) {
		      var result = lodash(value);
		      result.__chain__ = true;
		      return result;
		    }

		    /**
		     * This method invokes `interceptor` and returns `value`. The interceptor
		     * is invoked with one argument; (value). The purpose of this method is to
		     * "tap into" a method chain sequence in order to modify intermediate results.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @param {*} value The value to provide to `interceptor`.
		     * @param {Function} interceptor The function to invoke.
		     * @returns {*} Returns `value`.
		     * @example
		     *
		     * _([1, 2, 3])
		     *  .tap(function(array) {
		     *    // Mutate input array.
		     *    array.pop();
		     *  })
		     *  .reverse()
		     *  .value();
		     * // => [2, 1]
		     */
		    function tap(value, interceptor) {
		      interceptor(value);
		      return value;
		    }

		    /**
		     * This method is like `_.tap` except that it returns the result of `interceptor`.
		     * The purpose of this method is to "pass thru" values replacing intermediate
		     * results in a method chain sequence.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Seq
		     * @param {*} value The value to provide to `interceptor`.
		     * @param {Function} interceptor The function to invoke.
		     * @returns {*} Returns the result of `interceptor`.
		     * @example
		     *
		     * _('  abc  ')
		     *  .chain()
		     *  .trim()
		     *  .thru(function(value) {
		     *    return [value];
		     *  })
		     *  .value();
		     * // => ['abc']
		     */
		    function thru(value, interceptor) {
		      return interceptor(value);
		    }

		    /**
		     * This method is the wrapper version of `_.at`.
		     *
		     * @name at
		     * @memberOf _
		     * @since 1.0.0
		     * @category Seq
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
		     *
		     * _(object).at(['a[0].b.c', 'a[1]']).value();
		     * // => [3, 4]
		     */
		    var wrapperAt = flatRest(function(paths) {
		      var length = paths.length,
		          start = length ? paths[0] : 0,
		          value = this.__wrapped__,
		          interceptor = function(object) { return baseAt(object, paths); };

		      if (length > 1 || this.__actions__.length ||
		          !(value instanceof LazyWrapper) || !isIndex(start)) {
		        return this.thru(interceptor);
		      }
		      value = value.slice(start, +start + (length ? 1 : 0));
		      value.__actions__.push({
		        'func': thru,
		        'args': [interceptor],
		        'thisArg': undefined$1
		      });
		      return new LodashWrapper(value, this.__chain__).thru(function(array) {
		        if (length && !array.length) {
		          array.push(undefined$1);
		        }
		        return array;
		      });
		    });

		    /**
		     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
		     *
		     * @name chain
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36 },
		     *   { 'user': 'fred',   'age': 40 }
		     * ];
		     *
		     * // A sequence without explicit chaining.
		     * _(users).head();
		     * // => { 'user': 'barney', 'age': 36 }
		     *
		     * // A sequence with explicit chaining.
		     * _(users)
		     *   .chain()
		     *   .head()
		     *   .pick('user')
		     *   .value();
		     * // => { 'user': 'barney' }
		     */
		    function wrapperChain() {
		      return chain(this);
		    }

		    /**
		     * Executes the chain sequence and returns the wrapped result.
		     *
		     * @name commit
		     * @memberOf _
		     * @since 3.2.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var array = [1, 2];
		     * var wrapped = _(array).push(3);
		     *
		     * console.log(array);
		     * // => [1, 2]
		     *
		     * wrapped = wrapped.commit();
		     * console.log(array);
		     * // => [1, 2, 3]
		     *
		     * wrapped.last();
		     * // => 3
		     *
		     * console.log(array);
		     * // => [1, 2, 3]
		     */
		    function wrapperCommit() {
		      return new LodashWrapper(this.value(), this.__chain__);
		    }

		    /**
		     * Gets the next value on a wrapped object following the
		     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
		     *
		     * @name next
		     * @memberOf _
		     * @since 4.0.0
		     * @category Seq
		     * @returns {Object} Returns the next iterator value.
		     * @example
		     *
		     * var wrapped = _([1, 2]);
		     *
		     * wrapped.next();
		     * // => { 'done': false, 'value': 1 }
		     *
		     * wrapped.next();
		     * // => { 'done': false, 'value': 2 }
		     *
		     * wrapped.next();
		     * // => { 'done': true, 'value': undefined }
		     */
		    function wrapperNext() {
		      if (this.__values__ === undefined$1) {
		        this.__values__ = toArray(this.value());
		      }
		      var done = this.__index__ >= this.__values__.length,
		          value = done ? undefined$1 : this.__values__[this.__index__++];

		      return { 'done': done, 'value': value };
		    }

		    /**
		     * Enables the wrapper to be iterable.
		     *
		     * @name Symbol.iterator
		     * @memberOf _
		     * @since 4.0.0
		     * @category Seq
		     * @returns {Object} Returns the wrapper object.
		     * @example
		     *
		     * var wrapped = _([1, 2]);
		     *
		     * wrapped[Symbol.iterator]() === wrapped;
		     * // => true
		     *
		     * Array.from(wrapped);
		     * // => [1, 2]
		     */
		    function wrapperToIterator() {
		      return this;
		    }

		    /**
		     * Creates a clone of the chain sequence planting `value` as the wrapped value.
		     *
		     * @name plant
		     * @memberOf _
		     * @since 3.2.0
		     * @category Seq
		     * @param {*} value The value to plant.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var wrapped = _([1, 2]).map(square);
		     * var other = wrapped.plant([3, 4]);
		     *
		     * other.value();
		     * // => [9, 16]
		     *
		     * wrapped.value();
		     * // => [1, 4]
		     */
		    function wrapperPlant(value) {
		      var result,
		          parent = this;

		      while (parent instanceof baseLodash) {
		        var clone = wrapperClone(parent);
		        clone.__index__ = 0;
		        clone.__values__ = undefined$1;
		        if (result) {
		          previous.__wrapped__ = clone;
		        } else {
		          result = clone;
		        }
		        var previous = clone;
		        parent = parent.__wrapped__;
		      }
		      previous.__wrapped__ = value;
		      return result;
		    }

		    /**
		     * This method is the wrapper version of `_.reverse`.
		     *
		     * **Note:** This method mutates the wrapped array.
		     *
		     * @name reverse
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _(array).reverse().value()
		     * // => [3, 2, 1]
		     *
		     * console.log(array);
		     * // => [3, 2, 1]
		     */
		    function wrapperReverse() {
		      var value = this.__wrapped__;
		      if (value instanceof LazyWrapper) {
		        var wrapped = value;
		        if (this.__actions__.length) {
		          wrapped = new LazyWrapper(this);
		        }
		        wrapped = wrapped.reverse();
		        wrapped.__actions__.push({
		          'func': thru,
		          'args': [reverse],
		          'thisArg': undefined$1
		        });
		        return new LodashWrapper(wrapped, this.__chain__);
		      }
		      return this.thru(reverse);
		    }

		    /**
		     * Executes the chain sequence to resolve the unwrapped value.
		     *
		     * @name value
		     * @memberOf _
		     * @since 0.1.0
		     * @alias toJSON, valueOf
		     * @category Seq
		     * @returns {*} Returns the resolved unwrapped value.
		     * @example
		     *
		     * _([1, 2, 3]).value();
		     * // => [1, 2, 3]
		     */
		    function wrapperValue() {
		      return baseWrapperValue(this.__wrapped__, this.__actions__);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The corresponding value of
		     * each key is the number of times the key was returned by `iteratee`. The
		     * iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * _.countBy([6.1, 4.2, 6.3], Math.floor);
		     * // => { '4': 1, '6': 2 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.countBy(['one', 'two', 'three'], 'length');
		     * // => { '3': 2, '5': 1 }
		     */
		    var countBy = createAggregator(function(result, value, key) {
		      if (hasOwnProperty.call(result, key)) {
		        ++result[key];
		      } else {
		        baseAssignValue(result, key, 1);
		      }
		    });

		    /**
		     * Checks if `predicate` returns truthy for **all** elements of `collection`.
		     * Iteration is stopped once `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index|key, collection).
		     *
		     * **Note:** This method returns `true` for
		     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
		     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
		     * elements of empty collections.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {boolean} Returns `true` if all elements pass the predicate check,
		     *  else `false`.
		     * @example
		     *
		     * _.every([true, 1, null, 'yes'], Boolean);
		     * // => false
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': false },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.every(users, { 'user': 'barney', 'active': false });
		     * // => false
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.every(users, ['active', false]);
		     * // => true
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.every(users, 'active');
		     * // => false
		     */
		    function every(collection, predicate, guard) {
		      var func = isArray(collection) ? arrayEvery : baseEvery;
		      if (guard && isIterateeCall(collection, predicate, guard)) {
		        predicate = undefined$1;
		      }
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Iterates over elements of `collection`, returning an array of all elements
		     * `predicate` returns truthy for. The predicate is invoked with three
		     * arguments: (value, index|key, collection).
		     *
		     * **Note:** Unlike `_.remove`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     * @see _.reject
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': true },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * _.filter(users, function(o) { return !o.active; });
		     * // => objects for ['fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.filter(users, { 'age': 36, 'active': true });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.filter(users, ['active', false]);
		     * // => objects for ['fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.filter(users, 'active');
		     * // => objects for ['barney']
		     *
		     * // Combining several predicates using `_.overEvery` or `_.overSome`.
		     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
		     * // => objects for ['fred', 'barney']
		     */
		    function filter(collection, predicate) {
		      var func = isArray(collection) ? arrayFilter : baseFilter;
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Iterates over elements of `collection`, returning the first element
		     * `predicate` returns truthy for. The predicate is invoked with three
		     * arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {*} Returns the matched element, else `undefined`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36, 'active': true },
		     *   { 'user': 'fred',    'age': 40, 'active': false },
		     *   { 'user': 'pebbles', 'age': 1,  'active': true }
		     * ];
		     *
		     * _.find(users, function(o) { return o.age < 40; });
		     * // => object for 'barney'
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.find(users, { 'age': 1, 'active': true });
		     * // => object for 'pebbles'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.find(users, ['active', false]);
		     * // => object for 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.find(users, 'active');
		     * // => object for 'barney'
		     */
		    var find = createFind(findIndex);

		    /**
		     * This method is like `_.find` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=collection.length-1] The index to search from.
		     * @returns {*} Returns the matched element, else `undefined`.
		     * @example
		     *
		     * _.findLast([1, 2, 3, 4], function(n) {
		     *   return n % 2 == 1;
		     * });
		     * // => 3
		     */
		    var findLast = createFind(findLastIndex);

		    /**
		     * Creates a flattened array of values by running each element in `collection`
		     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
		     * with three arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [n, n];
		     * }
		     *
		     * _.flatMap([1, 2], duplicate);
		     * // => [1, 1, 2, 2]
		     */
		    function flatMap(collection, iteratee) {
		      return baseFlatten(map(collection, iteratee), 1);
		    }

		    /**
		     * This method is like `_.flatMap` except that it recursively flattens the
		     * mapped results.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [[[n, n]]];
		     * }
		     *
		     * _.flatMapDeep([1, 2], duplicate);
		     * // => [1, 1, 2, 2]
		     */
		    function flatMapDeep(collection, iteratee) {
		      return baseFlatten(map(collection, iteratee), INFINITY);
		    }

		    /**
		     * This method is like `_.flatMap` except that it recursively flattens the
		     * mapped results up to `depth` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {number} [depth=1] The maximum recursion depth.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [[[n, n]]];
		     * }
		     *
		     * _.flatMapDepth([1, 2], duplicate, 2);
		     * // => [[1, 1], [2, 2]]
		     */
		    function flatMapDepth(collection, iteratee, depth) {
		      depth = depth === undefined$1 ? 1 : toInteger(depth);
		      return baseFlatten(map(collection, iteratee), depth);
		    }

		    /**
		     * Iterates over elements of `collection` and invokes `iteratee` for each element.
		     * The iteratee is invoked with three arguments: (value, index|key, collection).
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * **Note:** As with other "Collections" methods, objects with a "length"
		     * property are iterated like arrays. To avoid this behavior use `_.forIn`
		     * or `_.forOwn` for object iteration.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @alias each
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     * @see _.forEachRight
		     * @example
		     *
		     * _.forEach([1, 2], function(value) {
		     *   console.log(value);
		     * });
		     * // => Logs `1` then `2`.
		     *
		     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
		     */
		    function forEach(collection, iteratee) {
		      var func = isArray(collection) ? arrayEach : baseEach;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.forEach` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @alias eachRight
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     * @see _.forEach
		     * @example
		     *
		     * _.forEachRight([1, 2], function(value) {
		     *   console.log(value);
		     * });
		     * // => Logs `2` then `1`.
		     */
		    function forEachRight(collection, iteratee) {
		      var func = isArray(collection) ? arrayEachRight : baseEachRight;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The order of grouped values
		     * is determined by the order they occur in `collection`. The corresponding
		     * value of each key is an array of elements responsible for generating the
		     * key. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
		     * // => { '4': [4.2], '6': [6.1, 6.3] }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.groupBy(['one', 'two', 'three'], 'length');
		     * // => { '3': ['one', 'two'], '5': ['three'] }
		     */
		    var groupBy = createAggregator(function(result, value, key) {
		      if (hasOwnProperty.call(result, key)) {
		        result[key].push(value);
		      } else {
		        baseAssignValue(result, key, [value]);
		      }
		    });

		    /**
		     * Checks if `value` is in `collection`. If `collection` is a string, it's
		     * checked for a substring of `value`, otherwise
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * is used for equality comparisons. If `fromIndex` is negative, it's used as
		     * the offset from the end of `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object|string} collection The collection to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
		     * @returns {boolean} Returns `true` if `value` is found, else `false`.
		     * @example
		     *
		     * _.includes([1, 2, 3], 1);
		     * // => true
		     *
		     * _.includes([1, 2, 3], 1, 2);
		     * // => false
		     *
		     * _.includes({ 'a': 1, 'b': 2 }, 1);
		     * // => true
		     *
		     * _.includes('abcd', 'bc');
		     * // => true
		     */
		    function includes(collection, value, fromIndex, guard) {
		      collection = isArrayLike(collection) ? collection : values(collection);
		      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

		      var length = collection.length;
		      if (fromIndex < 0) {
		        fromIndex = nativeMax(length + fromIndex, 0);
		      }
		      return isString(collection)
		        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
		        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
		    }

		    /**
		     * Invokes the method at `path` of each element in `collection`, returning
		     * an array of the results of each invoked method. Any additional arguments
		     * are provided to each invoked method. If `path` is a function, it's invoked
		     * for, and `this` bound to, each element in `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Array|Function|string} path The path of the method to invoke or
		     *  the function invoked per iteration.
		     * @param {...*} [args] The arguments to invoke each method with.
		     * @returns {Array} Returns the array of results.
		     * @example
		     *
		     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
		     * // => [[1, 5, 7], [1, 2, 3]]
		     *
		     * _.invokeMap([123, 456], String.prototype.split, '');
		     * // => [['1', '2', '3'], ['4', '5', '6']]
		     */
		    var invokeMap = baseRest(function(collection, path, args) {
		      var index = -1,
		          isFunc = typeof path == 'function',
		          result = isArrayLike(collection) ? Array(collection.length) : [];

		      baseEach(collection, function(value) {
		        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
		      });
		      return result;
		    });

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The corresponding value of
		     * each key is the last element responsible for generating the key. The
		     * iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * var array = [
		     *   { 'dir': 'left', 'code': 97 },
		     *   { 'dir': 'right', 'code': 100 }
		     * ];
		     *
		     * _.keyBy(array, function(o) {
		     *   return String.fromCharCode(o.code);
		     * });
		     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
		     *
		     * _.keyBy(array, 'dir');
		     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
		     */
		    var keyBy = createAggregator(function(result, value, key) {
		      baseAssignValue(result, key, value);
		    });

		    /**
		     * Creates an array of values by running each element in `collection` thru
		     * `iteratee`. The iteratee is invoked with three arguments:
		     * (value, index|key, collection).
		     *
		     * Many lodash methods are guarded to work as iteratees for methods like
		     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
		     *
		     * The guarded methods are:
		     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
		     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
		     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
		     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new mapped array.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * _.map([4, 8], square);
		     * // => [16, 64]
		     *
		     * _.map({ 'a': 4, 'b': 8 }, square);
		     * // => [16, 64] (iteration order is not guaranteed)
		     *
		     * var users = [
		     *   { 'user': 'barney' },
		     *   { 'user': 'fred' }
		     * ];
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.map(users, 'user');
		     * // => ['barney', 'fred']
		     */
		    function map(collection, iteratee) {
		      var func = isArray(collection) ? arrayMap : baseMap;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.sortBy` except that it allows specifying the sort
		     * orders of the iteratees to sort by. If `orders` is unspecified, all values
		     * are sorted in ascending order. Otherwise, specify an order of "desc" for
		     * descending or "asc" for ascending sort order of corresponding values.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
		     *  The iteratees to sort by.
		     * @param {string[]} [orders] The sort orders of `iteratees`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
		     * @returns {Array} Returns the new sorted array.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'fred',   'age': 48 },
		     *   { 'user': 'barney', 'age': 34 },
		     *   { 'user': 'fred',   'age': 40 },
		     *   { 'user': 'barney', 'age': 36 }
		     * ];
		     *
		     * // Sort by `user` in ascending order and by `age` in descending order.
		     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
		     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
		     */
		    function orderBy(collection, iteratees, orders, guard) {
		      if (collection == null) {
		        return [];
		      }
		      if (!isArray(iteratees)) {
		        iteratees = iteratees == null ? [] : [iteratees];
		      }
		      orders = guard ? undefined$1 : orders;
		      if (!isArray(orders)) {
		        orders = orders == null ? [] : [orders];
		      }
		      return baseOrderBy(collection, iteratees, orders);
		    }

		    /**
		     * Creates an array of elements split into two groups, the first of which
		     * contains elements `predicate` returns truthy for, the second of which
		     * contains elements `predicate` returns falsey for. The predicate is
		     * invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the array of grouped elements.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36, 'active': false },
		     *   { 'user': 'fred',    'age': 40, 'active': true },
		     *   { 'user': 'pebbles', 'age': 1,  'active': false }
		     * ];
		     *
		     * _.partition(users, function(o) { return o.active; });
		     * // => objects for [['fred'], ['barney', 'pebbles']]
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.partition(users, { 'age': 1, 'active': false });
		     * // => objects for [['pebbles'], ['barney', 'fred']]
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.partition(users, ['active', false]);
		     * // => objects for [['barney', 'pebbles'], ['fred']]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.partition(users, 'active');
		     * // => objects for [['fred'], ['barney', 'pebbles']]
		     */
		    var partition = createAggregator(function(result, value, key) {
		      result[key ? 0 : 1].push(value);
		    }, function() { return [[], []]; });

		    /**
		     * Reduces `collection` to a value which is the accumulated result of running
		     * each element in `collection` thru `iteratee`, where each successive
		     * invocation is supplied the return value of the previous. If `accumulator`
		     * is not given, the first element of `collection` is used as the initial
		     * value. The iteratee is invoked with four arguments:
		     * (accumulator, value, index|key, collection).
		     *
		     * Many lodash methods are guarded to work as iteratees for methods like
		     * `_.reduce`, `_.reduceRight`, and `_.transform`.
		     *
		     * The guarded methods are:
		     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
		     * and `sortBy`
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The initial value.
		     * @returns {*} Returns the accumulated value.
		     * @see _.reduceRight
		     * @example
		     *
		     * _.reduce([1, 2], function(sum, n) {
		     *   return sum + n;
		     * }, 0);
		     * // => 3
		     *
		     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
		     *   (result[value] || (result[value] = [])).push(key);
		     *   return result;
		     * }, {});
		     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
		     */
		    function reduce(collection, iteratee, accumulator) {
		      var func = isArray(collection) ? arrayReduce : baseReduce,
		          initAccum = arguments.length < 3;

		      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
		    }

		    /**
		     * This method is like `_.reduce` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The initial value.
		     * @returns {*} Returns the accumulated value.
		     * @see _.reduce
		     * @example
		     *
		     * var array = [[0, 1], [2, 3], [4, 5]];
		     *
		     * _.reduceRight(array, function(flattened, other) {
		     *   return flattened.concat(other);
		     * }, []);
		     * // => [4, 5, 2, 3, 0, 1]
		     */
		    function reduceRight(collection, iteratee, accumulator) {
		      var func = isArray(collection) ? arrayReduceRight : baseReduce,
		          initAccum = arguments.length < 3;

		      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
		    }

		    /**
		     * The opposite of `_.filter`; this method returns the elements of `collection`
		     * that `predicate` does **not** return truthy for.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     * @see _.filter
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': false },
		     *   { 'user': 'fred',   'age': 40, 'active': true }
		     * ];
		     *
		     * _.reject(users, function(o) { return !o.active; });
		     * // => objects for ['fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.reject(users, { 'age': 40, 'active': true });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.reject(users, ['active', false]);
		     * // => objects for ['fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.reject(users, 'active');
		     * // => objects for ['barney']
		     */
		    function reject(collection, predicate) {
		      var func = isArray(collection) ? arrayFilter : baseFilter;
		      return func(collection, negate(getIteratee(predicate, 3)));
		    }

		    /**
		     * Gets a random element from `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to sample.
		     * @returns {*} Returns the random element.
		     * @example
		     *
		     * _.sample([1, 2, 3, 4]);
		     * // => 2
		     */
		    function sample(collection) {
		      var func = isArray(collection) ? arraySample : baseSample;
		      return func(collection);
		    }

		    /**
		     * Gets `n` random elements at unique keys from `collection` up to the
		     * size of `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to sample.
		     * @param {number} [n=1] The number of elements to sample.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the random elements.
		     * @example
		     *
		     * _.sampleSize([1, 2, 3], 2);
		     * // => [3, 1]
		     *
		     * _.sampleSize([1, 2, 3], 4);
		     * // => [2, 3, 1]
		     */
		    function sampleSize(collection, n, guard) {
		      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
		        n = 1;
		      } else {
		        n = toInteger(n);
		      }
		      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
		      return func(collection, n);
		    }

		    /**
		     * Creates an array of shuffled values, using a version of the
		     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     * @example
		     *
		     * _.shuffle([1, 2, 3, 4]);
		     * // => [4, 1, 3, 2]
		     */
		    function shuffle(collection) {
		      var func = isArray(collection) ? arrayShuffle : baseShuffle;
		      return func(collection);
		    }

		    /**
		     * Gets the size of `collection` by returning its length for array-like
		     * values or the number of own enumerable string keyed properties for objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object|string} collection The collection to inspect.
		     * @returns {number} Returns the collection size.
		     * @example
		     *
		     * _.size([1, 2, 3]);
		     * // => 3
		     *
		     * _.size({ 'a': 1, 'b': 2 });
		     * // => 2
		     *
		     * _.size('pebbles');
		     * // => 7
		     */
		    function size(collection) {
		      if (collection == null) {
		        return 0;
		      }
		      if (isArrayLike(collection)) {
		        return isString(collection) ? stringSize(collection) : collection.length;
		      }
		      var tag = getTag(collection);
		      if (tag == mapTag || tag == setTag) {
		        return collection.size;
		      }
		      return baseKeys(collection).length;
		    }

		    /**
		     * Checks if `predicate` returns truthy for **any** element of `collection`.
		     * Iteration is stopped once `predicate` returns truthy. The predicate is
		     * invoked with three arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {boolean} Returns `true` if any element passes the predicate check,
		     *  else `false`.
		     * @example
		     *
		     * _.some([null, 0, 'yes', false], Boolean);
		     * // => true
		     *
		     * var users = [
		     *   { 'user': 'barney', 'active': true },
		     *   { 'user': 'fred',   'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.some(users, { 'user': 'barney', 'active': false });
		     * // => false
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.some(users, ['active', false]);
		     * // => true
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.some(users, 'active');
		     * // => true
		     */
		    function some(collection, predicate, guard) {
		      var func = isArray(collection) ? arraySome : baseSome;
		      if (guard && isIterateeCall(collection, predicate, guard)) {
		        predicate = undefined$1;
		      }
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Creates an array of elements, sorted in ascending order by the results of
		     * running each element in a collection thru each iteratee. This method
		     * performs a stable sort, that is, it preserves the original sort order of
		     * equal elements. The iteratees are invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {...(Function|Function[])} [iteratees=[_.identity]]
		     *  The iteratees to sort by.
		     * @returns {Array} Returns the new sorted array.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'fred',   'age': 48 },
		     *   { 'user': 'barney', 'age': 36 },
		     *   { 'user': 'fred',   'age': 30 },
		     *   { 'user': 'barney', 'age': 34 }
		     * ];
		     *
		     * _.sortBy(users, [function(o) { return o.user; }]);
		     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
		     *
		     * _.sortBy(users, ['user', 'age']);
		     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
		     */
		    var sortBy = baseRest(function(collection, iteratees) {
		      if (collection == null) {
		        return [];
		      }
		      var length = iteratees.length;
		      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
		        iteratees = [];
		      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
		        iteratees = [iteratees[0]];
		      }
		      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
		    });

		    /*------------------------------------------------------------------------*/

		    /**
		     * Gets the timestamp of the number of milliseconds that have elapsed since
		     * the Unix epoch (1 January 1970 00:00:00 UTC).
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Date
		     * @returns {number} Returns the timestamp.
		     * @example
		     *
		     * _.defer(function(stamp) {
		     *   console.log(_.now() - stamp);
		     * }, _.now());
		     * // => Logs the number of milliseconds it took for the deferred invocation.
		     */
		    var now = ctxNow || function() {
		      return root.Date.now();
		    };

		    /*------------------------------------------------------------------------*/

		    /**
		     * The opposite of `_.before`; this method creates a function that invokes
		     * `func` once it's called `n` or more times.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {number} n The number of calls before `func` is invoked.
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * var saves = ['profile', 'settings'];
		     *
		     * var done = _.after(saves.length, function() {
		     *   console.log('done saving!');
		     * });
		     *
		     * _.forEach(saves, function(type) {
		     *   asyncSave({ 'type': type, 'complete': done });
		     * });
		     * // => Logs 'done saving!' after the two async saves have completed.
		     */
		    function after(n, func) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      n = toInteger(n);
		      return function() {
		        if (--n < 1) {
		          return func.apply(this, arguments);
		        }
		      };
		    }

		    /**
		     * Creates a function that invokes `func`, with up to `n` arguments,
		     * ignoring any additional arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to cap arguments for.
		     * @param {number} [n=func.length] The arity cap.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new capped function.
		     * @example
		     *
		     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
		     * // => [6, 8, 10]
		     */
		    function ary(func, n, guard) {
		      n = guard ? undefined$1 : n;
		      n = (func && n == null) ? func.length : n;
		      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
		    }

		    /**
		     * Creates a function that invokes `func`, with the `this` binding and arguments
		     * of the created function, while it's called less than `n` times. Subsequent
		     * calls to the created function return the result of the last `func` invocation.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {number} n The number of calls at which `func` is no longer invoked.
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * jQuery(element).on('click', _.before(5, addContactToList));
		     * // => Allows adding up to 4 contacts to the list.
		     */
		    function before(n, func) {
		      var result;
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      n = toInteger(n);
		      return function() {
		        if (--n > 0) {
		          result = func.apply(this, arguments);
		        }
		        if (n <= 1) {
		          func = undefined$1;
		        }
		        return result;
		      };
		    }

		    /**
		     * Creates a function that invokes `func` with the `this` binding of `thisArg`
		     * and `partials` prepended to the arguments it receives.
		     *
		     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
		     * may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
		     * property of bound functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to bind.
		     * @param {*} thisArg The `this` binding of `func`.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new bound function.
		     * @example
		     *
		     * function greet(greeting, punctuation) {
		     *   return greeting + ' ' + this.user + punctuation;
		     * }
		     *
		     * var object = { 'user': 'fred' };
		     *
		     * var bound = _.bind(greet, object, 'hi');
		     * bound('!');
		     * // => 'hi fred!'
		     *
		     * // Bound with placeholders.
		     * var bound = _.bind(greet, object, _, '!');
		     * bound('hi');
		     * // => 'hi fred!'
		     */
		    var bind = baseRest(function(func, thisArg, partials) {
		      var bitmask = WRAP_BIND_FLAG;
		      if (partials.length) {
		        var holders = replaceHolders(partials, getHolder(bind));
		        bitmask |= WRAP_PARTIAL_FLAG;
		      }
		      return createWrap(func, bitmask, thisArg, partials, holders);
		    });

		    /**
		     * Creates a function that invokes the method at `object[key]` with `partials`
		     * prepended to the arguments it receives.
		     *
		     * This method differs from `_.bind` by allowing bound functions to reference
		     * methods that may be redefined or don't yet exist. See
		     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
		     * for more details.
		     *
		     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.10.0
		     * @category Function
		     * @param {Object} object The object to invoke the method on.
		     * @param {string} key The key of the method.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new bound function.
		     * @example
		     *
		     * var object = {
		     *   'user': 'fred',
		     *   'greet': function(greeting, punctuation) {
		     *     return greeting + ' ' + this.user + punctuation;
		     *   }
		     * };
		     *
		     * var bound = _.bindKey(object, 'greet', 'hi');
		     * bound('!');
		     * // => 'hi fred!'
		     *
		     * object.greet = function(greeting, punctuation) {
		     *   return greeting + 'ya ' + this.user + punctuation;
		     * };
		     *
		     * bound('!');
		     * // => 'hiya fred!'
		     *
		     * // Bound with placeholders.
		     * var bound = _.bindKey(object, 'greet', _, '!');
		     * bound('hi');
		     * // => 'hiya fred!'
		     */
		    var bindKey = baseRest(function(object, key, partials) {
		      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
		      if (partials.length) {
		        var holders = replaceHolders(partials, getHolder(bindKey));
		        bitmask |= WRAP_PARTIAL_FLAG;
		      }
		      return createWrap(key, bitmask, object, partials, holders);
		    });

		    /**
		     * Creates a function that accepts arguments of `func` and either invokes
		     * `func` returning its result, if at least `arity` number of arguments have
		     * been provided, or returns a function that accepts the remaining `func`
		     * arguments, and so on. The arity of `func` may be specified if `func.length`
		     * is not sufficient.
		     *
		     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
		     * may be used as a placeholder for provided arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of curried functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Function
		     * @param {Function} func The function to curry.
		     * @param {number} [arity=func.length] The arity of `func`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new curried function.
		     * @example
		     *
		     * var abc = function(a, b, c) {
		     *   return [a, b, c];
		     * };
		     *
		     * var curried = _.curry(abc);
		     *
		     * curried(1)(2)(3);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2)(3);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2, 3);
		     * // => [1, 2, 3]
		     *
		     * // Curried with placeholders.
		     * curried(1)(_, 3)(2);
		     * // => [1, 2, 3]
		     */
		    function curry(func, arity, guard) {
		      arity = guard ? undefined$1 : arity;
		      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
		      result.placeholder = curry.placeholder;
		      return result;
		    }

		    /**
		     * This method is like `_.curry` except that arguments are applied to `func`
		     * in the manner of `_.partialRight` instead of `_.partial`.
		     *
		     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for provided arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of curried functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to curry.
		     * @param {number} [arity=func.length] The arity of `func`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new curried function.
		     * @example
		     *
		     * var abc = function(a, b, c) {
		     *   return [a, b, c];
		     * };
		     *
		     * var curried = _.curryRight(abc);
		     *
		     * curried(3)(2)(1);
		     * // => [1, 2, 3]
		     *
		     * curried(2, 3)(1);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2, 3);
		     * // => [1, 2, 3]
		     *
		     * // Curried with placeholders.
		     * curried(3)(1, _)(2);
		     * // => [1, 2, 3]
		     */
		    function curryRight(func, arity, guard) {
		      arity = guard ? undefined$1 : arity;
		      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
		      result.placeholder = curryRight.placeholder;
		      return result;
		    }

		    /**
		     * Creates a debounced function that delays invoking `func` until after `wait`
		     * milliseconds have elapsed since the last time the debounced function was
		     * invoked. The debounced function comes with a `cancel` method to cancel
		     * delayed `func` invocations and a `flush` method to immediately invoke them.
		     * Provide `options` to indicate whether `func` should be invoked on the
		     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
		     * with the last arguments provided to the debounced function. Subsequent
		     * calls to the debounced function return the result of the last `func`
		     * invocation.
		     *
		     * **Note:** If `leading` and `trailing` options are `true`, `func` is
		     * invoked on the trailing edge of the timeout only if the debounced function
		     * is invoked more than once during the `wait` timeout.
		     *
		     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		     *
		     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		     * for details over the differences between `_.debounce` and `_.throttle`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to debounce.
		     * @param {number} [wait=0] The number of milliseconds to delay.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.leading=false]
		     *  Specify invoking on the leading edge of the timeout.
		     * @param {number} [options.maxWait]
		     *  The maximum time `func` is allowed to be delayed before it's invoked.
		     * @param {boolean} [options.trailing=true]
		     *  Specify invoking on the trailing edge of the timeout.
		     * @returns {Function} Returns the new debounced function.
		     * @example
		     *
		     * // Avoid costly calculations while the window size is in flux.
		     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
		     *
		     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
		     * jQuery(element).on('click', _.debounce(sendMail, 300, {
		     *   'leading': true,
		     *   'trailing': false
		     * }));
		     *
		     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
		     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
		     * var source = new EventSource('/stream');
		     * jQuery(source).on('message', debounced);
		     *
		     * // Cancel the trailing debounced invocation.
		     * jQuery(window).on('popstate', debounced.cancel);
		     */
		    function debounce(func, wait, options) {
		      var lastArgs,
		          lastThis,
		          maxWait,
		          result,
		          timerId,
		          lastCallTime,
		          lastInvokeTime = 0,
		          leading = false,
		          maxing = false,
		          trailing = true;

		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      wait = toNumber(wait) || 0;
		      if (isObject(options)) {
		        leading = !!options.leading;
		        maxing = 'maxWait' in options;
		        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
		        trailing = 'trailing' in options ? !!options.trailing : trailing;
		      }

		      function invokeFunc(time) {
		        var args = lastArgs,
		            thisArg = lastThis;

		        lastArgs = lastThis = undefined$1;
		        lastInvokeTime = time;
		        result = func.apply(thisArg, args);
		        return result;
		      }

		      function leadingEdge(time) {
		        // Reset any `maxWait` timer.
		        lastInvokeTime = time;
		        // Start the timer for the trailing edge.
		        timerId = setTimeout(timerExpired, wait);
		        // Invoke the leading edge.
		        return leading ? invokeFunc(time) : result;
		      }

		      function remainingWait(time) {
		        var timeSinceLastCall = time - lastCallTime,
		            timeSinceLastInvoke = time - lastInvokeTime,
		            timeWaiting = wait - timeSinceLastCall;

		        return maxing
		          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
		          : timeWaiting;
		      }

		      function shouldInvoke(time) {
		        var timeSinceLastCall = time - lastCallTime,
		            timeSinceLastInvoke = time - lastInvokeTime;

		        // Either this is the first call, activity has stopped and we're at the
		        // trailing edge, the system time has gone backwards and we're treating
		        // it as the trailing edge, or we've hit the `maxWait` limit.
		        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
		          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
		      }

		      function timerExpired() {
		        var time = now();
		        if (shouldInvoke(time)) {
		          return trailingEdge(time);
		        }
		        // Restart the timer.
		        timerId = setTimeout(timerExpired, remainingWait(time));
		      }

		      function trailingEdge(time) {
		        timerId = undefined$1;

		        // Only invoke if we have `lastArgs` which means `func` has been
		        // debounced at least once.
		        if (trailing && lastArgs) {
		          return invokeFunc(time);
		        }
		        lastArgs = lastThis = undefined$1;
		        return result;
		      }

		      function cancel() {
		        if (timerId !== undefined$1) {
		          clearTimeout(timerId);
		        }
		        lastInvokeTime = 0;
		        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
		      }

		      function flush() {
		        return timerId === undefined$1 ? result : trailingEdge(now());
		      }

		      function debounced() {
		        var time = now(),
		            isInvoking = shouldInvoke(time);

		        lastArgs = arguments;
		        lastThis = this;
		        lastCallTime = time;

		        if (isInvoking) {
		          if (timerId === undefined$1) {
		            return leadingEdge(lastCallTime);
		          }
		          if (maxing) {
		            // Handle invocations in a tight loop.
		            clearTimeout(timerId);
		            timerId = setTimeout(timerExpired, wait);
		            return invokeFunc(lastCallTime);
		          }
		        }
		        if (timerId === undefined$1) {
		          timerId = setTimeout(timerExpired, wait);
		        }
		        return result;
		      }
		      debounced.cancel = cancel;
		      debounced.flush = flush;
		      return debounced;
		    }

		    /**
		     * Defers invoking the `func` until the current call stack has cleared. Any
		     * additional arguments are provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to defer.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {number} Returns the timer id.
		     * @example
		     *
		     * _.defer(function(text) {
		     *   console.log(text);
		     * }, 'deferred');
		     * // => Logs 'deferred' after one millisecond.
		     */
		    var defer = baseRest(function(func, args) {
		      return baseDelay(func, 1, args);
		    });

		    /**
		     * Invokes `func` after `wait` milliseconds. Any additional arguments are
		     * provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {number} Returns the timer id.
		     * @example
		     *
		     * _.delay(function(text) {
		     *   console.log(text);
		     * }, 1000, 'later');
		     * // => Logs 'later' after one second.
		     */
		    var delay = baseRest(function(func, wait, args) {
		      return baseDelay(func, toNumber(wait) || 0, args);
		    });

		    /**
		     * Creates a function that invokes `func` with arguments reversed.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to flip arguments for.
		     * @returns {Function} Returns the new flipped function.
		     * @example
		     *
		     * var flipped = _.flip(function() {
		     *   return _.toArray(arguments);
		     * });
		     *
		     * flipped('a', 'b', 'c', 'd');
		     * // => ['d', 'c', 'b', 'a']
		     */
		    function flip(func) {
		      return createWrap(func, WRAP_FLIP_FLAG);
		    }

		    /**
		     * Creates a function that memoizes the result of `func`. If `resolver` is
		     * provided, it determines the cache key for storing the result based on the
		     * arguments provided to the memoized function. By default, the first argument
		     * provided to the memoized function is used as the map cache key. The `func`
		     * is invoked with the `this` binding of the memoized function.
		     *
		     * **Note:** The cache is exposed as the `cache` property on the memoized
		     * function. Its creation may be customized by replacing the `_.memoize.Cache`
		     * constructor with one whose instances implement the
		     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
		     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to have its output memoized.
		     * @param {Function} [resolver] The function to resolve the cache key.
		     * @returns {Function} Returns the new memoized function.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     * var other = { 'c': 3, 'd': 4 };
		     *
		     * var values = _.memoize(_.values);
		     * values(object);
		     * // => [1, 2]
		     *
		     * values(other);
		     * // => [3, 4]
		     *
		     * object.a = 2;
		     * values(object);
		     * // => [1, 2]
		     *
		     * // Modify the result cache.
		     * values.cache.set(object, ['a', 'b']);
		     * values(object);
		     * // => ['a', 'b']
		     *
		     * // Replace `_.memoize.Cache`.
		     * _.memoize.Cache = WeakMap;
		     */
		    function memoize(func, resolver) {
		      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      var memoized = function() {
		        var args = arguments,
		            key = resolver ? resolver.apply(this, args) : args[0],
		            cache = memoized.cache;

		        if (cache.has(key)) {
		          return cache.get(key);
		        }
		        var result = func.apply(this, args);
		        memoized.cache = cache.set(key, result) || cache;
		        return result;
		      };
		      memoized.cache = new (memoize.Cache || MapCache);
		      return memoized;
		    }

		    // Expose `MapCache`.
		    memoize.Cache = MapCache;

		    /**
		     * Creates a function that negates the result of the predicate `func`. The
		     * `func` predicate is invoked with the `this` binding and arguments of the
		     * created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} predicate The predicate to negate.
		     * @returns {Function} Returns the new negated function.
		     * @example
		     *
		     * function isEven(n) {
		     *   return n % 2 == 0;
		     * }
		     *
		     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
		     * // => [1, 3, 5]
		     */
		    function negate(predicate) {
		      if (typeof predicate != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      return function() {
		        var args = arguments;
		        switch (args.length) {
		          case 0: return !predicate.call(this);
		          case 1: return !predicate.call(this, args[0]);
		          case 2: return !predicate.call(this, args[0], args[1]);
		          case 3: return !predicate.call(this, args[0], args[1], args[2]);
		        }
		        return !predicate.apply(this, args);
		      };
		    }

		    /**
		     * Creates a function that is restricted to invoking `func` once. Repeat calls
		     * to the function return the value of the first invocation. The `func` is
		     * invoked with the `this` binding and arguments of the created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * var initialize = _.once(createApplication);
		     * initialize();
		     * initialize();
		     * // => `createApplication` is invoked once
		     */
		    function once(func) {
		      return before(2, func);
		    }

		    /**
		     * Creates a function that invokes `func` with its arguments transformed.
		     *
		     * @static
		     * @since 4.0.0
		     * @memberOf _
		     * @category Function
		     * @param {Function} func The function to wrap.
		     * @param {...(Function|Function[])} [transforms=[_.identity]]
		     *  The argument transforms.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * function doubled(n) {
		     *   return n * 2;
		     * }
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var func = _.overArgs(function(x, y) {
		     *   return [x, y];
		     * }, [square, doubled]);
		     *
		     * func(9, 3);
		     * // => [81, 6]
		     *
		     * func(10, 5);
		     * // => [100, 10]
		     */
		    var overArgs = castRest(function(func, transforms) {
		      transforms = (transforms.length == 1 && isArray(transforms[0]))
		        ? arrayMap(transforms[0], baseUnary(getIteratee()))
		        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

		      var funcsLength = transforms.length;
		      return baseRest(function(args) {
		        var index = -1,
		            length = nativeMin(args.length, funcsLength);

		        while (++index < length) {
		          args[index] = transforms[index].call(this, args[index]);
		        }
		        return apply(func, this, args);
		      });
		    });

		    /**
		     * Creates a function that invokes `func` with `partials` prepended to the
		     * arguments it receives. This method is like `_.bind` except it does **not**
		     * alter the `this` binding.
		     *
		     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of partially
		     * applied functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.2.0
		     * @category Function
		     * @param {Function} func The function to partially apply arguments to.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new partially applied function.
		     * @example
		     *
		     * function greet(greeting, name) {
		     *   return greeting + ' ' + name;
		     * }
		     *
		     * var sayHelloTo = _.partial(greet, 'hello');
		     * sayHelloTo('fred');
		     * // => 'hello fred'
		     *
		     * // Partially applied with placeholders.
		     * var greetFred = _.partial(greet, _, 'fred');
		     * greetFred('hi');
		     * // => 'hi fred'
		     */
		    var partial = baseRest(function(func, partials) {
		      var holders = replaceHolders(partials, getHolder(partial));
		      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
		    });

		    /**
		     * This method is like `_.partial` except that partially applied arguments
		     * are appended to the arguments it receives.
		     *
		     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of partially
		     * applied functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Function
		     * @param {Function} func The function to partially apply arguments to.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new partially applied function.
		     * @example
		     *
		     * function greet(greeting, name) {
		     *   return greeting + ' ' + name;
		     * }
		     *
		     * var greetFred = _.partialRight(greet, 'fred');
		     * greetFred('hi');
		     * // => 'hi fred'
		     *
		     * // Partially applied with placeholders.
		     * var sayHelloTo = _.partialRight(greet, 'hello', _);
		     * sayHelloTo('fred');
		     * // => 'hello fred'
		     */
		    var partialRight = baseRest(function(func, partials) {
		      var holders = replaceHolders(partials, getHolder(partialRight));
		      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
		    });

		    /**
		     * Creates a function that invokes `func` with arguments arranged according
		     * to the specified `indexes` where the argument value at the first index is
		     * provided as the first argument, the argument value at the second index is
		     * provided as the second argument, and so on.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to rearrange arguments for.
		     * @param {...(number|number[])} indexes The arranged argument indexes.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var rearged = _.rearg(function(a, b, c) {
		     *   return [a, b, c];
		     * }, [2, 0, 1]);
		     *
		     * rearged('b', 'c', 'a')
		     * // => ['a', 'b', 'c']
		     */
		    var rearg = flatRest(function(func, indexes) {
		      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
		    });

		    /**
		     * Creates a function that invokes `func` with the `this` binding of the
		     * created function and arguments from `start` and beyond provided as
		     * an array.
		     *
		     * **Note:** This method is based on the
		     * [rest parameter](https://mdn.io/rest_parameters).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var say = _.rest(function(what, names) {
		     *   return what + ' ' + _.initial(names).join(', ') +
		     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
		     * });
		     *
		     * say('hello', 'fred', 'barney', 'pebbles');
		     * // => 'hello fred, barney, & pebbles'
		     */
		    function rest(func, start) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      start = start === undefined$1 ? start : toInteger(start);
		      return baseRest(func, start);
		    }

		    /**
		     * Creates a function that invokes `func` with the `this` binding of the
		     * create function and an array of arguments much like
		     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
		     *
		     * **Note:** This method is based on the
		     * [spread operator](https://mdn.io/spread_operator).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Function
		     * @param {Function} func The function to spread arguments over.
		     * @param {number} [start=0] The start position of the spread.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var say = _.spread(function(who, what) {
		     *   return who + ' says ' + what;
		     * });
		     *
		     * say(['fred', 'hello']);
		     * // => 'fred says hello'
		     *
		     * var numbers = Promise.all([
		     *   Promise.resolve(40),
		     *   Promise.resolve(36)
		     * ]);
		     *
		     * numbers.then(_.spread(function(x, y) {
		     *   return x + y;
		     * }));
		     * // => a Promise of 76
		     */
		    function spread(func, start) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      start = start == null ? 0 : nativeMax(toInteger(start), 0);
		      return baseRest(function(args) {
		        var array = args[start],
		            otherArgs = castSlice(args, 0, start);

		        if (array) {
		          arrayPush(otherArgs, array);
		        }
		        return apply(func, this, otherArgs);
		      });
		    }

		    /**
		     * Creates a throttled function that only invokes `func` at most once per
		     * every `wait` milliseconds. The throttled function comes with a `cancel`
		     * method to cancel delayed `func` invocations and a `flush` method to
		     * immediately invoke them. Provide `options` to indicate whether `func`
		     * should be invoked on the leading and/or trailing edge of the `wait`
		     * timeout. The `func` is invoked with the last arguments provided to the
		     * throttled function. Subsequent calls to the throttled function return the
		     * result of the last `func` invocation.
		     *
		     * **Note:** If `leading` and `trailing` options are `true`, `func` is
		     * invoked on the trailing edge of the timeout only if the throttled function
		     * is invoked more than once during the `wait` timeout.
		     *
		     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		     *
		     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		     * for details over the differences between `_.throttle` and `_.debounce`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to throttle.
		     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.leading=true]
		     *  Specify invoking on the leading edge of the timeout.
		     * @param {boolean} [options.trailing=true]
		     *  Specify invoking on the trailing edge of the timeout.
		     * @returns {Function} Returns the new throttled function.
		     * @example
		     *
		     * // Avoid excessively updating the position while scrolling.
		     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
		     *
		     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
		     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
		     * jQuery(element).on('click', throttled);
		     *
		     * // Cancel the trailing throttled invocation.
		     * jQuery(window).on('popstate', throttled.cancel);
		     */
		    function throttle(func, wait, options) {
		      var leading = true,
		          trailing = true;

		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      if (isObject(options)) {
		        leading = 'leading' in options ? !!options.leading : leading;
		        trailing = 'trailing' in options ? !!options.trailing : trailing;
		      }
		      return debounce(func, wait, {
		        'leading': leading,
		        'maxWait': wait,
		        'trailing': trailing
		      });
		    }

		    /**
		     * Creates a function that accepts up to one argument, ignoring any
		     * additional arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to cap arguments for.
		     * @returns {Function} Returns the new capped function.
		     * @example
		     *
		     * _.map(['6', '8', '10'], _.unary(parseInt));
		     * // => [6, 8, 10]
		     */
		    function unary(func) {
		      return ary(func, 1);
		    }

		    /**
		     * Creates a function that provides `value` to `wrapper` as its first
		     * argument. Any additional arguments provided to the function are appended
		     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
		     * binding of the created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {*} value The value to wrap.
		     * @param {Function} [wrapper=identity] The wrapper function.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var p = _.wrap(_.escape, function(func, text) {
		     *   return '<p>' + func(text) + '</p>';
		     * });
		     *
		     * p('fred, barney, & pebbles');
		     * // => '<p>fred, barney, &amp; pebbles</p>'
		     */
		    function wrap(value, wrapper) {
		      return partial(castFunction(wrapper), value);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Casts `value` as an array if it's not one.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.4.0
		     * @category Lang
		     * @param {*} value The value to inspect.
		     * @returns {Array} Returns the cast array.
		     * @example
		     *
		     * _.castArray(1);
		     * // => [1]
		     *
		     * _.castArray({ 'a': 1 });
		     * // => [{ 'a': 1 }]
		     *
		     * _.castArray('abc');
		     * // => ['abc']
		     *
		     * _.castArray(null);
		     * // => [null]
		     *
		     * _.castArray(undefined);
		     * // => [undefined]
		     *
		     * _.castArray();
		     * // => []
		     *
		     * var array = [1, 2, 3];
		     * console.log(_.castArray(array) === array);
		     * // => true
		     */
		    function castArray() {
		      if (!arguments.length) {
		        return [];
		      }
		      var value = arguments[0];
		      return isArray(value) ? value : [value];
		    }

		    /**
		     * Creates a shallow clone of `value`.
		     *
		     * **Note:** This method is loosely based on the
		     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
		     * and supports cloning arrays, array buffers, booleans, date objects, maps,
		     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
		     * arrays. The own enumerable properties of `arguments` objects are cloned
		     * as plain objects. An empty object is returned for uncloneable values such
		     * as error objects, functions, DOM nodes, and WeakMaps.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to clone.
		     * @returns {*} Returns the cloned value.
		     * @see _.cloneDeep
		     * @example
		     *
		     * var objects = [{ 'a': 1 }, { 'b': 2 }];
		     *
		     * var shallow = _.clone(objects);
		     * console.log(shallow[0] === objects[0]);
		     * // => true
		     */
		    function clone(value) {
		      return baseClone(value, CLONE_SYMBOLS_FLAG);
		    }

		    /**
		     * This method is like `_.clone` except that it accepts `customizer` which
		     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
		     * cloning is handled by the method instead. The `customizer` is invoked with
		     * up to four arguments; (value [, index|key, object, stack]).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to clone.
		     * @param {Function} [customizer] The function to customize cloning.
		     * @returns {*} Returns the cloned value.
		     * @see _.cloneDeepWith
		     * @example
		     *
		     * function customizer(value) {
		     *   if (_.isElement(value)) {
		     *     return value.cloneNode(false);
		     *   }
		     * }
		     *
		     * var el = _.cloneWith(document.body, customizer);
		     *
		     * console.log(el === document.body);
		     * // => false
		     * console.log(el.nodeName);
		     * // => 'BODY'
		     * console.log(el.childNodes.length);
		     * // => 0
		     */
		    function cloneWith(value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
		    }

		    /**
		     * This method is like `_.clone` except that it recursively clones `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Lang
		     * @param {*} value The value to recursively clone.
		     * @returns {*} Returns the deep cloned value.
		     * @see _.clone
		     * @example
		     *
		     * var objects = [{ 'a': 1 }, { 'b': 2 }];
		     *
		     * var deep = _.cloneDeep(objects);
		     * console.log(deep[0] === objects[0]);
		     * // => false
		     */
		    function cloneDeep(value) {
		      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
		    }

		    /**
		     * This method is like `_.cloneWith` except that it recursively clones `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to recursively clone.
		     * @param {Function} [customizer] The function to customize cloning.
		     * @returns {*} Returns the deep cloned value.
		     * @see _.cloneWith
		     * @example
		     *
		     * function customizer(value) {
		     *   if (_.isElement(value)) {
		     *     return value.cloneNode(true);
		     *   }
		     * }
		     *
		     * var el = _.cloneDeepWith(document.body, customizer);
		     *
		     * console.log(el === document.body);
		     * // => false
		     * console.log(el.nodeName);
		     * // => 'BODY'
		     * console.log(el.childNodes.length);
		     * // => 20
		     */
		    function cloneDeepWith(value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
		    }

		    /**
		     * Checks if `object` conforms to `source` by invoking the predicate
		     * properties of `source` with the corresponding property values of `object`.
		     *
		     * **Note:** This method is equivalent to `_.conforms` when `source` is
		     * partially applied.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.14.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     *
		     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
		     * // => true
		     *
		     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
		     * // => false
		     */
		    function conformsTo(object, source) {
		      return source == null || baseConformsTo(object, source, keys(source));
		    }

		    /**
		     * Performs a
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * comparison between two values to determine if they are equivalent.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     * var other = { 'a': 1 };
		     *
		     * _.eq(object, object);
		     * // => true
		     *
		     * _.eq(object, other);
		     * // => false
		     *
		     * _.eq('a', 'a');
		     * // => true
		     *
		     * _.eq('a', Object('a'));
		     * // => false
		     *
		     * _.eq(NaN, NaN);
		     * // => true
		     */
		    function eq(value, other) {
		      return value === other || (value !== value && other !== other);
		    }

		    /**
		     * Checks if `value` is greater than `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than `other`,
		     *  else `false`.
		     * @see _.lt
		     * @example
		     *
		     * _.gt(3, 1);
		     * // => true
		     *
		     * _.gt(3, 3);
		     * // => false
		     *
		     * _.gt(1, 3);
		     * // => false
		     */
		    var gt = createRelationalOperation(baseGt);

		    /**
		     * Checks if `value` is greater than or equal to `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than or equal to
		     *  `other`, else `false`.
		     * @see _.lte
		     * @example
		     *
		     * _.gte(3, 1);
		     * // => true
		     *
		     * _.gte(3, 3);
		     * // => true
		     *
		     * _.gte(1, 3);
		     * // => false
		     */
		    var gte = createRelationalOperation(function(value, other) {
		      return value >= other;
		    });

		    /**
		     * Checks if `value` is likely an `arguments` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		     *  else `false`.
		     * @example
		     *
		     * _.isArguments(function() { return arguments; }());
		     * // => true
		     *
		     * _.isArguments([1, 2, 3]);
		     * // => false
		     */
		    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
		      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
		        !propertyIsEnumerable.call(value, 'callee');
		    };

		    /**
		     * Checks if `value` is classified as an `Array` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
		     * @example
		     *
		     * _.isArray([1, 2, 3]);
		     * // => true
		     *
		     * _.isArray(document.body.children);
		     * // => false
		     *
		     * _.isArray('abc');
		     * // => false
		     *
		     * _.isArray(_.noop);
		     * // => false
		     */
		    var isArray = Array.isArray;

		    /**
		     * Checks if `value` is classified as an `ArrayBuffer` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
		     * @example
		     *
		     * _.isArrayBuffer(new ArrayBuffer(2));
		     * // => true
		     *
		     * _.isArrayBuffer(new Array(2));
		     * // => false
		     */
		    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

		    /**
		     * Checks if `value` is array-like. A value is considered array-like if it's
		     * not a function and has a `value.length` that's an integer greater than or
		     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		     * @example
		     *
		     * _.isArrayLike([1, 2, 3]);
		     * // => true
		     *
		     * _.isArrayLike(document.body.children);
		     * // => true
		     *
		     * _.isArrayLike('abc');
		     * // => true
		     *
		     * _.isArrayLike(_.noop);
		     * // => false
		     */
		    function isArrayLike(value) {
		      return value != null && isLength(value.length) && !isFunction(value);
		    }

		    /**
		     * This method is like `_.isArrayLike` except that it also checks if `value`
		     * is an object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array-like object,
		     *  else `false`.
		     * @example
		     *
		     * _.isArrayLikeObject([1, 2, 3]);
		     * // => true
		     *
		     * _.isArrayLikeObject(document.body.children);
		     * // => true
		     *
		     * _.isArrayLikeObject('abc');
		     * // => false
		     *
		     * _.isArrayLikeObject(_.noop);
		     * // => false
		     */
		    function isArrayLikeObject(value) {
		      return isObjectLike(value) && isArrayLike(value);
		    }

		    /**
		     * Checks if `value` is classified as a boolean primitive or object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
		     * @example
		     *
		     * _.isBoolean(false);
		     * // => true
		     *
		     * _.isBoolean(null);
		     * // => false
		     */
		    function isBoolean(value) {
		      return value === true || value === false ||
		        (isObjectLike(value) && baseGetTag(value) == boolTag);
		    }

		    /**
		     * Checks if `value` is a buffer.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		     * @example
		     *
		     * _.isBuffer(new Buffer(2));
		     * // => true
		     *
		     * _.isBuffer(new Uint8Array(2));
		     * // => false
		     */
		    var isBuffer = nativeIsBuffer || stubFalse;

		    /**
		     * Checks if `value` is classified as a `Date` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
		     * @example
		     *
		     * _.isDate(new Date);
		     * // => true
		     *
		     * _.isDate('Mon April 23 2012');
		     * // => false
		     */
		    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

		    /**
		     * Checks if `value` is likely a DOM element.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
		     * @example
		     *
		     * _.isElement(document.body);
		     * // => true
		     *
		     * _.isElement('<body>');
		     * // => false
		     */
		    function isElement(value) {
		      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
		    }

		    /**
		     * Checks if `value` is an empty object, collection, map, or set.
		     *
		     * Objects are considered empty if they have no own enumerable string keyed
		     * properties.
		     *
		     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
		     * jQuery-like collections are considered empty if they have a `length` of `0`.
		     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
		     * @example
		     *
		     * _.isEmpty(null);
		     * // => true
		     *
		     * _.isEmpty(true);
		     * // => true
		     *
		     * _.isEmpty(1);
		     * // => true
		     *
		     * _.isEmpty([1, 2, 3]);
		     * // => false
		     *
		     * _.isEmpty({ 'a': 1 });
		     * // => false
		     */
		    function isEmpty(value) {
		      if (value == null) {
		        return true;
		      }
		      if (isArrayLike(value) &&
		          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
		            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
		        return !value.length;
		      }
		      var tag = getTag(value);
		      if (tag == mapTag || tag == setTag) {
		        return !value.size;
		      }
		      if (isPrototype(value)) {
		        return !baseKeys(value).length;
		      }
		      for (var key in value) {
		        if (hasOwnProperty.call(value, key)) {
		          return false;
		        }
		      }
		      return true;
		    }

		    /**
		     * Performs a deep comparison between two values to determine if they are
		     * equivalent.
		     *
		     * **Note:** This method supports comparing arrays, array buffers, booleans,
		     * date objects, error objects, maps, numbers, `Object` objects, regexes,
		     * sets, strings, symbols, and typed arrays. `Object` objects are compared
		     * by their own, not inherited, enumerable properties. Functions and DOM
		     * nodes are compared by strict equality, i.e. `===`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     * var other = { 'a': 1 };
		     *
		     * _.isEqual(object, other);
		     * // => true
		     *
		     * object === other;
		     * // => false
		     */
		    function isEqual(value, other) {
		      return baseIsEqual(value, other);
		    }

		    /**
		     * This method is like `_.isEqual` except that it accepts `customizer` which
		     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
		     * are handled by the method instead. The `customizer` is invoked with up to
		     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * function isGreeting(value) {
		     *   return /^h(?:i|ello)$/.test(value);
		     * }
		     *
		     * function customizer(objValue, othValue) {
		     *   if (isGreeting(objValue) && isGreeting(othValue)) {
		     *     return true;
		     *   }
		     * }
		     *
		     * var array = ['hello', 'goodbye'];
		     * var other = ['hi', 'goodbye'];
		     *
		     * _.isEqualWith(array, other, customizer);
		     * // => true
		     */
		    function isEqualWith(value, other, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      var result = customizer ? customizer(value, other) : undefined$1;
		      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
		    }

		    /**
		     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
		     * `SyntaxError`, `TypeError`, or `URIError` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
		     * @example
		     *
		     * _.isError(new Error);
		     * // => true
		     *
		     * _.isError(Error);
		     * // => false
		     */
		    function isError(value) {
		      if (!isObjectLike(value)) {
		        return false;
		      }
		      var tag = baseGetTag(value);
		      return tag == errorTag || tag == domExcTag ||
		        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
		    }

		    /**
		     * Checks if `value` is a finite primitive number.
		     *
		     * **Note:** This method is based on
		     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
		     * @example
		     *
		     * _.isFinite(3);
		     * // => true
		     *
		     * _.isFinite(Number.MIN_VALUE);
		     * // => true
		     *
		     * _.isFinite(Infinity);
		     * // => false
		     *
		     * _.isFinite('3');
		     * // => false
		     */
		    function isFinite(value) {
		      return typeof value == 'number' && nativeIsFinite(value);
		    }

		    /**
		     * Checks if `value` is classified as a `Function` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
		     * @example
		     *
		     * _.isFunction(_);
		     * // => true
		     *
		     * _.isFunction(/abc/);
		     * // => false
		     */
		    function isFunction(value) {
		      if (!isObject(value)) {
		        return false;
		      }
		      // The use of `Object#toString` avoids issues with the `typeof` operator
		      // in Safari 9 which returns 'object' for typed arrays and other constructors.
		      var tag = baseGetTag(value);
		      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
		    }

		    /**
		     * Checks if `value` is an integer.
		     *
		     * **Note:** This method is based on
		     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
		     * @example
		     *
		     * _.isInteger(3);
		     * // => true
		     *
		     * _.isInteger(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isInteger(Infinity);
		     * // => false
		     *
		     * _.isInteger('3');
		     * // => false
		     */
		    function isInteger(value) {
		      return typeof value == 'number' && value == toInteger(value);
		    }

		    /**
		     * Checks if `value` is a valid array-like length.
		     *
		     * **Note:** This method is loosely based on
		     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		     * @example
		     *
		     * _.isLength(3);
		     * // => true
		     *
		     * _.isLength(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isLength(Infinity);
		     * // => false
		     *
		     * _.isLength('3');
		     * // => false
		     */
		    function isLength(value) {
		      return typeof value == 'number' &&
		        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		    }

		    /**
		     * Checks if `value` is the
		     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
		     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		     * @example
		     *
		     * _.isObject({});
		     * // => true
		     *
		     * _.isObject([1, 2, 3]);
		     * // => true
		     *
		     * _.isObject(_.noop);
		     * // => true
		     *
		     * _.isObject(null);
		     * // => false
		     */
		    function isObject(value) {
		      var type = typeof value;
		      return value != null && (type == 'object' || type == 'function');
		    }

		    /**
		     * Checks if `value` is object-like. A value is object-like if it's not `null`
		     * and has a `typeof` result of "object".
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		     * @example
		     *
		     * _.isObjectLike({});
		     * // => true
		     *
		     * _.isObjectLike([1, 2, 3]);
		     * // => true
		     *
		     * _.isObjectLike(_.noop);
		     * // => false
		     *
		     * _.isObjectLike(null);
		     * // => false
		     */
		    function isObjectLike(value) {
		      return value != null && typeof value == 'object';
		    }

		    /**
		     * Checks if `value` is classified as a `Map` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		     * @example
		     *
		     * _.isMap(new Map);
		     * // => true
		     *
		     * _.isMap(new WeakMap);
		     * // => false
		     */
		    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

		    /**
		     * Performs a partial deep comparison between `object` and `source` to
		     * determine if `object` contains equivalent property values.
		     *
		     * **Note:** This method is equivalent to `_.matches` when `source` is
		     * partially applied.
		     *
		     * Partial comparisons will match empty array and empty object `source`
		     * values against any array or object value, respectively. See `_.isEqual`
		     * for a list of supported value comparisons.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     *
		     * _.isMatch(object, { 'b': 2 });
		     * // => true
		     *
		     * _.isMatch(object, { 'b': 1 });
		     * // => false
		     */
		    function isMatch(object, source) {
		      return object === source || baseIsMatch(object, source, getMatchData(source));
		    }

		    /**
		     * This method is like `_.isMatch` except that it accepts `customizer` which
		     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
		     * are handled by the method instead. The `customizer` is invoked with five
		     * arguments: (objValue, srcValue, index|key, object, source).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     * @example
		     *
		     * function isGreeting(value) {
		     *   return /^h(?:i|ello)$/.test(value);
		     * }
		     *
		     * function customizer(objValue, srcValue) {
		     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
		     *     return true;
		     *   }
		     * }
		     *
		     * var object = { 'greeting': 'hello' };
		     * var source = { 'greeting': 'hi' };
		     *
		     * _.isMatchWith(object, source, customizer);
		     * // => true
		     */
		    function isMatchWith(object, source, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseIsMatch(object, source, getMatchData(source), customizer);
		    }

		    /**
		     * Checks if `value` is `NaN`.
		     *
		     * **Note:** This method is based on
		     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
		     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
		     * `undefined` and other non-number values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
		     * @example
		     *
		     * _.isNaN(NaN);
		     * // => true
		     *
		     * _.isNaN(new Number(NaN));
		     * // => true
		     *
		     * isNaN(undefined);
		     * // => true
		     *
		     * _.isNaN(undefined);
		     * // => false
		     */
		    function isNaN(value) {
		      // An `NaN` primitive is the only value that is not equal to itself.
		      // Perform the `toStringTag` check first to avoid errors with some
		      // ActiveX objects in IE.
		      return isNumber(value) && value != +value;
		    }

		    /**
		     * Checks if `value` is a pristine native function.
		     *
		     * **Note:** This method can't reliably detect native functions in the presence
		     * of the core-js package because core-js circumvents this kind of detection.
		     * Despite multiple requests, the core-js maintainer has made it clear: any
		     * attempt to fix the detection will be obstructed. As a result, we're left
		     * with little choice but to throw an error. Unfortunately, this also affects
		     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
		     * which rely on core-js.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a native function,
		     *  else `false`.
		     * @example
		     *
		     * _.isNative(Array.prototype.push);
		     * // => true
		     *
		     * _.isNative(_);
		     * // => false
		     */
		    function isNative(value) {
		      if (isMaskable(value)) {
		        throw new Error(CORE_ERROR_TEXT);
		      }
		      return baseIsNative(value);
		    }

		    /**
		     * Checks if `value` is `null`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
		     * @example
		     *
		     * _.isNull(null);
		     * // => true
		     *
		     * _.isNull(void 0);
		     * // => false
		     */
		    function isNull(value) {
		      return value === null;
		    }

		    /**
		     * Checks if `value` is `null` or `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
		     * @example
		     *
		     * _.isNil(null);
		     * // => true
		     *
		     * _.isNil(void 0);
		     * // => true
		     *
		     * _.isNil(NaN);
		     * // => false
		     */
		    function isNil(value) {
		      return value == null;
		    }

		    /**
		     * Checks if `value` is classified as a `Number` primitive or object.
		     *
		     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
		     * classified as numbers, use the `_.isFinite` method.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
		     * @example
		     *
		     * _.isNumber(3);
		     * // => true
		     *
		     * _.isNumber(Number.MIN_VALUE);
		     * // => true
		     *
		     * _.isNumber(Infinity);
		     * // => true
		     *
		     * _.isNumber('3');
		     * // => false
		     */
		    function isNumber(value) {
		      return typeof value == 'number' ||
		        (isObjectLike(value) && baseGetTag(value) == numberTag);
		    }

		    /**
		     * Checks if `value` is a plain object, that is, an object created by the
		     * `Object` constructor or one with a `[[Prototype]]` of `null`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.8.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * _.isPlainObject(new Foo);
		     * // => false
		     *
		     * _.isPlainObject([1, 2, 3]);
		     * // => false
		     *
		     * _.isPlainObject({ 'x': 0, 'y': 0 });
		     * // => true
		     *
		     * _.isPlainObject(Object.create(null));
		     * // => true
		     */
		    function isPlainObject(value) {
		      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
		        return false;
		      }
		      var proto = getPrototype(value);
		      if (proto === null) {
		        return true;
		      }
		      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
		      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
		        funcToString.call(Ctor) == objectCtorString;
		    }

		    /**
		     * Checks if `value` is classified as a `RegExp` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
		     * @example
		     *
		     * _.isRegExp(/abc/);
		     * // => true
		     *
		     * _.isRegExp('/abc/');
		     * // => false
		     */
		    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

		    /**
		     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
		     * double precision number which isn't the result of a rounded unsafe integer.
		     *
		     * **Note:** This method is based on
		     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
		     * @example
		     *
		     * _.isSafeInteger(3);
		     * // => true
		     *
		     * _.isSafeInteger(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isSafeInteger(Infinity);
		     * // => false
		     *
		     * _.isSafeInteger('3');
		     * // => false
		     */
		    function isSafeInteger(value) {
		      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
		    }

		    /**
		     * Checks if `value` is classified as a `Set` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		     * @example
		     *
		     * _.isSet(new Set);
		     * // => true
		     *
		     * _.isSet(new WeakSet);
		     * // => false
		     */
		    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

		    /**
		     * Checks if `value` is classified as a `String` primitive or object.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
		     * @example
		     *
		     * _.isString('abc');
		     * // => true
		     *
		     * _.isString(1);
		     * // => false
		     */
		    function isString(value) {
		      return typeof value == 'string' ||
		        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
		    }

		    /**
		     * Checks if `value` is classified as a `Symbol` primitive or object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
		     * @example
		     *
		     * _.isSymbol(Symbol.iterator);
		     * // => true
		     *
		     * _.isSymbol('abc');
		     * // => false
		     */
		    function isSymbol(value) {
		      return typeof value == 'symbol' ||
		        (isObjectLike(value) && baseGetTag(value) == symbolTag);
		    }

		    /**
		     * Checks if `value` is classified as a typed array.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		     * @example
		     *
		     * _.isTypedArray(new Uint8Array);
		     * // => true
		     *
		     * _.isTypedArray([]);
		     * // => false
		     */
		    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

		    /**
		     * Checks if `value` is `undefined`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
		     * @example
		     *
		     * _.isUndefined(void 0);
		     * // => true
		     *
		     * _.isUndefined(null);
		     * // => false
		     */
		    function isUndefined(value) {
		      return value === undefined$1;
		    }

		    /**
		     * Checks if `value` is classified as a `WeakMap` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
		     * @example
		     *
		     * _.isWeakMap(new WeakMap);
		     * // => true
		     *
		     * _.isWeakMap(new Map);
		     * // => false
		     */
		    function isWeakMap(value) {
		      return isObjectLike(value) && getTag(value) == weakMapTag;
		    }

		    /**
		     * Checks if `value` is classified as a `WeakSet` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
		     * @example
		     *
		     * _.isWeakSet(new WeakSet);
		     * // => true
		     *
		     * _.isWeakSet(new Set);
		     * // => false
		     */
		    function isWeakSet(value) {
		      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
		    }

		    /**
		     * Checks if `value` is less than `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than `other`,
		     *  else `false`.
		     * @see _.gt
		     * @example
		     *
		     * _.lt(1, 3);
		     * // => true
		     *
		     * _.lt(3, 3);
		     * // => false
		     *
		     * _.lt(3, 1);
		     * // => false
		     */
		    var lt = createRelationalOperation(baseLt);

		    /**
		     * Checks if `value` is less than or equal to `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than or equal to
		     *  `other`, else `false`.
		     * @see _.gte
		     * @example
		     *
		     * _.lte(1, 3);
		     * // => true
		     *
		     * _.lte(3, 3);
		     * // => true
		     *
		     * _.lte(3, 1);
		     * // => false
		     */
		    var lte = createRelationalOperation(function(value, other) {
		      return value <= other;
		    });

		    /**
		     * Converts `value` to an array.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {Array} Returns the converted array.
		     * @example
		     *
		     * _.toArray({ 'a': 1, 'b': 2 });
		     * // => [1, 2]
		     *
		     * _.toArray('abc');
		     * // => ['a', 'b', 'c']
		     *
		     * _.toArray(1);
		     * // => []
		     *
		     * _.toArray(null);
		     * // => []
		     */
		    function toArray(value) {
		      if (!value) {
		        return [];
		      }
		      if (isArrayLike(value)) {
		        return isString(value) ? stringToArray(value) : copyArray(value);
		      }
		      if (symIterator && value[symIterator]) {
		        return iteratorToArray(value[symIterator]());
		      }
		      var tag = getTag(value),
		          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

		      return func(value);
		    }

		    /**
		     * Converts `value` to a finite number.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.12.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted number.
		     * @example
		     *
		     * _.toFinite(3.2);
		     * // => 3.2
		     *
		     * _.toFinite(Number.MIN_VALUE);
		     * // => 5e-324
		     *
		     * _.toFinite(Infinity);
		     * // => 1.7976931348623157e+308
		     *
		     * _.toFinite('3.2');
		     * // => 3.2
		     */
		    function toFinite(value) {
		      if (!value) {
		        return value === 0 ? value : 0;
		      }
		      value = toNumber(value);
		      if (value === INFINITY || value === -INFINITY) {
		        var sign = (value < 0 ? -1 : 1);
		        return sign * MAX_INTEGER;
		      }
		      return value === value ? value : 0;
		    }

		    /**
		     * Converts `value` to an integer.
		     *
		     * **Note:** This method is loosely based on
		     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toInteger(3.2);
		     * // => 3
		     *
		     * _.toInteger(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toInteger(Infinity);
		     * // => 1.7976931348623157e+308
		     *
		     * _.toInteger('3.2');
		     * // => 3
		     */
		    function toInteger(value) {
		      var result = toFinite(value),
		          remainder = result % 1;

		      return result === result ? (remainder ? result - remainder : result) : 0;
		    }

		    /**
		     * Converts `value` to an integer suitable for use as the length of an
		     * array-like object.
		     *
		     * **Note:** This method is based on
		     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toLength(3.2);
		     * // => 3
		     *
		     * _.toLength(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toLength(Infinity);
		     * // => 4294967295
		     *
		     * _.toLength('3.2');
		     * // => 3
		     */
		    function toLength(value) {
		      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
		    }

		    /**
		     * Converts `value` to a number.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to process.
		     * @returns {number} Returns the number.
		     * @example
		     *
		     * _.toNumber(3.2);
		     * // => 3.2
		     *
		     * _.toNumber(Number.MIN_VALUE);
		     * // => 5e-324
		     *
		     * _.toNumber(Infinity);
		     * // => Infinity
		     *
		     * _.toNumber('3.2');
		     * // => 3.2
		     */
		    function toNumber(value) {
		      if (typeof value == 'number') {
		        return value;
		      }
		      if (isSymbol(value)) {
		        return NAN;
		      }
		      if (isObject(value)) {
		        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
		        value = isObject(other) ? (other + '') : other;
		      }
		      if (typeof value != 'string') {
		        return value === 0 ? value : +value;
		      }
		      value = baseTrim(value);
		      var isBinary = reIsBinary.test(value);
		      return (isBinary || reIsOctal.test(value))
		        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
		        : (reIsBadHex.test(value) ? NAN : +value);
		    }

		    /**
		     * Converts `value` to a plain object flattening inherited enumerable string
		     * keyed properties of `value` to own properties of the plain object.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {Object} Returns the converted plain object.
		     * @example
		     *
		     * function Foo() {
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.assign({ 'a': 1 }, new Foo);
		     * // => { 'a': 1, 'b': 2 }
		     *
		     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
		     * // => { 'a': 1, 'b': 2, 'c': 3 }
		     */
		    function toPlainObject(value) {
		      return copyObject(value, keysIn(value));
		    }

		    /**
		     * Converts `value` to a safe integer. A safe integer can be compared and
		     * represented correctly.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toSafeInteger(3.2);
		     * // => 3
		     *
		     * _.toSafeInteger(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toSafeInteger(Infinity);
		     * // => 9007199254740991
		     *
		     * _.toSafeInteger('3.2');
		     * // => 3
		     */
		    function toSafeInteger(value) {
		      return value
		        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
		        : (value === 0 ? value : 0);
		    }

		    /**
		     * Converts `value` to a string. An empty string is returned for `null`
		     * and `undefined` values. The sign of `-0` is preserved.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.toString(null);
		     * // => ''
		     *
		     * _.toString(-0);
		     * // => '-0'
		     *
		     * _.toString([1, 2, 3]);
		     * // => '1,2,3'
		     */
		    function toString(value) {
		      return value == null ? '' : baseToString(value);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Assigns own enumerable string keyed properties of source objects to the
		     * destination object. Source objects are applied from left to right.
		     * Subsequent sources overwrite property assignments of previous sources.
		     *
		     * **Note:** This method mutates `object` and is loosely based on
		     * [`Object.assign`](https://mdn.io/Object/assign).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.10.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.assignIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * function Bar() {
		     *   this.c = 3;
		     * }
		     *
		     * Foo.prototype.b = 2;
		     * Bar.prototype.d = 4;
		     *
		     * _.assign({ 'a': 0 }, new Foo, new Bar);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    var assign = createAssigner(function(object, source) {
		      if (isPrototype(source) || isArrayLike(source)) {
		        copyObject(source, keys(source), object);
		        return;
		      }
		      for (var key in source) {
		        if (hasOwnProperty.call(source, key)) {
		          assignValue(object, key, source[key]);
		        }
		      }
		    });

		    /**
		     * This method is like `_.assign` except that it iterates over own and
		     * inherited source properties.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias extend
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.assign
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * function Bar() {
		     *   this.c = 3;
		     * }
		     *
		     * Foo.prototype.b = 2;
		     * Bar.prototype.d = 4;
		     *
		     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
		     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
		     */
		    var assignIn = createAssigner(function(object, source) {
		      copyObject(source, keysIn(source), object);
		    });

		    /**
		     * This method is like `_.assignIn` except that it accepts `customizer`
		     * which is invoked to produce the assigned values. If `customizer` returns
		     * `undefined`, assignment is handled by the method instead. The `customizer`
		     * is invoked with five arguments: (objValue, srcValue, key, object, source).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias extendWith
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @see _.assignWith
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   return _.isUndefined(objValue) ? srcValue : objValue;
		     * }
		     *
		     * var defaults = _.partialRight(_.assignInWith, customizer);
		     *
		     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
		      copyObject(source, keysIn(source), object, customizer);
		    });

		    /**
		     * This method is like `_.assign` except that it accepts `customizer`
		     * which is invoked to produce the assigned values. If `customizer` returns
		     * `undefined`, assignment is handled by the method instead. The `customizer`
		     * is invoked with five arguments: (objValue, srcValue, key, object, source).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @see _.assignInWith
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   return _.isUndefined(objValue) ? srcValue : objValue;
		     * }
		     *
		     * var defaults = _.partialRight(_.assignWith, customizer);
		     *
		     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
		      copyObject(source, keys(source), object, customizer);
		    });

		    /**
		     * Creates an array of values corresponding to `paths` of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Array} Returns the picked values.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
		     *
		     * _.at(object, ['a[0].b.c', 'a[1]']);
		     * // => [3, 4]
		     */
		    var at = flatRest(baseAt);

		    /**
		     * Creates an object that inherits from the `prototype` object. If a
		     * `properties` object is given, its own enumerable string keyed properties
		     * are assigned to the created object.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.3.0
		     * @category Object
		     * @param {Object} prototype The object to inherit from.
		     * @param {Object} [properties] The properties to assign to the object.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * function Shape() {
		     *   this.x = 0;
		     *   this.y = 0;
		     * }
		     *
		     * function Circle() {
		     *   Shape.call(this);
		     * }
		     *
		     * Circle.prototype = _.create(Shape.prototype, {
		     *   'constructor': Circle
		     * });
		     *
		     * var circle = new Circle;
		     * circle instanceof Circle;
		     * // => true
		     *
		     * circle instanceof Shape;
		     * // => true
		     */
		    function create(prototype, properties) {
		      var result = baseCreate(prototype);
		      return properties == null ? result : baseAssign(result, properties);
		    }

		    /**
		     * Assigns own and inherited enumerable string keyed properties of source
		     * objects to the destination object for all destination properties that
		     * resolve to `undefined`. Source objects are applied from left to right.
		     * Once a property is set, additional values of the same property are ignored.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.defaultsDeep
		     * @example
		     *
		     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var defaults = baseRest(function(object, sources) {
		      object = Object(object);

		      var index = -1;
		      var length = sources.length;
		      var guard = length > 2 ? sources[2] : undefined$1;

		      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
		        length = 1;
		      }

		      while (++index < length) {
		        var source = sources[index];
		        var props = keysIn(source);
		        var propsIndex = -1;
		        var propsLength = props.length;

		        while (++propsIndex < propsLength) {
		          var key = props[propsIndex];
		          var value = object[key];

		          if (value === undefined$1 ||
		              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
		            object[key] = source[key];
		          }
		        }
		      }

		      return object;
		    });

		    /**
		     * This method is like `_.defaults` except that it recursively assigns
		     * default properties.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.defaults
		     * @example
		     *
		     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
		     * // => { 'a': { 'b': 2, 'c': 3 } }
		     */
		    var defaultsDeep = baseRest(function(args) {
		      args.push(undefined$1, customDefaultsMerge);
		      return apply(mergeWith, undefined$1, args);
		    });

		    /**
		     * This method is like `_.find` except that it returns the key of the first
		     * element `predicate` returns truthy for instead of the element itself.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {string|undefined} Returns the key of the matched element,
		     *  else `undefined`.
		     * @example
		     *
		     * var users = {
		     *   'barney':  { 'age': 36, 'active': true },
		     *   'fred':    { 'age': 40, 'active': false },
		     *   'pebbles': { 'age': 1,  'active': true }
		     * };
		     *
		     * _.findKey(users, function(o) { return o.age < 40; });
		     * // => 'barney' (iteration order is not guaranteed)
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findKey(users, { 'age': 1, 'active': true });
		     * // => 'pebbles'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findKey(users, ['active', false]);
		     * // => 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findKey(users, 'active');
		     * // => 'barney'
		     */
		    function findKey(object, predicate) {
		      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
		    }

		    /**
		     * This method is like `_.findKey` except that it iterates over elements of
		     * a collection in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {string|undefined} Returns the key of the matched element,
		     *  else `undefined`.
		     * @example
		     *
		     * var users = {
		     *   'barney':  { 'age': 36, 'active': true },
		     *   'fred':    { 'age': 40, 'active': false },
		     *   'pebbles': { 'age': 1,  'active': true }
		     * };
		     *
		     * _.findLastKey(users, function(o) { return o.age < 40; });
		     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findLastKey(users, { 'age': 36, 'active': true });
		     * // => 'barney'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findLastKey(users, ['active', false]);
		     * // => 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findLastKey(users, 'active');
		     * // => 'pebbles'
		     */
		    function findLastKey(object, predicate) {
		      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
		    }

		    /**
		     * Iterates over own and inherited enumerable string keyed properties of an
		     * object and invokes `iteratee` for each property. The iteratee is invoked
		     * with three arguments: (value, key, object). Iteratee functions may exit
		     * iteration early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forInRight
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forIn(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
		     */
		    function forIn(object, iteratee) {
		      return object == null
		        ? object
		        : baseFor(object, getIteratee(iteratee, 3), keysIn);
		    }

		    /**
		     * This method is like `_.forIn` except that it iterates over properties of
		     * `object` in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forInRight(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
		     */
		    function forInRight(object, iteratee) {
		      return object == null
		        ? object
		        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
		    }

		    /**
		     * Iterates over own enumerable string keyed properties of an object and
		     * invokes `iteratee` for each property. The iteratee is invoked with three
		     * arguments: (value, key, object). Iteratee functions may exit iteration
		     * early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forOwnRight
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forOwn(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
		     */
		    function forOwn(object, iteratee) {
		      return object && baseForOwn(object, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.forOwn` except that it iterates over properties of
		     * `object` in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forOwn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forOwnRight(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
		     */
		    function forOwnRight(object, iteratee) {
		      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
		    }

		    /**
		     * Creates an array of function property names from own enumerable properties
		     * of `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @returns {Array} Returns the function names.
		     * @see _.functionsIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = _.constant('a');
		     *   this.b = _.constant('b');
		     * }
		     *
		     * Foo.prototype.c = _.constant('c');
		     *
		     * _.functions(new Foo);
		     * // => ['a', 'b']
		     */
		    function functions(object) {
		      return object == null ? [] : baseFunctions(object, keys(object));
		    }

		    /**
		     * Creates an array of function property names from own and inherited
		     * enumerable properties of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @returns {Array} Returns the function names.
		     * @see _.functions
		     * @example
		     *
		     * function Foo() {
		     *   this.a = _.constant('a');
		     *   this.b = _.constant('b');
		     * }
		     *
		     * Foo.prototype.c = _.constant('c');
		     *
		     * _.functionsIn(new Foo);
		     * // => ['a', 'b', 'c']
		     */
		    function functionsIn(object) {
		      return object == null ? [] : baseFunctions(object, keysIn(object));
		    }

		    /**
		     * Gets the value at `path` of `object`. If the resolved value is
		     * `undefined`, the `defaultValue` is returned in its place.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to get.
		     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.get(object, 'a[0].b.c');
		     * // => 3
		     *
		     * _.get(object, ['a', '0', 'b', 'c']);
		     * // => 3
		     *
		     * _.get(object, 'a.b.c', 'default');
		     * // => 'default'
		     */
		    function get(object, path, defaultValue) {
		      var result = object == null ? undefined$1 : baseGet(object, path);
		      return result === undefined$1 ? defaultValue : result;
		    }

		    /**
		     * Checks if `path` is a direct property of `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     * @example
		     *
		     * var object = { 'a': { 'b': 2 } };
		     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
		     *
		     * _.has(object, 'a');
		     * // => true
		     *
		     * _.has(object, 'a.b');
		     * // => true
		     *
		     * _.has(object, ['a', 'b']);
		     * // => true
		     *
		     * _.has(other, 'a');
		     * // => false
		     */
		    function has(object, path) {
		      return object != null && hasPath(object, path, baseHas);
		    }

		    /**
		     * Checks if `path` is a direct or inherited property of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     * @example
		     *
		     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
		     *
		     * _.hasIn(object, 'a');
		     * // => true
		     *
		     * _.hasIn(object, 'a.b');
		     * // => true
		     *
		     * _.hasIn(object, ['a', 'b']);
		     * // => true
		     *
		     * _.hasIn(object, 'b');
		     * // => false
		     */
		    function hasIn(object, path) {
		      return object != null && hasPath(object, path, baseHasIn);
		    }

		    /**
		     * Creates an object composed of the inverted keys and values of `object`.
		     * If `object` contains duplicate values, subsequent values overwrite
		     * property assignments of previous values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.7.0
		     * @category Object
		     * @param {Object} object The object to invert.
		     * @returns {Object} Returns the new inverted object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2, 'c': 1 };
		     *
		     * _.invert(object);
		     * // => { '1': 'c', '2': 'b' }
		     */
		    var invert = createInverter(function(result, value, key) {
		      if (value != null &&
		          typeof value.toString != 'function') {
		        value = nativeObjectToString.call(value);
		      }

		      result[value] = key;
		    }, constant(identity));

		    /**
		     * This method is like `_.invert` except that the inverted object is generated
		     * from the results of running each element of `object` thru `iteratee`. The
		     * corresponding inverted value of each inverted key is an array of keys
		     * responsible for generating the inverted value. The iteratee is invoked
		     * with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.1.0
		     * @category Object
		     * @param {Object} object The object to invert.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Object} Returns the new inverted object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2, 'c': 1 };
		     *
		     * _.invertBy(object);
		     * // => { '1': ['a', 'c'], '2': ['b'] }
		     *
		     * _.invertBy(object, function(value) {
		     *   return 'group' + value;
		     * });
		     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
		     */
		    var invertBy = createInverter(function(result, value, key) {
		      if (value != null &&
		          typeof value.toString != 'function') {
		        value = nativeObjectToString.call(value);
		      }

		      if (hasOwnProperty.call(result, value)) {
		        result[value].push(key);
		      } else {
		        result[value] = [key];
		      }
		    }, getIteratee);

		    /**
		     * Invokes the method at `path` of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {*} Returns the result of the invoked method.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
		     *
		     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
		     * // => [2, 3]
		     */
		    var invoke = baseRest(baseInvoke);

		    /**
		     * Creates an array of the own enumerable property names of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects. See the
		     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		     * for more details.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.keys(new Foo);
		     * // => ['a', 'b'] (iteration order is not guaranteed)
		     *
		     * _.keys('hi');
		     * // => ['0', '1']
		     */
		    function keys(object) {
		      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
		    }

		    /**
		     * Creates an array of the own and inherited enumerable property names of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.keysIn(new Foo);
		     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
		     */
		    function keysIn(object) {
		      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
		    }

		    /**
		     * The opposite of `_.mapValues`; this method creates an object with the
		     * same values as `object` and keys generated by running each own enumerable
		     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
		     * with three arguments: (value, key, object).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns the new mapped object.
		     * @see _.mapValues
		     * @example
		     *
		     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
		     *   return key + value;
		     * });
		     * // => { 'a1': 1, 'b2': 2 }
		     */
		    function mapKeys(object, iteratee) {
		      var result = {};
		      iteratee = getIteratee(iteratee, 3);

		      baseForOwn(object, function(value, key, object) {
		        baseAssignValue(result, iteratee(value, key, object), value);
		      });
		      return result;
		    }

		    /**
		     * Creates an object with the same keys as `object` and values generated
		     * by running each own enumerable string keyed property of `object` thru
		     * `iteratee`. The iteratee is invoked with three arguments:
		     * (value, key, object).
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns the new mapped object.
		     * @see _.mapKeys
		     * @example
		     *
		     * var users = {
		     *   'fred':    { 'user': 'fred',    'age': 40 },
		     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
		     * };
		     *
		     * _.mapValues(users, function(o) { return o.age; });
		     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.mapValues(users, 'age');
		     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
		     */
		    function mapValues(object, iteratee) {
		      var result = {};
		      iteratee = getIteratee(iteratee, 3);

		      baseForOwn(object, function(value, key, object) {
		        baseAssignValue(result, key, iteratee(value, key, object));
		      });
		      return result;
		    }

		    /**
		     * This method is like `_.assign` except that it recursively merges own and
		     * inherited enumerable string keyed properties of source objects into the
		     * destination object. Source properties that resolve to `undefined` are
		     * skipped if a destination value exists. Array and plain object properties
		     * are merged recursively. Other objects and value types are overridden by
		     * assignment. Source objects are applied from left to right. Subsequent
		     * sources overwrite property assignments of previous sources.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {
		     *   'a': [{ 'b': 2 }, { 'd': 4 }]
		     * };
		     *
		     * var other = {
		     *   'a': [{ 'c': 3 }, { 'e': 5 }]
		     * };
		     *
		     * _.merge(object, other);
		     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
		     */
		    var merge = createAssigner(function(object, source, srcIndex) {
		      baseMerge(object, source, srcIndex);
		    });

		    /**
		     * This method is like `_.merge` except that it accepts `customizer` which
		     * is invoked to produce the merged values of the destination and source
		     * properties. If `customizer` returns `undefined`, merging is handled by the
		     * method instead. The `customizer` is invoked with six arguments:
		     * (objValue, srcValue, key, object, source, stack).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} customizer The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   if (_.isArray(objValue)) {
		     *     return objValue.concat(srcValue);
		     *   }
		     * }
		     *
		     * var object = { 'a': [1], 'b': [2] };
		     * var other = { 'a': [3], 'b': [4] };
		     *
		     * _.mergeWith(object, other, customizer);
		     * // => { 'a': [1, 3], 'b': [2, 4] }
		     */
		    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
		      baseMerge(object, source, srcIndex, customizer);
		    });

		    /**
		     * The opposite of `_.pick`; this method creates an object composed of the
		     * own and inherited enumerable property paths of `object` that are not omitted.
		     *
		     * **Note:** This method is considerably slower than `_.pick`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {...(string|string[])} [paths] The property paths to omit.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.omit(object, ['a', 'c']);
		     * // => { 'b': '2' }
		     */
		    var omit = flatRest(function(object, paths) {
		      var result = {};
		      if (object == null) {
		        return result;
		      }
		      var isDeep = false;
		      paths = arrayMap(paths, function(path) {
		        path = castPath(path, object);
		        isDeep || (isDeep = path.length > 1);
		        return path;
		      });
		      copyObject(object, getAllKeysIn(object), result);
		      if (isDeep) {
		        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
		      }
		      var length = paths.length;
		      while (length--) {
		        baseUnset(result, paths[length]);
		      }
		      return result;
		    });

		    /**
		     * The opposite of `_.pickBy`; this method creates an object composed of
		     * the own and inherited enumerable string keyed properties of `object` that
		     * `predicate` doesn't return truthy for. The predicate is invoked with two
		     * arguments: (value, key).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {Function} [predicate=_.identity] The function invoked per property.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.omitBy(object, _.isNumber);
		     * // => { 'b': '2' }
		     */
		    function omitBy(object, predicate) {
		      return pickBy(object, negate(getIteratee(predicate)));
		    }

		    /**
		     * Creates an object composed of the picked `object` properties.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.pick(object, ['a', 'c']);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    var pick = flatRest(function(object, paths) {
		      return object == null ? {} : basePick(object, paths);
		    });

		    /**
		     * Creates an object composed of the `object` properties `predicate` returns
		     * truthy for. The predicate is invoked with two arguments: (value, key).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {Function} [predicate=_.identity] The function invoked per property.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.pickBy(object, _.isNumber);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    function pickBy(object, predicate) {
		      if (object == null) {
		        return {};
		      }
		      var props = arrayMap(getAllKeysIn(object), function(prop) {
		        return [prop];
		      });
		      predicate = getIteratee(predicate);
		      return basePickBy(object, props, function(value, path) {
		        return predicate(value, path[0]);
		      });
		    }

		    /**
		     * This method is like `_.get` except that if the resolved value is a
		     * function it's invoked with the `this` binding of its parent object and
		     * its result is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to resolve.
		     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
		     *
		     * _.result(object, 'a[0].b.c1');
		     * // => 3
		     *
		     * _.result(object, 'a[0].b.c2');
		     * // => 4
		     *
		     * _.result(object, 'a[0].b.c3', 'default');
		     * // => 'default'
		     *
		     * _.result(object, 'a[0].b.c3', _.constant('default'));
		     * // => 'default'
		     */
		    function result(object, path, defaultValue) {
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length;

		      // Ensure the loop is entered when path is empty.
		      if (!length) {
		        length = 1;
		        object = undefined$1;
		      }
		      while (++index < length) {
		        var value = object == null ? undefined$1 : object[toKey(path[index])];
		        if (value === undefined$1) {
		          index = length;
		          value = defaultValue;
		        }
		        object = isFunction(value) ? value.call(object) : value;
		      }
		      return object;
		    }

		    /**
		     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
		     * it's created. Arrays are created for missing index properties while objects
		     * are created for all other missing properties. Use `_.setWith` to customize
		     * `path` creation.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.set(object, 'a[0].b.c', 4);
		     * console.log(object.a[0].b.c);
		     * // => 4
		     *
		     * _.set(object, ['x', '0', 'y', 'z'], 5);
		     * console.log(object.x[0].y.z);
		     * // => 5
		     */
		    function set(object, path, value) {
		      return object == null ? object : baseSet(object, path, value);
		    }

		    /**
		     * This method is like `_.set` except that it accepts `customizer` which is
		     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
		     * path creation is handled by the method instead. The `customizer` is invoked
		     * with three arguments: (nsValue, key, nsObject).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {};
		     *
		     * _.setWith(object, '[0][1]', 'a', Object);
		     * // => { '0': { '1': 'a' } }
		     */
		    function setWith(object, path, value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return object == null ? object : baseSet(object, path, value, customizer);
		    }

		    /**
		     * Creates an array of own enumerable string keyed-value pairs for `object`
		     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
		     * entries are returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias entries
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the key-value pairs.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.toPairs(new Foo);
		     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
		     */
		    var toPairs = createToPairs(keys);

		    /**
		     * Creates an array of own and inherited enumerable string keyed-value pairs
		     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
		     * or set, its entries are returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias entriesIn
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the key-value pairs.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.toPairsIn(new Foo);
		     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
		     */
		    var toPairsIn = createToPairs(keysIn);

		    /**
		     * An alternative to `_.reduce`; this method transforms `object` to a new
		     * `accumulator` object which is the result of running each of its own
		     * enumerable string keyed properties thru `iteratee`, with each invocation
		     * potentially mutating the `accumulator` object. If `accumulator` is not
		     * provided, a new object with the same `[[Prototype]]` will be used. The
		     * iteratee is invoked with four arguments: (accumulator, value, key, object).
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The custom accumulator value.
		     * @returns {*} Returns the accumulated value.
		     * @example
		     *
		     * _.transform([2, 3, 4], function(result, n) {
		     *   result.push(n *= n);
		     *   return n % 2 == 0;
		     * }, []);
		     * // => [4, 9]
		     *
		     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
		     *   (result[value] || (result[value] = [])).push(key);
		     * }, {});
		     * // => { '1': ['a', 'c'], '2': ['b'] }
		     */
		    function transform(object, iteratee, accumulator) {
		      var isArr = isArray(object),
		          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

		      iteratee = getIteratee(iteratee, 4);
		      if (accumulator == null) {
		        var Ctor = object && object.constructor;
		        if (isArrLike) {
		          accumulator = isArr ? new Ctor : [];
		        }
		        else if (isObject(object)) {
		          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
		        }
		        else {
		          accumulator = {};
		        }
		      }
		      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
		        return iteratee(accumulator, value, index, object);
		      });
		      return accumulator;
		    }

		    /**
		     * Removes the property at `path` of `object`.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to unset.
		     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
		     * _.unset(object, 'a[0].b.c');
		     * // => true
		     *
		     * console.log(object);
		     * // => { 'a': [{ 'b': {} }] };
		     *
		     * _.unset(object, ['a', '0', 'b', 'c']);
		     * // => true
		     *
		     * console.log(object);
		     * // => { 'a': [{ 'b': {} }] };
		     */
		    function unset(object, path) {
		      return object == null ? true : baseUnset(object, path);
		    }

		    /**
		     * This method is like `_.set` except that accepts `updater` to produce the
		     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
		     * is invoked with one argument: (value).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {Function} updater The function to produce the updated value.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
		     * console.log(object.a[0].b.c);
		     * // => 9
		     *
		     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
		     * console.log(object.x[0].y.z);
		     * // => 0
		     */
		    function update(object, path, updater) {
		      return object == null ? object : baseUpdate(object, path, castFunction(updater));
		    }

		    /**
		     * This method is like `_.update` except that it accepts `customizer` which is
		     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
		     * path creation is handled by the method instead. The `customizer` is invoked
		     * with three arguments: (nsValue, key, nsObject).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {Function} updater The function to produce the updated value.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {};
		     *
		     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
		     * // => { '0': { '1': 'a' } }
		     */
		    function updateWith(object, path, updater, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
		    }

		    /**
		     * Creates an array of the own enumerable string keyed property values of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property values.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.values(new Foo);
		     * // => [1, 2] (iteration order is not guaranteed)
		     *
		     * _.values('hi');
		     * // => ['h', 'i']
		     */
		    function values(object) {
		      return object == null ? [] : baseValues(object, keys(object));
		    }

		    /**
		     * Creates an array of the own and inherited enumerable string keyed property
		     * values of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property values.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.valuesIn(new Foo);
		     * // => [1, 2, 3] (iteration order is not guaranteed)
		     */
		    function valuesIn(object) {
		      return object == null ? [] : baseValues(object, keysIn(object));
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Clamps `number` within the inclusive `lower` and `upper` bounds.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Number
		     * @param {number} number The number to clamp.
		     * @param {number} [lower] The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the clamped number.
		     * @example
		     *
		     * _.clamp(-10, -5, 5);
		     * // => -5
		     *
		     * _.clamp(10, -5, 5);
		     * // => 5
		     */
		    function clamp(number, lower, upper) {
		      if (upper === undefined$1) {
		        upper = lower;
		        lower = undefined$1;
		      }
		      if (upper !== undefined$1) {
		        upper = toNumber(upper);
		        upper = upper === upper ? upper : 0;
		      }
		      if (lower !== undefined$1) {
		        lower = toNumber(lower);
		        lower = lower === lower ? lower : 0;
		      }
		      return baseClamp(toNumber(number), lower, upper);
		    }

		    /**
		     * Checks if `n` is between `start` and up to, but not including, `end`. If
		     * `end` is not specified, it's set to `start` with `start` then set to `0`.
		     * If `start` is greater than `end` the params are swapped to support
		     * negative ranges.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.3.0
		     * @category Number
		     * @param {number} number The number to check.
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
		     * @see _.range, _.rangeRight
		     * @example
		     *
		     * _.inRange(3, 2, 4);
		     * // => true
		     *
		     * _.inRange(4, 8);
		     * // => true
		     *
		     * _.inRange(4, 2);
		     * // => false
		     *
		     * _.inRange(2, 2);
		     * // => false
		     *
		     * _.inRange(1.2, 2);
		     * // => true
		     *
		     * _.inRange(5.2, 4);
		     * // => false
		     *
		     * _.inRange(-3, -2, -6);
		     * // => true
		     */
		    function inRange(number, start, end) {
		      start = toFinite(start);
		      if (end === undefined$1) {
		        end = start;
		        start = 0;
		      } else {
		        end = toFinite(end);
		      }
		      number = toNumber(number);
		      return baseInRange(number, start, end);
		    }

		    /**
		     * Produces a random number between the inclusive `lower` and `upper` bounds.
		     * If only one argument is provided a number between `0` and the given number
		     * is returned. If `floating` is `true`, or either `lower` or `upper` are
		     * floats, a floating-point number is returned instead of an integer.
		     *
		     * **Note:** JavaScript follows the IEEE-754 standard for resolving
		     * floating-point values which can produce unexpected results.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.7.0
		     * @category Number
		     * @param {number} [lower=0] The lower bound.
		     * @param {number} [upper=1] The upper bound.
		     * @param {boolean} [floating] Specify returning a floating-point number.
		     * @returns {number} Returns the random number.
		     * @example
		     *
		     * _.random(0, 5);
		     * // => an integer between 0 and 5
		     *
		     * _.random(5);
		     * // => also an integer between 0 and 5
		     *
		     * _.random(5, true);
		     * // => a floating-point number between 0 and 5
		     *
		     * _.random(1.2, 5.2);
		     * // => a floating-point number between 1.2 and 5.2
		     */
		    function random(lower, upper, floating) {
		      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
		        upper = floating = undefined$1;
		      }
		      if (floating === undefined$1) {
		        if (typeof upper == 'boolean') {
		          floating = upper;
		          upper = undefined$1;
		        }
		        else if (typeof lower == 'boolean') {
		          floating = lower;
		          lower = undefined$1;
		        }
		      }
		      if (lower === undefined$1 && upper === undefined$1) {
		        lower = 0;
		        upper = 1;
		      }
		      else {
		        lower = toFinite(lower);
		        if (upper === undefined$1) {
		          upper = lower;
		          lower = 0;
		        } else {
		          upper = toFinite(upper);
		        }
		      }
		      if (lower > upper) {
		        var temp = lower;
		        lower = upper;
		        upper = temp;
		      }
		      if (floating || lower % 1 || upper % 1) {
		        var rand = nativeRandom();
		        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
		      }
		      return baseRandom(lower, upper);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the camel cased string.
		     * @example
		     *
		     * _.camelCase('Foo Bar');
		     * // => 'fooBar'
		     *
		     * _.camelCase('--foo-bar--');
		     * // => 'fooBar'
		     *
		     * _.camelCase('__FOO_BAR__');
		     * // => 'fooBar'
		     */
		    var camelCase = createCompounder(function(result, word, index) {
		      word = word.toLowerCase();
		      return result + (index ? capitalize(word) : word);
		    });

		    /**
		     * Converts the first character of `string` to upper case and the remaining
		     * to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to capitalize.
		     * @returns {string} Returns the capitalized string.
		     * @example
		     *
		     * _.capitalize('FRED');
		     * // => 'Fred'
		     */
		    function capitalize(string) {
		      return upperFirst(toString(string).toLowerCase());
		    }

		    /**
		     * Deburrs `string` by converting
		     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
		     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
		     * letters to basic Latin letters and removing
		     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to deburr.
		     * @returns {string} Returns the deburred string.
		     * @example
		     *
		     * _.deburr('déjà vu');
		     * // => 'deja vu'
		     */
		    function deburr(string) {
		      string = toString(string);
		      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
		    }

		    /**
		     * Checks if `string` ends with the given target string.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {string} [target] The string to search for.
		     * @param {number} [position=string.length] The position to search up to.
		     * @returns {boolean} Returns `true` if `string` ends with `target`,
		     *  else `false`.
		     * @example
		     *
		     * _.endsWith('abc', 'c');
		     * // => true
		     *
		     * _.endsWith('abc', 'b');
		     * // => false
		     *
		     * _.endsWith('abc', 'b', 2);
		     * // => true
		     */
		    function endsWith(string, target, position) {
		      string = toString(string);
		      target = baseToString(target);

		      var length = string.length;
		      position = position === undefined$1
		        ? length
		        : baseClamp(toInteger(position), 0, length);

		      var end = position;
		      position -= target.length;
		      return position >= 0 && string.slice(position, end) == target;
		    }

		    /**
		     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
		     * corresponding HTML entities.
		     *
		     * **Note:** No other characters are escaped. To escape additional
		     * characters use a third-party library like [_he_](https://mths.be/he).
		     *
		     * Though the ">" character is escaped for symmetry, characters like
		     * ">" and "/" don't need escaping in HTML and have no special meaning
		     * unless they're part of a tag or unquoted attribute value. See
		     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
		     * (under "semi-related fun fact") for more details.
		     *
		     * When working with HTML you should always
		     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
		     * XSS vectors.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category String
		     * @param {string} [string=''] The string to escape.
		     * @returns {string} Returns the escaped string.
		     * @example
		     *
		     * _.escape('fred, barney, & pebbles');
		     * // => 'fred, barney, &amp; pebbles'
		     */
		    function escape(string) {
		      string = toString(string);
		      return (string && reHasUnescapedHtml.test(string))
		        ? string.replace(reUnescapedHtml, escapeHtmlChar)
		        : string;
		    }

		    /**
		     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
		     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to escape.
		     * @returns {string} Returns the escaped string.
		     * @example
		     *
		     * _.escapeRegExp('[lodash](https://lodash.com/)');
		     * // => '\[lodash\]\(https://lodash\.com/\)'
		     */
		    function escapeRegExp(string) {
		      string = toString(string);
		      return (string && reHasRegExpChar.test(string))
		        ? string.replace(reRegExpChar, '\\$&')
		        : string;
		    }

		    /**
		     * Converts `string` to
		     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the kebab cased string.
		     * @example
		     *
		     * _.kebabCase('Foo Bar');
		     * // => 'foo-bar'
		     *
		     * _.kebabCase('fooBar');
		     * // => 'foo-bar'
		     *
		     * _.kebabCase('__FOO_BAR__');
		     * // => 'foo-bar'
		     */
		    var kebabCase = createCompounder(function(result, word, index) {
		      return result + (index ? '-' : '') + word.toLowerCase();
		    });

		    /**
		     * Converts `string`, as space separated words, to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the lower cased string.
		     * @example
		     *
		     * _.lowerCase('--Foo-Bar--');
		     * // => 'foo bar'
		     *
		     * _.lowerCase('fooBar');
		     * // => 'foo bar'
		     *
		     * _.lowerCase('__FOO_BAR__');
		     * // => 'foo bar'
		     */
		    var lowerCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + word.toLowerCase();
		    });

		    /**
		     * Converts the first character of `string` to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.lowerFirst('Fred');
		     * // => 'fred'
		     *
		     * _.lowerFirst('FRED');
		     * // => 'fRED'
		     */
		    var lowerFirst = createCaseFirst('toLowerCase');

		    /**
		     * Pads `string` on the left and right sides if it's shorter than `length`.
		     * Padding characters are truncated if they can't be evenly divided by `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.pad('abc', 8);
		     * // => '  abc   '
		     *
		     * _.pad('abc', 8, '_-');
		     * // => '_-abc_-_'
		     *
		     * _.pad('abc', 3);
		     * // => 'abc'
		     */
		    function pad(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      if (!length || strLength >= length) {
		        return string;
		      }
		      var mid = (length - strLength) / 2;
		      return (
		        createPadding(nativeFloor(mid), chars) +
		        string +
		        createPadding(nativeCeil(mid), chars)
		      );
		    }

		    /**
		     * Pads `string` on the right side if it's shorter than `length`. Padding
		     * characters are truncated if they exceed `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.padEnd('abc', 6);
		     * // => 'abc   '
		     *
		     * _.padEnd('abc', 6, '_-');
		     * // => 'abc_-_'
		     *
		     * _.padEnd('abc', 3);
		     * // => 'abc'
		     */
		    function padEnd(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      return (length && strLength < length)
		        ? (string + createPadding(length - strLength, chars))
		        : string;
		    }

		    /**
		     * Pads `string` on the left side if it's shorter than `length`. Padding
		     * characters are truncated if they exceed `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.padStart('abc', 6);
		     * // => '   abc'
		     *
		     * _.padStart('abc', 6, '_-');
		     * // => '_-_abc'
		     *
		     * _.padStart('abc', 3);
		     * // => 'abc'
		     */
		    function padStart(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      return (length && strLength < length)
		        ? (createPadding(length - strLength, chars) + string)
		        : string;
		    }

		    /**
		     * Converts `string` to an integer of the specified radix. If `radix` is
		     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
		     * hexadecimal, in which case a `radix` of `16` is used.
		     *
		     * **Note:** This method aligns with the
		     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category String
		     * @param {string} string The string to convert.
		     * @param {number} [radix=10] The radix to interpret `value` by.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.parseInt('08');
		     * // => 8
		     *
		     * _.map(['6', '08', '10'], _.parseInt);
		     * // => [6, 8, 10]
		     */
		    function parseInt(string, radix, guard) {
		      if (guard || radix == null) {
		        radix = 0;
		      } else if (radix) {
		        radix = +radix;
		      }
		      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
		    }

		    /**
		     * Repeats the given string `n` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to repeat.
		     * @param {number} [n=1] The number of times to repeat the string.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the repeated string.
		     * @example
		     *
		     * _.repeat('*', 3);
		     * // => '***'
		     *
		     * _.repeat('abc', 2);
		     * // => 'abcabc'
		     *
		     * _.repeat('abc', 0);
		     * // => ''
		     */
		    function repeat(string, n, guard) {
		      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
		        n = 1;
		      } else {
		        n = toInteger(n);
		      }
		      return baseRepeat(toString(string), n);
		    }

		    /**
		     * Replaces matches for `pattern` in `string` with `replacement`.
		     *
		     * **Note:** This method is based on
		     * [`String#replace`](https://mdn.io/String/replace).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to modify.
		     * @param {RegExp|string} pattern The pattern to replace.
		     * @param {Function|string} replacement The match replacement.
		     * @returns {string} Returns the modified string.
		     * @example
		     *
		     * _.replace('Hi Fred', 'Fred', 'Barney');
		     * // => 'Hi Barney'
		     */
		    function replace() {
		      var args = arguments,
		          string = toString(args[0]);

		      return args.length < 3 ? string : string.replace(args[1], args[2]);
		    }

		    /**
		     * Converts `string` to
		     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the snake cased string.
		     * @example
		     *
		     * _.snakeCase('Foo Bar');
		     * // => 'foo_bar'
		     *
		     * _.snakeCase('fooBar');
		     * // => 'foo_bar'
		     *
		     * _.snakeCase('--FOO-BAR--');
		     * // => 'foo_bar'
		     */
		    var snakeCase = createCompounder(function(result, word, index) {
		      return result + (index ? '_' : '') + word.toLowerCase();
		    });

		    /**
		     * Splits `string` by `separator`.
		     *
		     * **Note:** This method is based on
		     * [`String#split`](https://mdn.io/String/split).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to split.
		     * @param {RegExp|string} separator The separator pattern to split by.
		     * @param {number} [limit] The length to truncate results to.
		     * @returns {Array} Returns the string segments.
		     * @example
		     *
		     * _.split('a-b-c', '-', 2);
		     * // => ['a', 'b']
		     */
		    function split(string, separator, limit) {
		      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
		        separator = limit = undefined$1;
		      }
		      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
		      if (!limit) {
		        return [];
		      }
		      string = toString(string);
		      if (string && (
		            typeof separator == 'string' ||
		            (separator != null && !isRegExp(separator))
		          )) {
		        separator = baseToString(separator);
		        if (!separator && hasUnicode(string)) {
		          return castSlice(stringToArray(string), 0, limit);
		        }
		      }
		      return string.split(separator, limit);
		    }

		    /**
		     * Converts `string` to
		     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.1.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the start cased string.
		     * @example
		     *
		     * _.startCase('--foo-bar--');
		     * // => 'Foo Bar'
		     *
		     * _.startCase('fooBar');
		     * // => 'Foo Bar'
		     *
		     * _.startCase('__FOO_BAR__');
		     * // => 'FOO BAR'
		     */
		    var startCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + upperFirst(word);
		    });

		    /**
		     * Checks if `string` starts with the given target string.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {string} [target] The string to search for.
		     * @param {number} [position=0] The position to search from.
		     * @returns {boolean} Returns `true` if `string` starts with `target`,
		     *  else `false`.
		     * @example
		     *
		     * _.startsWith('abc', 'a');
		     * // => true
		     *
		     * _.startsWith('abc', 'b');
		     * // => false
		     *
		     * _.startsWith('abc', 'b', 1);
		     * // => true
		     */
		    function startsWith(string, target, position) {
		      string = toString(string);
		      position = position == null
		        ? 0
		        : baseClamp(toInteger(position), 0, string.length);

		      target = baseToString(target);
		      return string.slice(position, position + target.length) == target;
		    }

		    /**
		     * Creates a compiled template function that can interpolate data properties
		     * in "interpolate" delimiters, HTML-escape interpolated data properties in
		     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
		     * properties may be accessed as free variables in the template. If a setting
		     * object is given, it takes precedence over `_.templateSettings` values.
		     *
		     * **Note:** In the development build `_.template` utilizes
		     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
		     * for easier debugging.
		     *
		     * For more information on precompiling templates see
		     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
		     *
		     * For more information on Chrome extension sandboxes see
		     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category String
		     * @param {string} [string=''] The template string.
		     * @param {Object} [options={}] The options object.
		     * @param {RegExp} [options.escape=_.templateSettings.escape]
		     *  The HTML "escape" delimiter.
		     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
		     *  The "evaluate" delimiter.
		     * @param {Object} [options.imports=_.templateSettings.imports]
		     *  An object to import into the template as free variables.
		     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
		     *  The "interpolate" delimiter.
		     * @param {string} [options.sourceURL='lodash.templateSources[n]']
		     *  The sourceURL of the compiled template.
		     * @param {string} [options.variable='obj']
		     *  The data object variable name.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the compiled template function.
		     * @example
		     *
		     * // Use the "interpolate" delimiter to create a compiled template.
		     * var compiled = _.template('hello <%= user %>!');
		     * compiled({ 'user': 'fred' });
		     * // => 'hello fred!'
		     *
		     * // Use the HTML "escape" delimiter to escape data property values.
		     * var compiled = _.template('<b><%- value %></b>');
		     * compiled({ 'value': '<script>' });
		     * // => '<b>&lt;script&gt;</b>'
		     *
		     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
		     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
		     * compiled({ 'users': ['fred', 'barney'] });
		     * // => '<li>fred</li><li>barney</li>'
		     *
		     * // Use the internal `print` function in "evaluate" delimiters.
		     * var compiled = _.template('<% print("hello " + user); %>!');
		     * compiled({ 'user': 'barney' });
		     * // => 'hello barney!'
		     *
		     * // Use the ES template literal delimiter as an "interpolate" delimiter.
		     * // Disable support by replacing the "interpolate" delimiter.
		     * var compiled = _.template('hello ${ user }!');
		     * compiled({ 'user': 'pebbles' });
		     * // => 'hello pebbles!'
		     *
		     * // Use backslashes to treat delimiters as plain text.
		     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
		     * compiled({ 'value': 'ignored' });
		     * // => '<%- value %>'
		     *
		     * // Use the `imports` option to import `jQuery` as `jq`.
		     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
		     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
		     * compiled({ 'users': ['fred', 'barney'] });
		     * // => '<li>fred</li><li>barney</li>'
		     *
		     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
		     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
		     * compiled(data);
		     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
		     *
		     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
		     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
		     * compiled.source;
		     * // => function(data) {
		     * //   var __t, __p = '';
		     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
		     * //   return __p;
		     * // }
		     *
		     * // Use custom template delimiters.
		     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
		     * var compiled = _.template('hello {{ user }}!');
		     * compiled({ 'user': 'mustache' });
		     * // => 'hello mustache!'
		     *
		     * // Use the `source` property to inline compiled templates for meaningful
		     * // line numbers in error messages and stack traces.
		     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
		     *   var JST = {\
		     *     "main": ' + _.template(mainText).source + '\
		     *   };\
		     * ');
		     */
		    function template(string, options, guard) {
		      // Based on John Resig's `tmpl` implementation
		      // (http://ejohn.org/blog/javascript-micro-templating/)
		      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
		      var settings = lodash.templateSettings;

		      if (guard && isIterateeCall(string, options, guard)) {
		        options = undefined$1;
		      }
		      string = toString(string);
		      options = assignInWith({}, options, settings, customDefaultsAssignIn);

		      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
		          importsKeys = keys(imports),
		          importsValues = baseValues(imports, importsKeys);

		      var isEscaping,
		          isEvaluating,
		          index = 0,
		          interpolate = options.interpolate || reNoMatch,
		          source = "__p += '";

		      // Compile the regexp to match each delimiter.
		      var reDelimiters = RegExp(
		        (options.escape || reNoMatch).source + '|' +
		        interpolate.source + '|' +
		        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
		        (options.evaluate || reNoMatch).source + '|$'
		      , 'g');

		      // Use a sourceURL for easier debugging.
		      // The sourceURL gets injected into the source that's eval-ed, so be careful
		      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
		      // and escape the comment, thus injecting code that gets evaled.
		      var sourceURL = '//# sourceURL=' +
		        (hasOwnProperty.call(options, 'sourceURL')
		          ? (options.sourceURL + '').replace(/\s/g, ' ')
		          : ('lodash.templateSources[' + (++templateCounter) + ']')
		        ) + '\n';

		      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
		        interpolateValue || (interpolateValue = esTemplateValue);

		        // Escape characters that can't be included in string literals.
		        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

		        // Replace delimiters with snippets.
		        if (escapeValue) {
		          isEscaping = true;
		          source += "' +\n__e(" + escapeValue + ") +\n'";
		        }
		        if (evaluateValue) {
		          isEvaluating = true;
		          source += "';\n" + evaluateValue + ";\n__p += '";
		        }
		        if (interpolateValue) {
		          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
		        }
		        index = offset + match.length;

		        // The JS engine embedded in Adobe products needs `match` returned in
		        // order to produce the correct `offset` value.
		        return match;
		      });

		      source += "';\n";

		      // If `variable` is not specified wrap a with-statement around the generated
		      // code to add the data object to the top of the scope chain.
		      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
		      if (!variable) {
		        source = 'with (obj) {\n' + source + '\n}\n';
		      }
		      // Throw an error if a forbidden character was found in `variable`, to prevent
		      // potential command injection attacks.
		      else if (reForbiddenIdentifierChars.test(variable)) {
		        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
		      }

		      // Cleanup code by stripping empty strings.
		      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
		        .replace(reEmptyStringMiddle, '$1')
		        .replace(reEmptyStringTrailing, '$1;');

		      // Frame code as the function body.
		      source = 'function(' + (variable || 'obj') + ') {\n' +
		        (variable
		          ? ''
		          : 'obj || (obj = {});\n'
		        ) +
		        "var __t, __p = ''" +
		        (isEscaping
		           ? ', __e = _.escape'
		           : ''
		        ) +
		        (isEvaluating
		          ? ', __j = Array.prototype.join;\n' +
		            "function print() { __p += __j.call(arguments, '') }\n"
		          : ';\n'
		        ) +
		        source +
		        'return __p\n}';

		      var result = attempt(function() {
		        return Function(importsKeys, sourceURL + 'return ' + source)
		          .apply(undefined$1, importsValues);
		      });

		      // Provide the compiled function's source by its `toString` method or
		      // the `source` property as a convenience for inlining compiled templates.
		      result.source = source;
		      if (isError(result)) {
		        throw result;
		      }
		      return result;
		    }

		    /**
		     * Converts `string`, as a whole, to lower case just like
		     * [String#toLowerCase](https://mdn.io/toLowerCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the lower cased string.
		     * @example
		     *
		     * _.toLower('--Foo-Bar--');
		     * // => '--foo-bar--'
		     *
		     * _.toLower('fooBar');
		     * // => 'foobar'
		     *
		     * _.toLower('__FOO_BAR__');
		     * // => '__foo_bar__'
		     */
		    function toLower(value) {
		      return toString(value).toLowerCase();
		    }

		    /**
		     * Converts `string`, as a whole, to upper case just like
		     * [String#toUpperCase](https://mdn.io/toUpperCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the upper cased string.
		     * @example
		     *
		     * _.toUpper('--foo-bar--');
		     * // => '--FOO-BAR--'
		     *
		     * _.toUpper('fooBar');
		     * // => 'FOOBAR'
		     *
		     * _.toUpper('__foo_bar__');
		     * // => '__FOO_BAR__'
		     */
		    function toUpper(value) {
		      return toString(value).toUpperCase();
		    }

		    /**
		     * Removes leading and trailing whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trim('  abc  ');
		     * // => 'abc'
		     *
		     * _.trim('-_-abc-_-', '_-');
		     * // => 'abc'
		     *
		     * _.map(['  foo  ', '  bar  '], _.trim);
		     * // => ['foo', 'bar']
		     */
		    function trim(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return baseTrim(string);
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          chrSymbols = stringToArray(chars),
		          start = charsStartIndex(strSymbols, chrSymbols),
		          end = charsEndIndex(strSymbols, chrSymbols) + 1;

		      return castSlice(strSymbols, start, end).join('');
		    }

		    /**
		     * Removes trailing whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trimEnd('  abc  ');
		     * // => '  abc'
		     *
		     * _.trimEnd('-_-abc-_-', '_-');
		     * // => '-_-abc'
		     */
		    function trimEnd(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return string.slice(0, trimmedEndIndex(string) + 1);
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

		      return castSlice(strSymbols, 0, end).join('');
		    }

		    /**
		     * Removes leading whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trimStart('  abc  ');
		     * // => 'abc  '
		     *
		     * _.trimStart('-_-abc-_-', '_-');
		     * // => 'abc-_-'
		     */
		    function trimStart(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return string.replace(reTrimStart, '');
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          start = charsStartIndex(strSymbols, stringToArray(chars));

		      return castSlice(strSymbols, start).join('');
		    }

		    /**
		     * Truncates `string` if it's longer than the given maximum string length.
		     * The last characters of the truncated string are replaced with the omission
		     * string which defaults to "...".
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to truncate.
		     * @param {Object} [options={}] The options object.
		     * @param {number} [options.length=30] The maximum string length.
		     * @param {string} [options.omission='...'] The string to indicate text is omitted.
		     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
		     * @returns {string} Returns the truncated string.
		     * @example
		     *
		     * _.truncate('hi-diddly-ho there, neighborino');
		     * // => 'hi-diddly-ho there, neighbo...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'length': 24,
		     *   'separator': ' '
		     * });
		     * // => 'hi-diddly-ho there,...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'length': 24,
		     *   'separator': /,? +/
		     * });
		     * // => 'hi-diddly-ho there...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'omission': ' [...]'
		     * });
		     * // => 'hi-diddly-ho there, neig [...]'
		     */
		    function truncate(string, options) {
		      var length = DEFAULT_TRUNC_LENGTH,
		          omission = DEFAULT_TRUNC_OMISSION;

		      if (isObject(options)) {
		        var separator = 'separator' in options ? options.separator : separator;
		        length = 'length' in options ? toInteger(options.length) : length;
		        omission = 'omission' in options ? baseToString(options.omission) : omission;
		      }
		      string = toString(string);

		      var strLength = string.length;
		      if (hasUnicode(string)) {
		        var strSymbols = stringToArray(string);
		        strLength = strSymbols.length;
		      }
		      if (length >= strLength) {
		        return string;
		      }
		      var end = length - stringSize(omission);
		      if (end < 1) {
		        return omission;
		      }
		      var result = strSymbols
		        ? castSlice(strSymbols, 0, end).join('')
		        : string.slice(0, end);

		      if (separator === undefined$1) {
		        return result + omission;
		      }
		      if (strSymbols) {
		        end += (result.length - end);
		      }
		      if (isRegExp(separator)) {
		        if (string.slice(end).search(separator)) {
		          var match,
		              substring = result;

		          if (!separator.global) {
		            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
		          }
		          separator.lastIndex = 0;
		          while ((match = separator.exec(substring))) {
		            var newEnd = match.index;
		          }
		          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
		        }
		      } else if (string.indexOf(baseToString(separator), end) != end) {
		        var index = result.lastIndexOf(separator);
		        if (index > -1) {
		          result = result.slice(0, index);
		        }
		      }
		      return result + omission;
		    }

		    /**
		     * The inverse of `_.escape`; this method converts the HTML entities
		     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
		     * their corresponding characters.
		     *
		     * **Note:** No other HTML entities are unescaped. To unescape additional
		     * HTML entities use a third-party library like [_he_](https://mths.be/he).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.6.0
		     * @category String
		     * @param {string} [string=''] The string to unescape.
		     * @returns {string} Returns the unescaped string.
		     * @example
		     *
		     * _.unescape('fred, barney, &amp; pebbles');
		     * // => 'fred, barney, & pebbles'
		     */
		    function unescape(string) {
		      string = toString(string);
		      return (string && reHasEscapedHtml.test(string))
		        ? string.replace(reEscapedHtml, unescapeHtmlChar)
		        : string;
		    }

		    /**
		     * Converts `string`, as space separated words, to upper case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the upper cased string.
		     * @example
		     *
		     * _.upperCase('--foo-bar');
		     * // => 'FOO BAR'
		     *
		     * _.upperCase('fooBar');
		     * // => 'FOO BAR'
		     *
		     * _.upperCase('__foo_bar__');
		     * // => 'FOO BAR'
		     */
		    var upperCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + word.toUpperCase();
		    });

		    /**
		     * Converts the first character of `string` to upper case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.upperFirst('fred');
		     * // => 'Fred'
		     *
		     * _.upperFirst('FRED');
		     * // => 'FRED'
		     */
		    var upperFirst = createCaseFirst('toUpperCase');

		    /**
		     * Splits `string` into an array of its words.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {RegExp|string} [pattern] The pattern to match words.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the words of `string`.
		     * @example
		     *
		     * _.words('fred, barney, & pebbles');
		     * // => ['fred', 'barney', 'pebbles']
		     *
		     * _.words('fred, barney, & pebbles', /[^, ]+/g);
		     * // => ['fred', 'barney', '&', 'pebbles']
		     */
		    function words(string, pattern, guard) {
		      string = toString(string);
		      pattern = guard ? undefined$1 : pattern;

		      if (pattern === undefined$1) {
		        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
		      }
		      return string.match(pattern) || [];
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Attempts to invoke `func`, returning either the result or the caught error
		     * object. Any additional arguments are provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Function} func The function to attempt.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {*} Returns the `func` result or error object.
		     * @example
		     *
		     * // Avoid throwing errors for invalid selectors.
		     * var elements = _.attempt(function(selector) {
		     *   return document.querySelectorAll(selector);
		     * }, '>_>');
		     *
		     * if (_.isError(elements)) {
		     *   elements = [];
		     * }
		     */
		    var attempt = baseRest(function(func, args) {
		      try {
		        return apply(func, undefined$1, args);
		      } catch (e) {
		        return isError(e) ? e : new Error(e);
		      }
		    });

		    /**
		     * Binds methods of an object to the object itself, overwriting the existing
		     * method.
		     *
		     * **Note:** This method doesn't set the "length" property of bound functions.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {Object} object The object to bind and assign the bound methods to.
		     * @param {...(string|string[])} methodNames The object method names to bind.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var view = {
		     *   'label': 'docs',
		     *   'click': function() {
		     *     console.log('clicked ' + this.label);
		     *   }
		     * };
		     *
		     * _.bindAll(view, ['click']);
		     * jQuery(element).on('click', view.click);
		     * // => Logs 'clicked docs' when clicked.
		     */
		    var bindAll = flatRest(function(object, methodNames) {
		      arrayEach(methodNames, function(key) {
		        key = toKey(key);
		        baseAssignValue(object, key, bind(object[key], object));
		      });
		      return object;
		    });

		    /**
		     * Creates a function that iterates over `pairs` and invokes the corresponding
		     * function of the first predicate to return truthy. The predicate-function
		     * pairs are invoked with the `this` binding and arguments of the created
		     * function.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {Array} pairs The predicate-function pairs.
		     * @returns {Function} Returns the new composite function.
		     * @example
		     *
		     * var func = _.cond([
		     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
		     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
		     *   [_.stubTrue,                      _.constant('no match')]
		     * ]);
		     *
		     * func({ 'a': 1, 'b': 2 });
		     * // => 'matches A'
		     *
		     * func({ 'a': 0, 'b': 1 });
		     * // => 'matches B'
		     *
		     * func({ 'a': '1', 'b': '2' });
		     * // => 'no match'
		     */
		    function cond(pairs) {
		      var length = pairs == null ? 0 : pairs.length,
		          toIteratee = getIteratee();

		      pairs = !length ? [] : arrayMap(pairs, function(pair) {
		        if (typeof pair[1] != 'function') {
		          throw new TypeError(FUNC_ERROR_TEXT);
		        }
		        return [toIteratee(pair[0]), pair[1]];
		      });

		      return baseRest(function(args) {
		        var index = -1;
		        while (++index < length) {
		          var pair = pairs[index];
		          if (apply(pair[0], this, args)) {
		            return apply(pair[1], this, args);
		          }
		        }
		      });
		    }

		    /**
		     * Creates a function that invokes the predicate properties of `source` with
		     * the corresponding property values of a given object, returning `true` if
		     * all predicates return truthy, else `false`.
		     *
		     * **Note:** The created function is equivalent to `_.conformsTo` with
		     * `source` partially applied.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 2, 'b': 1 },
		     *   { 'a': 1, 'b': 2 }
		     * ];
		     *
		     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
		     * // => [{ 'a': 1, 'b': 2 }]
		     */
		    function conforms(source) {
		      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that returns `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Util
		     * @param {*} value The value to return from the new function.
		     * @returns {Function} Returns the new constant function.
		     * @example
		     *
		     * var objects = _.times(2, _.constant({ 'a': 1 }));
		     *
		     * console.log(objects);
		     * // => [{ 'a': 1 }, { 'a': 1 }]
		     *
		     * console.log(objects[0] === objects[1]);
		     * // => true
		     */
		    function constant(value) {
		      return function() {
		        return value;
		      };
		    }

		    /**
		     * Checks `value` to determine whether a default value should be returned in
		     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
		     * or `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.14.0
		     * @category Util
		     * @param {*} value The value to check.
		     * @param {*} defaultValue The default value.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * _.defaultTo(1, 10);
		     * // => 1
		     *
		     * _.defaultTo(undefined, 10);
		     * // => 10
		     */
		    function defaultTo(value, defaultValue) {
		      return (value == null || value !== value) ? defaultValue : value;
		    }

		    /**
		     * Creates a function that returns the result of invoking the given functions
		     * with the `this` binding of the created function, where each successive
		     * invocation is supplied the return value of the previous.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [funcs] The functions to invoke.
		     * @returns {Function} Returns the new composite function.
		     * @see _.flowRight
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var addSquare = _.flow([_.add, square]);
		     * addSquare(1, 2);
		     * // => 9
		     */
		    var flow = createFlow();

		    /**
		     * This method is like `_.flow` except that it creates a function that
		     * invokes the given functions from right to left.
		     *
		     * @static
		     * @since 3.0.0
		     * @memberOf _
		     * @category Util
		     * @param {...(Function|Function[])} [funcs] The functions to invoke.
		     * @returns {Function} Returns the new composite function.
		     * @see _.flow
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var addSquare = _.flowRight([square, _.add]);
		     * addSquare(1, 2);
		     * // => 9
		     */
		    var flowRight = createFlow(true);

		    /**
		     * This method returns the first argument it receives.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {*} value Any value.
		     * @returns {*} Returns `value`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     *
		     * console.log(_.identity(object) === object);
		     * // => true
		     */
		    function identity(value) {
		      return value;
		    }

		    /**
		     * Creates a function that invokes `func` with the arguments of the created
		     * function. If `func` is a property name, the created function returns the
		     * property value for a given element. If `func` is an array or object, the
		     * created function returns `true` for elements that contain the equivalent
		     * source properties, otherwise it returns `false`.
		     *
		     * @static
		     * @since 4.0.0
		     * @memberOf _
		     * @category Util
		     * @param {*} [func=_.identity] The value to convert to a callback.
		     * @returns {Function} Returns the callback.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': true },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
		     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.filter(users, _.iteratee(['user', 'fred']));
		     * // => [{ 'user': 'fred', 'age': 40 }]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.map(users, _.iteratee('user'));
		     * // => ['barney', 'fred']
		     *
		     * // Create custom iteratee shorthands.
		     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
		     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
		     *     return func.test(string);
		     *   };
		     * });
		     *
		     * _.filter(['abc', 'def'], /ef/);
		     * // => ['def']
		     */
		    function iteratee(func) {
		      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that performs a partial deep comparison between a given
		     * object and `source`, returning `true` if the given object has equivalent
		     * property values, else `false`.
		     *
		     * **Note:** The created function is equivalent to `_.isMatch` with `source`
		     * partially applied.
		     *
		     * Partial comparisons will match empty array and empty object `source`
		     * values against any array or object value, respectively. See `_.isEqual`
		     * for a list of supported value comparisons.
		     *
		     * **Note:** Multiple values can be checked by combining several matchers
		     * using `_.overSome`
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Object} source The object of property values to match.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 1, 'b': 2, 'c': 3 },
		     *   { 'a': 4, 'b': 5, 'c': 6 }
		     * ];
		     *
		     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
		     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
		     *
		     * // Checking for several possible values
		     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
		     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
		     */
		    function matches(source) {
		      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that performs a partial deep comparison between the
		     * value at `path` of a given object to `srcValue`, returning `true` if the
		     * object value is equivalent, else `false`.
		     *
		     * **Note:** Partial comparisons will match empty array and empty object
		     * `srcValue` values against any array or object value, respectively. See
		     * `_.isEqual` for a list of supported value comparisons.
		     *
		     * **Note:** Multiple values can be checked by combining several matchers
		     * using `_.overSome`
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Util
		     * @param {Array|string} path The path of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 1, 'b': 2, 'c': 3 },
		     *   { 'a': 4, 'b': 5, 'c': 6 }
		     * ];
		     *
		     * _.find(objects, _.matchesProperty('a', 4));
		     * // => { 'a': 4, 'b': 5, 'c': 6 }
		     *
		     * // Checking for several possible values
		     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
		     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
		     */
		    function matchesProperty(path, srcValue) {
		      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that invokes the method at `path` of a given object.
		     * Any additional arguments are provided to the invoked method.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Util
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {Function} Returns the new invoker function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': { 'b': _.constant(2) } },
		     *   { 'a': { 'b': _.constant(1) } }
		     * ];
		     *
		     * _.map(objects, _.method('a.b'));
		     * // => [2, 1]
		     *
		     * _.map(objects, _.method(['a', 'b']));
		     * // => [2, 1]
		     */
		    var method = baseRest(function(path, args) {
		      return function(object) {
		        return baseInvoke(object, path, args);
		      };
		    });

		    /**
		     * The opposite of `_.method`; this method creates a function that invokes
		     * the method at a given path of `object`. Any additional arguments are
		     * provided to the invoked method.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Util
		     * @param {Object} object The object to query.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {Function} Returns the new invoker function.
		     * @example
		     *
		     * var array = _.times(3, _.constant),
		     *     object = { 'a': array, 'b': array, 'c': array };
		     *
		     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
		     * // => [2, 0]
		     *
		     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
		     * // => [2, 0]
		     */
		    var methodOf = baseRest(function(object, args) {
		      return function(path) {
		        return baseInvoke(object, path, args);
		      };
		    });

		    /**
		     * Adds all own enumerable string keyed function properties of a source
		     * object to the destination object. If `object` is a function, then methods
		     * are added to its prototype as well.
		     *
		     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
		     * avoid conflicts caused by modifying the original.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {Function|Object} [object=lodash] The destination object.
		     * @param {Object} source The object of functions to add.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
		     * @returns {Function|Object} Returns `object`.
		     * @example
		     *
		     * function vowels(string) {
		     *   return _.filter(string, function(v) {
		     *     return /[aeiou]/i.test(v);
		     *   });
		     * }
		     *
		     * _.mixin({ 'vowels': vowels });
		     * _.vowels('fred');
		     * // => ['e']
		     *
		     * _('fred').vowels().value();
		     * // => ['e']
		     *
		     * _.mixin({ 'vowels': vowels }, { 'chain': false });
		     * _('fred').vowels();
		     * // => ['e']
		     */
		    function mixin(object, source, options) {
		      var props = keys(source),
		          methodNames = baseFunctions(source, props);

		      if (options == null &&
		          !(isObject(source) && (methodNames.length || !props.length))) {
		        options = source;
		        source = object;
		        object = this;
		        methodNames = baseFunctions(source, keys(source));
		      }
		      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
		          isFunc = isFunction(object);

		      arrayEach(methodNames, function(methodName) {
		        var func = source[methodName];
		        object[methodName] = func;
		        if (isFunc) {
		          object.prototype[methodName] = function() {
		            var chainAll = this.__chain__;
		            if (chain || chainAll) {
		              var result = object(this.__wrapped__),
		                  actions = result.__actions__ = copyArray(this.__actions__);

		              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
		              result.__chain__ = chainAll;
		              return result;
		            }
		            return func.apply(object, arrayPush([this.value()], arguments));
		          };
		        }
		      });

		      return object;
		    }

		    /**
		     * Reverts the `_` variable to its previous value and returns a reference to
		     * the `lodash` function.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @returns {Function} Returns the `lodash` function.
		     * @example
		     *
		     * var lodash = _.noConflict();
		     */
		    function noConflict() {
		      if (root._ === this) {
		        root._ = oldDash;
		      }
		      return this;
		    }

		    /**
		     * This method returns `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.3.0
		     * @category Util
		     * @example
		     *
		     * _.times(2, _.noop);
		     * // => [undefined, undefined]
		     */
		    function noop() {
		      // No operation performed.
		    }

		    /**
		     * Creates a function that gets the argument at index `n`. If `n` is negative,
		     * the nth argument from the end is returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {number} [n=0] The index of the argument to return.
		     * @returns {Function} Returns the new pass-thru function.
		     * @example
		     *
		     * var func = _.nthArg(1);
		     * func('a', 'b', 'c', 'd');
		     * // => 'b'
		     *
		     * var func = _.nthArg(-2);
		     * func('a', 'b', 'c', 'd');
		     * // => 'c'
		     */
		    function nthArg(n) {
		      n = toInteger(n);
		      return baseRest(function(args) {
		        return baseNth(args, n);
		      });
		    }

		    /**
		     * Creates a function that invokes `iteratees` with the arguments it receives
		     * and returns their results.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [iteratees=[_.identity]]
		     *  The iteratees to invoke.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.over([Math.max, Math.min]);
		     *
		     * func(1, 2, 3, 4);
		     * // => [4, 1]
		     */
		    var over = createOver(arrayMap);

		    /**
		     * Creates a function that checks if **all** of the `predicates` return
		     * truthy when invoked with the arguments it receives.
		     *
		     * Following shorthands are possible for providing predicates.
		     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
		     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [predicates=[_.identity]]
		     *  The predicates to check.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.overEvery([Boolean, isFinite]);
		     *
		     * func('1');
		     * // => true
		     *
		     * func(null);
		     * // => false
		     *
		     * func(NaN);
		     * // => false
		     */
		    var overEvery = createOver(arrayEvery);

		    /**
		     * Creates a function that checks if **any** of the `predicates` return
		     * truthy when invoked with the arguments it receives.
		     *
		     * Following shorthands are possible for providing predicates.
		     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
		     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [predicates=[_.identity]]
		     *  The predicates to check.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.overSome([Boolean, isFinite]);
		     *
		     * func('1');
		     * // => true
		     *
		     * func(null);
		     * // => true
		     *
		     * func(NaN);
		     * // => false
		     *
		     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
		     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
		     */
		    var overSome = createOver(arraySome);

		    /**
		     * Creates a function that returns the value at `path` of a given object.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Util
		     * @param {Array|string} path The path of the property to get.
		     * @returns {Function} Returns the new accessor function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': { 'b': 2 } },
		     *   { 'a': { 'b': 1 } }
		     * ];
		     *
		     * _.map(objects, _.property('a.b'));
		     * // => [2, 1]
		     *
		     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
		     * // => [1, 2]
		     */
		    function property(path) {
		      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
		    }

		    /**
		     * The opposite of `_.property`; this method creates a function that returns
		     * the value at a given path of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Object} object The object to query.
		     * @returns {Function} Returns the new accessor function.
		     * @example
		     *
		     * var array = [0, 1, 2],
		     *     object = { 'a': array, 'b': array, 'c': array };
		     *
		     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
		     * // => [2, 0]
		     *
		     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
		     * // => [2, 0]
		     */
		    function propertyOf(object) {
		      return function(path) {
		        return object == null ? undefined$1 : baseGet(object, path);
		      };
		    }

		    /**
		     * Creates an array of numbers (positive and/or negative) progressing from
		     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
		     * `start` is specified without an `end` or `step`. If `end` is not specified,
		     * it's set to `start` with `start` then set to `0`.
		     *
		     * **Note:** JavaScript follows the IEEE-754 standard for resolving
		     * floating-point values which can produce unexpected results.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} [step=1] The value to increment or decrement by.
		     * @returns {Array} Returns the range of numbers.
		     * @see _.inRange, _.rangeRight
		     * @example
		     *
		     * _.range(4);
		     * // => [0, 1, 2, 3]
		     *
		     * _.range(-4);
		     * // => [0, -1, -2, -3]
		     *
		     * _.range(1, 5);
		     * // => [1, 2, 3, 4]
		     *
		     * _.range(0, 20, 5);
		     * // => [0, 5, 10, 15]
		     *
		     * _.range(0, -4, -1);
		     * // => [0, -1, -2, -3]
		     *
		     * _.range(1, 4, 0);
		     * // => [1, 1, 1]
		     *
		     * _.range(0);
		     * // => []
		     */
		    var range = createRange();

		    /**
		     * This method is like `_.range` except that it populates values in
		     * descending order.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} [step=1] The value to increment or decrement by.
		     * @returns {Array} Returns the range of numbers.
		     * @see _.inRange, _.range
		     * @example
		     *
		     * _.rangeRight(4);
		     * // => [3, 2, 1, 0]
		     *
		     * _.rangeRight(-4);
		     * // => [-3, -2, -1, 0]
		     *
		     * _.rangeRight(1, 5);
		     * // => [4, 3, 2, 1]
		     *
		     * _.rangeRight(0, 20, 5);
		     * // => [15, 10, 5, 0]
		     *
		     * _.rangeRight(0, -4, -1);
		     * // => [-3, -2, -1, 0]
		     *
		     * _.rangeRight(1, 4, 0);
		     * // => [1, 1, 1]
		     *
		     * _.rangeRight(0);
		     * // => []
		     */
		    var rangeRight = createRange(true);

		    /**
		     * This method returns a new empty array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {Array} Returns the new empty array.
		     * @example
		     *
		     * var arrays = _.times(2, _.stubArray);
		     *
		     * console.log(arrays);
		     * // => [[], []]
		     *
		     * console.log(arrays[0] === arrays[1]);
		     * // => false
		     */
		    function stubArray() {
		      return [];
		    }

		    /**
		     * This method returns `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {boolean} Returns `false`.
		     * @example
		     *
		     * _.times(2, _.stubFalse);
		     * // => [false, false]
		     */
		    function stubFalse() {
		      return false;
		    }

		    /**
		     * This method returns a new empty object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {Object} Returns the new empty object.
		     * @example
		     *
		     * var objects = _.times(2, _.stubObject);
		     *
		     * console.log(objects);
		     * // => [{}, {}]
		     *
		     * console.log(objects[0] === objects[1]);
		     * // => false
		     */
		    function stubObject() {
		      return {};
		    }

		    /**
		     * This method returns an empty string.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {string} Returns the empty string.
		     * @example
		     *
		     * _.times(2, _.stubString);
		     * // => ['', '']
		     */
		    function stubString() {
		      return '';
		    }

		    /**
		     * This method returns `true`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {boolean} Returns `true`.
		     * @example
		     *
		     * _.times(2, _.stubTrue);
		     * // => [true, true]
		     */
		    function stubTrue() {
		      return true;
		    }

		    /**
		     * Invokes the iteratee `n` times, returning an array of the results of
		     * each invocation. The iteratee is invoked with one argument; (index).
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {number} n The number of times to invoke `iteratee`.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the array of results.
		     * @example
		     *
		     * _.times(3, String);
		     * // => ['0', '1', '2']
		     *
		     *  _.times(4, _.constant(0));
		     * // => [0, 0, 0, 0]
		     */
		    function times(n, iteratee) {
		      n = toInteger(n);
		      if (n < 1 || n > MAX_SAFE_INTEGER) {
		        return [];
		      }
		      var index = MAX_ARRAY_LENGTH,
		          length = nativeMin(n, MAX_ARRAY_LENGTH);

		      iteratee = getIteratee(iteratee);
		      n -= MAX_ARRAY_LENGTH;

		      var result = baseTimes(length, iteratee);
		      while (++index < n) {
		        iteratee(index);
		      }
		      return result;
		    }

		    /**
		     * Converts `value` to a property path array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {*} value The value to convert.
		     * @returns {Array} Returns the new property path array.
		     * @example
		     *
		     * _.toPath('a.b.c');
		     * // => ['a', 'b', 'c']
		     *
		     * _.toPath('a[0].b.c');
		     * // => ['a', '0', 'b', 'c']
		     */
		    function toPath(value) {
		      if (isArray(value)) {
		        return arrayMap(value, toKey);
		      }
		      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
		    }

		    /**
		     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {string} [prefix=''] The value to prefix the ID with.
		     * @returns {string} Returns the unique ID.
		     * @example
		     *
		     * _.uniqueId('contact_');
		     * // => 'contact_104'
		     *
		     * _.uniqueId();
		     * // => '105'
		     */
		    function uniqueId(prefix) {
		      var id = ++idCounter;
		      return toString(prefix) + id;
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Adds two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.4.0
		     * @category Math
		     * @param {number} augend The first number in an addition.
		     * @param {number} addend The second number in an addition.
		     * @returns {number} Returns the total.
		     * @example
		     *
		     * _.add(6, 4);
		     * // => 10
		     */
		    var add = createMathOperation(function(augend, addend) {
		      return augend + addend;
		    }, 0);

		    /**
		     * Computes `number` rounded up to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round up.
		     * @param {number} [precision=0] The precision to round up to.
		     * @returns {number} Returns the rounded up number.
		     * @example
		     *
		     * _.ceil(4.006);
		     * // => 5
		     *
		     * _.ceil(6.004, 2);
		     * // => 6.01
		     *
		     * _.ceil(6040, -2);
		     * // => 6100
		     */
		    var ceil = createRound('ceil');

		    /**
		     * Divide two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {number} dividend The first number in a division.
		     * @param {number} divisor The second number in a division.
		     * @returns {number} Returns the quotient.
		     * @example
		     *
		     * _.divide(6, 4);
		     * // => 1.5
		     */
		    var divide = createMathOperation(function(dividend, divisor) {
		      return dividend / divisor;
		    }, 1);

		    /**
		     * Computes `number` rounded down to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round down.
		     * @param {number} [precision=0] The precision to round down to.
		     * @returns {number} Returns the rounded down number.
		     * @example
		     *
		     * _.floor(4.006);
		     * // => 4
		     *
		     * _.floor(0.046, 2);
		     * // => 0.04
		     *
		     * _.floor(4060, -2);
		     * // => 4000
		     */
		    var floor = createRound('floor');

		    /**
		     * Computes the maximum value of `array`. If `array` is empty or falsey,
		     * `undefined` is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {*} Returns the maximum value.
		     * @example
		     *
		     * _.max([4, 2, 8, 6]);
		     * // => 8
		     *
		     * _.max([]);
		     * // => undefined
		     */
		    function max(array) {
		      return (array && array.length)
		        ? baseExtremum(array, identity, baseGt)
		        : undefined$1;
		    }

		    /**
		     * This method is like `_.max` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * the value is ranked. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {*} Returns the maximum value.
		     * @example
		     *
		     * var objects = [{ 'n': 1 }, { 'n': 2 }];
		     *
		     * _.maxBy(objects, function(o) { return o.n; });
		     * // => { 'n': 2 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.maxBy(objects, 'n');
		     * // => { 'n': 2 }
		     */
		    function maxBy(array, iteratee) {
		      return (array && array.length)
		        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
		        : undefined$1;
		    }

		    /**
		     * Computes the mean of the values in `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {number} Returns the mean.
		     * @example
		     *
		     * _.mean([4, 2, 8, 6]);
		     * // => 5
		     */
		    function mean(array) {
		      return baseMean(array, identity);
		    }

		    /**
		     * This method is like `_.mean` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the value to be averaged.
		     * The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the mean.
		     * @example
		     *
		     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
		     *
		     * _.meanBy(objects, function(o) { return o.n; });
		     * // => 5
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.meanBy(objects, 'n');
		     * // => 5
		     */
		    function meanBy(array, iteratee) {
		      return baseMean(array, getIteratee(iteratee, 2));
		    }

		    /**
		     * Computes the minimum value of `array`. If `array` is empty or falsey,
		     * `undefined` is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {*} Returns the minimum value.
		     * @example
		     *
		     * _.min([4, 2, 8, 6]);
		     * // => 2
		     *
		     * _.min([]);
		     * // => undefined
		     */
		    function min(array) {
		      return (array && array.length)
		        ? baseExtremum(array, identity, baseLt)
		        : undefined$1;
		    }

		    /**
		     * This method is like `_.min` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * the value is ranked. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {*} Returns the minimum value.
		     * @example
		     *
		     * var objects = [{ 'n': 1 }, { 'n': 2 }];
		     *
		     * _.minBy(objects, function(o) { return o.n; });
		     * // => { 'n': 1 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.minBy(objects, 'n');
		     * // => { 'n': 1 }
		     */
		    function minBy(array, iteratee) {
		      return (array && array.length)
		        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
		        : undefined$1;
		    }

		    /**
		     * Multiply two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {number} multiplier The first number in a multiplication.
		     * @param {number} multiplicand The second number in a multiplication.
		     * @returns {number} Returns the product.
		     * @example
		     *
		     * _.multiply(6, 4);
		     * // => 24
		     */
		    var multiply = createMathOperation(function(multiplier, multiplicand) {
		      return multiplier * multiplicand;
		    }, 1);

		    /**
		     * Computes `number` rounded to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round.
		     * @param {number} [precision=0] The precision to round to.
		     * @returns {number} Returns the rounded number.
		     * @example
		     *
		     * _.round(4.006);
		     * // => 4
		     *
		     * _.round(4.006, 2);
		     * // => 4.01
		     *
		     * _.round(4060, -2);
		     * // => 4100
		     */
		    var round = createRound('round');

		    /**
		     * Subtract two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {number} minuend The first number in a subtraction.
		     * @param {number} subtrahend The second number in a subtraction.
		     * @returns {number} Returns the difference.
		     * @example
		     *
		     * _.subtract(6, 4);
		     * // => 2
		     */
		    var subtract = createMathOperation(function(minuend, subtrahend) {
		      return minuend - subtrahend;
		    }, 0);

		    /**
		     * Computes the sum of the values in `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.4.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {number} Returns the sum.
		     * @example
		     *
		     * _.sum([4, 2, 8, 6]);
		     * // => 20
		     */
		    function sum(array) {
		      return (array && array.length)
		        ? baseSum(array, identity)
		        : 0;
		    }

		    /**
		     * This method is like `_.sum` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the value to be summed.
		     * The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the sum.
		     * @example
		     *
		     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
		     *
		     * _.sumBy(objects, function(o) { return o.n; });
		     * // => 20
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sumBy(objects, 'n');
		     * // => 20
		     */
		    function sumBy(array, iteratee) {
		      return (array && array.length)
		        ? baseSum(array, getIteratee(iteratee, 2))
		        : 0;
		    }

		    /*------------------------------------------------------------------------*/

		    // Add methods that return wrapped values in chain sequences.
		    lodash.after = after;
		    lodash.ary = ary;
		    lodash.assign = assign;
		    lodash.assignIn = assignIn;
		    lodash.assignInWith = assignInWith;
		    lodash.assignWith = assignWith;
		    lodash.at = at;
		    lodash.before = before;
		    lodash.bind = bind;
		    lodash.bindAll = bindAll;
		    lodash.bindKey = bindKey;
		    lodash.castArray = castArray;
		    lodash.chain = chain;
		    lodash.chunk = chunk;
		    lodash.compact = compact;
		    lodash.concat = concat;
		    lodash.cond = cond;
		    lodash.conforms = conforms;
		    lodash.constant = constant;
		    lodash.countBy = countBy;
		    lodash.create = create;
		    lodash.curry = curry;
		    lodash.curryRight = curryRight;
		    lodash.debounce = debounce;
		    lodash.defaults = defaults;
		    lodash.defaultsDeep = defaultsDeep;
		    lodash.defer = defer;
		    lodash.delay = delay;
		    lodash.difference = difference;
		    lodash.differenceBy = differenceBy;
		    lodash.differenceWith = differenceWith;
		    lodash.drop = drop;
		    lodash.dropRight = dropRight;
		    lodash.dropRightWhile = dropRightWhile;
		    lodash.dropWhile = dropWhile;
		    lodash.fill = fill;
		    lodash.filter = filter;
		    lodash.flatMap = flatMap;
		    lodash.flatMapDeep = flatMapDeep;
		    lodash.flatMapDepth = flatMapDepth;
		    lodash.flatten = flatten;
		    lodash.flattenDeep = flattenDeep;
		    lodash.flattenDepth = flattenDepth;
		    lodash.flip = flip;
		    lodash.flow = flow;
		    lodash.flowRight = flowRight;
		    lodash.fromPairs = fromPairs;
		    lodash.functions = functions;
		    lodash.functionsIn = functionsIn;
		    lodash.groupBy = groupBy;
		    lodash.initial = initial;
		    lodash.intersection = intersection;
		    lodash.intersectionBy = intersectionBy;
		    lodash.intersectionWith = intersectionWith;
		    lodash.invert = invert;
		    lodash.invertBy = invertBy;
		    lodash.invokeMap = invokeMap;
		    lodash.iteratee = iteratee;
		    lodash.keyBy = keyBy;
		    lodash.keys = keys;
		    lodash.keysIn = keysIn;
		    lodash.map = map;
		    lodash.mapKeys = mapKeys;
		    lodash.mapValues = mapValues;
		    lodash.matches = matches;
		    lodash.matchesProperty = matchesProperty;
		    lodash.memoize = memoize;
		    lodash.merge = merge;
		    lodash.mergeWith = mergeWith;
		    lodash.method = method;
		    lodash.methodOf = methodOf;
		    lodash.mixin = mixin;
		    lodash.negate = negate;
		    lodash.nthArg = nthArg;
		    lodash.omit = omit;
		    lodash.omitBy = omitBy;
		    lodash.once = once;
		    lodash.orderBy = orderBy;
		    lodash.over = over;
		    lodash.overArgs = overArgs;
		    lodash.overEvery = overEvery;
		    lodash.overSome = overSome;
		    lodash.partial = partial;
		    lodash.partialRight = partialRight;
		    lodash.partition = partition;
		    lodash.pick = pick;
		    lodash.pickBy = pickBy;
		    lodash.property = property;
		    lodash.propertyOf = propertyOf;
		    lodash.pull = pull;
		    lodash.pullAll = pullAll;
		    lodash.pullAllBy = pullAllBy;
		    lodash.pullAllWith = pullAllWith;
		    lodash.pullAt = pullAt;
		    lodash.range = range;
		    lodash.rangeRight = rangeRight;
		    lodash.rearg = rearg;
		    lodash.reject = reject;
		    lodash.remove = remove;
		    lodash.rest = rest;
		    lodash.reverse = reverse;
		    lodash.sampleSize = sampleSize;
		    lodash.set = set;
		    lodash.setWith = setWith;
		    lodash.shuffle = shuffle;
		    lodash.slice = slice;
		    lodash.sortBy = sortBy;
		    lodash.sortedUniq = sortedUniq;
		    lodash.sortedUniqBy = sortedUniqBy;
		    lodash.split = split;
		    lodash.spread = spread;
		    lodash.tail = tail;
		    lodash.take = take;
		    lodash.takeRight = takeRight;
		    lodash.takeRightWhile = takeRightWhile;
		    lodash.takeWhile = takeWhile;
		    lodash.tap = tap;
		    lodash.throttle = throttle;
		    lodash.thru = thru;
		    lodash.toArray = toArray;
		    lodash.toPairs = toPairs;
		    lodash.toPairsIn = toPairsIn;
		    lodash.toPath = toPath;
		    lodash.toPlainObject = toPlainObject;
		    lodash.transform = transform;
		    lodash.unary = unary;
		    lodash.union = union;
		    lodash.unionBy = unionBy;
		    lodash.unionWith = unionWith;
		    lodash.uniq = uniq;
		    lodash.uniqBy = uniqBy;
		    lodash.uniqWith = uniqWith;
		    lodash.unset = unset;
		    lodash.unzip = unzip;
		    lodash.unzipWith = unzipWith;
		    lodash.update = update;
		    lodash.updateWith = updateWith;
		    lodash.values = values;
		    lodash.valuesIn = valuesIn;
		    lodash.without = without;
		    lodash.words = words;
		    lodash.wrap = wrap;
		    lodash.xor = xor;
		    lodash.xorBy = xorBy;
		    lodash.xorWith = xorWith;
		    lodash.zip = zip;
		    lodash.zipObject = zipObject;
		    lodash.zipObjectDeep = zipObjectDeep;
		    lodash.zipWith = zipWith;

		    // Add aliases.
		    lodash.entries = toPairs;
		    lodash.entriesIn = toPairsIn;
		    lodash.extend = assignIn;
		    lodash.extendWith = assignInWith;

		    // Add methods to `lodash.prototype`.
		    mixin(lodash, lodash);

		    /*------------------------------------------------------------------------*/

		    // Add methods that return unwrapped values in chain sequences.
		    lodash.add = add;
		    lodash.attempt = attempt;
		    lodash.camelCase = camelCase;
		    lodash.capitalize = capitalize;
		    lodash.ceil = ceil;
		    lodash.clamp = clamp;
		    lodash.clone = clone;
		    lodash.cloneDeep = cloneDeep;
		    lodash.cloneDeepWith = cloneDeepWith;
		    lodash.cloneWith = cloneWith;
		    lodash.conformsTo = conformsTo;
		    lodash.deburr = deburr;
		    lodash.defaultTo = defaultTo;
		    lodash.divide = divide;
		    lodash.endsWith = endsWith;
		    lodash.eq = eq;
		    lodash.escape = escape;
		    lodash.escapeRegExp = escapeRegExp;
		    lodash.every = every;
		    lodash.find = find;
		    lodash.findIndex = findIndex;
		    lodash.findKey = findKey;
		    lodash.findLast = findLast;
		    lodash.findLastIndex = findLastIndex;
		    lodash.findLastKey = findLastKey;
		    lodash.floor = floor;
		    lodash.forEach = forEach;
		    lodash.forEachRight = forEachRight;
		    lodash.forIn = forIn;
		    lodash.forInRight = forInRight;
		    lodash.forOwn = forOwn;
		    lodash.forOwnRight = forOwnRight;
		    lodash.get = get;
		    lodash.gt = gt;
		    lodash.gte = gte;
		    lodash.has = has;
		    lodash.hasIn = hasIn;
		    lodash.head = head;
		    lodash.identity = identity;
		    lodash.includes = includes;
		    lodash.indexOf = indexOf;
		    lodash.inRange = inRange;
		    lodash.invoke = invoke;
		    lodash.isArguments = isArguments;
		    lodash.isArray = isArray;
		    lodash.isArrayBuffer = isArrayBuffer;
		    lodash.isArrayLike = isArrayLike;
		    lodash.isArrayLikeObject = isArrayLikeObject;
		    lodash.isBoolean = isBoolean;
		    lodash.isBuffer = isBuffer;
		    lodash.isDate = isDate;
		    lodash.isElement = isElement;
		    lodash.isEmpty = isEmpty;
		    lodash.isEqual = isEqual;
		    lodash.isEqualWith = isEqualWith;
		    lodash.isError = isError;
		    lodash.isFinite = isFinite;
		    lodash.isFunction = isFunction;
		    lodash.isInteger = isInteger;
		    lodash.isLength = isLength;
		    lodash.isMap = isMap;
		    lodash.isMatch = isMatch;
		    lodash.isMatchWith = isMatchWith;
		    lodash.isNaN = isNaN;
		    lodash.isNative = isNative;
		    lodash.isNil = isNil;
		    lodash.isNull = isNull;
		    lodash.isNumber = isNumber;
		    lodash.isObject = isObject;
		    lodash.isObjectLike = isObjectLike;
		    lodash.isPlainObject = isPlainObject;
		    lodash.isRegExp = isRegExp;
		    lodash.isSafeInteger = isSafeInteger;
		    lodash.isSet = isSet;
		    lodash.isString = isString;
		    lodash.isSymbol = isSymbol;
		    lodash.isTypedArray = isTypedArray;
		    lodash.isUndefined = isUndefined;
		    lodash.isWeakMap = isWeakMap;
		    lodash.isWeakSet = isWeakSet;
		    lodash.join = join;
		    lodash.kebabCase = kebabCase;
		    lodash.last = last;
		    lodash.lastIndexOf = lastIndexOf;
		    lodash.lowerCase = lowerCase;
		    lodash.lowerFirst = lowerFirst;
		    lodash.lt = lt;
		    lodash.lte = lte;
		    lodash.max = max;
		    lodash.maxBy = maxBy;
		    lodash.mean = mean;
		    lodash.meanBy = meanBy;
		    lodash.min = min;
		    lodash.minBy = minBy;
		    lodash.stubArray = stubArray;
		    lodash.stubFalse = stubFalse;
		    lodash.stubObject = stubObject;
		    lodash.stubString = stubString;
		    lodash.stubTrue = stubTrue;
		    lodash.multiply = multiply;
		    lodash.nth = nth;
		    lodash.noConflict = noConflict;
		    lodash.noop = noop;
		    lodash.now = now;
		    lodash.pad = pad;
		    lodash.padEnd = padEnd;
		    lodash.padStart = padStart;
		    lodash.parseInt = parseInt;
		    lodash.random = random;
		    lodash.reduce = reduce;
		    lodash.reduceRight = reduceRight;
		    lodash.repeat = repeat;
		    lodash.replace = replace;
		    lodash.result = result;
		    lodash.round = round;
		    lodash.runInContext = runInContext;
		    lodash.sample = sample;
		    lodash.size = size;
		    lodash.snakeCase = snakeCase;
		    lodash.some = some;
		    lodash.sortedIndex = sortedIndex;
		    lodash.sortedIndexBy = sortedIndexBy;
		    lodash.sortedIndexOf = sortedIndexOf;
		    lodash.sortedLastIndex = sortedLastIndex;
		    lodash.sortedLastIndexBy = sortedLastIndexBy;
		    lodash.sortedLastIndexOf = sortedLastIndexOf;
		    lodash.startCase = startCase;
		    lodash.startsWith = startsWith;
		    lodash.subtract = subtract;
		    lodash.sum = sum;
		    lodash.sumBy = sumBy;
		    lodash.template = template;
		    lodash.times = times;
		    lodash.toFinite = toFinite;
		    lodash.toInteger = toInteger;
		    lodash.toLength = toLength;
		    lodash.toLower = toLower;
		    lodash.toNumber = toNumber;
		    lodash.toSafeInteger = toSafeInteger;
		    lodash.toString = toString;
		    lodash.toUpper = toUpper;
		    lodash.trim = trim;
		    lodash.trimEnd = trimEnd;
		    lodash.trimStart = trimStart;
		    lodash.truncate = truncate;
		    lodash.unescape = unescape;
		    lodash.uniqueId = uniqueId;
		    lodash.upperCase = upperCase;
		    lodash.upperFirst = upperFirst;

		    // Add aliases.
		    lodash.each = forEach;
		    lodash.eachRight = forEachRight;
		    lodash.first = head;

		    mixin(lodash, (function() {
		      var source = {};
		      baseForOwn(lodash, function(func, methodName) {
		        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
		          source[methodName] = func;
		        }
		      });
		      return source;
		    }()), { 'chain': false });

		    /*------------------------------------------------------------------------*/

		    /**
		     * The semantic version number.
		     *
		     * @static
		     * @memberOf _
		     * @type {string}
		     */
		    lodash.VERSION = VERSION;

		    // Assign default placeholders.
		    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
		      lodash[methodName].placeholder = lodash;
		    });

		    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
		    arrayEach(['drop', 'take'], function(methodName, index) {
		      LazyWrapper.prototype[methodName] = function(n) {
		        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

		        var result = (this.__filtered__ && !index)
		          ? new LazyWrapper(this)
		          : this.clone();

		        if (result.__filtered__) {
		          result.__takeCount__ = nativeMin(n, result.__takeCount__);
		        } else {
		          result.__views__.push({
		            'size': nativeMin(n, MAX_ARRAY_LENGTH),
		            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
		          });
		        }
		        return result;
		      };

		      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
		        return this.reverse()[methodName](n).reverse();
		      };
		    });

		    // Add `LazyWrapper` methods that accept an `iteratee` value.
		    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
		      var type = index + 1,
		          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

		      LazyWrapper.prototype[methodName] = function(iteratee) {
		        var result = this.clone();
		        result.__iteratees__.push({
		          'iteratee': getIteratee(iteratee, 3),
		          'type': type
		        });
		        result.__filtered__ = result.__filtered__ || isFilter;
		        return result;
		      };
		    });

		    // Add `LazyWrapper` methods for `_.head` and `_.last`.
		    arrayEach(['head', 'last'], function(methodName, index) {
		      var takeName = 'take' + (index ? 'Right' : '');

		      LazyWrapper.prototype[methodName] = function() {
		        return this[takeName](1).value()[0];
		      };
		    });

		    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
		    arrayEach(['initial', 'tail'], function(methodName, index) {
		      var dropName = 'drop' + (index ? '' : 'Right');

		      LazyWrapper.prototype[methodName] = function() {
		        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
		      };
		    });

		    LazyWrapper.prototype.compact = function() {
		      return this.filter(identity);
		    };

		    LazyWrapper.prototype.find = function(predicate) {
		      return this.filter(predicate).head();
		    };

		    LazyWrapper.prototype.findLast = function(predicate) {
		      return this.reverse().find(predicate);
		    };

		    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
		      if (typeof path == 'function') {
		        return new LazyWrapper(this);
		      }
		      return this.map(function(value) {
		        return baseInvoke(value, path, args);
		      });
		    });

		    LazyWrapper.prototype.reject = function(predicate) {
		      return this.filter(negate(getIteratee(predicate)));
		    };

		    LazyWrapper.prototype.slice = function(start, end) {
		      start = toInteger(start);

		      var result = this;
		      if (result.__filtered__ && (start > 0 || end < 0)) {
		        return new LazyWrapper(result);
		      }
		      if (start < 0) {
		        result = result.takeRight(-start);
		      } else if (start) {
		        result = result.drop(start);
		      }
		      if (end !== undefined$1) {
		        end = toInteger(end);
		        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
		      }
		      return result;
		    };

		    LazyWrapper.prototype.takeRightWhile = function(predicate) {
		      return this.reverse().takeWhile(predicate).reverse();
		    };

		    LazyWrapper.prototype.toArray = function() {
		      return this.take(MAX_ARRAY_LENGTH);
		    };

		    // Add `LazyWrapper` methods to `lodash.prototype`.
		    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
		      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
		          isTaker = /^(?:head|last)$/.test(methodName),
		          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
		          retUnwrapped = isTaker || /^find/.test(methodName);

		      if (!lodashFunc) {
		        return;
		      }
		      lodash.prototype[methodName] = function() {
		        var value = this.__wrapped__,
		            args = isTaker ? [1] : arguments,
		            isLazy = value instanceof LazyWrapper,
		            iteratee = args[0],
		            useLazy = isLazy || isArray(value);

		        var interceptor = function(value) {
		          var result = lodashFunc.apply(lodash, arrayPush([value], args));
		          return (isTaker && chainAll) ? result[0] : result;
		        };

		        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
		          // Avoid lazy use if the iteratee has a "length" value other than `1`.
		          isLazy = useLazy = false;
		        }
		        var chainAll = this.__chain__,
		            isHybrid = !!this.__actions__.length,
		            isUnwrapped = retUnwrapped && !chainAll,
		            onlyLazy = isLazy && !isHybrid;

		        if (!retUnwrapped && useLazy) {
		          value = onlyLazy ? value : new LazyWrapper(this);
		          var result = func.apply(value, args);
		          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
		          return new LodashWrapper(result, chainAll);
		        }
		        if (isUnwrapped && onlyLazy) {
		          return func.apply(this, args);
		        }
		        result = this.thru(interceptor);
		        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
		      };
		    });

		    // Add `Array` methods to `lodash.prototype`.
		    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
		      var func = arrayProto[methodName],
		          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
		          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

		      lodash.prototype[methodName] = function() {
		        var args = arguments;
		        if (retUnwrapped && !this.__chain__) {
		          var value = this.value();
		          return func.apply(isArray(value) ? value : [], args);
		        }
		        return this[chainName](function(value) {
		          return func.apply(isArray(value) ? value : [], args);
		        });
		      };
		    });

		    // Map minified method names to their real names.
		    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
		      var lodashFunc = lodash[methodName];
		      if (lodashFunc) {
		        var key = lodashFunc.name + '';
		        if (!hasOwnProperty.call(realNames, key)) {
		          realNames[key] = [];
		        }
		        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
		      }
		    });

		    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
		      'name': 'wrapper',
		      'func': undefined$1
		    }];

		    // Add methods to `LazyWrapper`.
		    LazyWrapper.prototype.clone = lazyClone;
		    LazyWrapper.prototype.reverse = lazyReverse;
		    LazyWrapper.prototype.value = lazyValue;

		    // Add chain sequence methods to the `lodash` wrapper.
		    lodash.prototype.at = wrapperAt;
		    lodash.prototype.chain = wrapperChain;
		    lodash.prototype.commit = wrapperCommit;
		    lodash.prototype.next = wrapperNext;
		    lodash.prototype.plant = wrapperPlant;
		    lodash.prototype.reverse = wrapperReverse;
		    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

		    // Add lazy aliases.
		    lodash.prototype.first = lodash.prototype.head;

		    if (symIterator) {
		      lodash.prototype[symIterator] = wrapperToIterator;
		    }
		    return lodash;
		  });

		  /*--------------------------------------------------------------------------*/

		  // Export lodash.
		  var _ = runInContext();

		  // Some AMD build optimizers, like r.js, check for condition patterns like:
		  if (freeModule) {
		    // Export for Node.js.
		    (freeModule.exports = _)._ = _;
		    // Export for CommonJS support.
		    freeExports._ = _;
		  }
		  else {
		    // Export to the global object.
		    root._ = _;
		  }
		}.call(lodash$1)); 
	} (lodash$2, lodash$2.exports));
	return lodash$2.exports;
}

var lodashExports = requireLodash();
var lodash = /*@__PURE__*/getDefaultExportFromCjs(lodashExports);

function isValidArg(name, Arguments) {
    if (lodash.isEmpty(name))
        return false;
    for (const argument of Arguments) {
        if ('sections' in argument) {
            for (const section of argument.sections) {
                if (section.items.some(item => item.name === name))
                    return true;
            }
        }
        else {
            if (argument.items.some(item => item.name === name))
                return true;
        }
    }
    return false;
}
function getArgumentByName(name, Arguments) {
    if (lodash.isEmpty(name))
        return undefined;
    for (const argument of Arguments) {
        if ('sections' in argument) {
            for (const section of argument.sections) {
                const found = section.items.find(item => item.name === name);
                if (found)
                    return found;
            }
        }
        else {
            const found = argument.items.find(item => item.name === name);
            if (found)
                return found;
        }
    }
    return undefined;
}
function getArgumentType(name, Arguments) {
    return getArgumentByName(name, Arguments)?.type || undefined;
}
function replaceAddress(input) {
    return input.replace(/http:\/\/0\.0\.0\.0:(\d+)/g, 'http://localhost:$1');
}
function catchAddress$3(input) {
    const localhostPatterns = [
        /https?:\/\/localhost(?::\d+)?/i,
        /https?:\/\/127\.0\.0\.1(?::\d+)?/i,
        /https?:\/\/0\.0\.0\.0(?::\d+)?/i,
        /https?:\/\/\[::1](?::\d+)?/i,
        /https?:\/\/(?:[\w-]+\.)*localhost(?::\d+)?/i,
    ];
    for (const pattern of localhostPatterns) {
        const match = input.match(pattern);
        if (match) {
            return replaceAddress(match[0]);
        }
    }
    return undefined;
}
function removeEscapes(str) {
    return str.replace(/\\(.)/gm, '$1');
}
function GitInstaller(title, url, stepper) {
    stepper.initialSteps([title, 'Clone', 'Finish']);
    stepper.starterStep().then(({ targetDirectory, chosen }) => {
        if (chosen === 'install') {
            stepper.nextStep().then(() => {
                stepper.cloneRepository(url).then(dir => {
                    stepper.setInstalled(dir);
                    stepper.showFinalStep('success', `${title} installation complete!`, `All installation steps completed successfully. Your ${title} environment is now ready for use.`);
                });
            });
        }
        else if (targetDirectory) {
            stepper.utils.validateGitRepository(targetDirectory, url).then(isValid => {
                if (isValid) {
                    stepper.setInstalled(targetDirectory);
                    stepper.showFinalStep('success', `${title} located successfully!`, `Pre-installed ${title} detected. Installation skipped as your existing setup is ready to use.`);
                }
                else {
                    stepper.showFinalStep('error', `Unable to locate ${title}!`, `Please ensure you have selected the correct folder containing the ${title} repository.`);
                }
            });
        }
    });
}
async function CardInfo(url, extensionFolder, api, callback) {
    const dir = api.installationFolder;
    if (!dir)
        return;
    callback.setOpenFolders([dir]);
    const descManager = new DescriptionManager([
        {
            title: 'Installation Data',
            items: [
                { label: 'Installed On', result: 'loading' },
                { label: 'Last Updated', result: 'loading' },
                { label: 'Update Tag', result: 'loading' },
                { label: 'Release Notes', result: 'loading' },
            ],
        },
        {
            title: 'Disk Usage',
            items: [
                { label: 'Total Size', result: 'loading' },
                { label: 'Extensions Size', result: 'loading' },
            ],
        },
    ], callback);
    api.getFolderCreationTime(dir).then(result => {
        descManager.updateItem(0, 0, result);
    });
    api.getLastPulledDate(dir).then(result => {
        descManager.updateItem(0, 1, result);
    });
    api.getCurrentReleaseTag(dir).then(result => {
        if (result && result !== 'No tag found') {
            descManager.updateItem(0, 2, result);
            descManager.updateItem(0, 3, `${url}/releases/tag/${result}`);
        }
        else {
            descManager.updateItem(0, 2, undefined);
            descManager.updateItem(0, 3, undefined);
        }
    });
    if (extensionFolder) {
        api.getFolderSize(dir + extensionFolder).then(result => {
            descManager.updateItem(1, 1, formatSize(result));
        });
    }
    else {
        descManager.updateItem(1, 1, undefined);
    }
    api.getFolderSize(dir).then(result => {
        descManager.updateItem(1, 0, formatSize(result));
    });
}

const gitmyloArguments = [
    {
        category: 'Command Line Arguments',
        sections: [
            {
                section: 'Install',
                items: [
                    {
                        name: '--skip-install',
                        description: 'Skip installing packages',
                        type: 'CheckBox',
                    },
                    {
                        name: '--skip-venv',
                        description: 'Skip creating/activating venv, also skips install (for advanced users)',
                        type: 'CheckBox',
                    },
                    {
                        name: '--no-data-cache',
                        description: "Don\\'t override the default huggingface_hub cache path.",
                        type: 'CheckBox',
                    },
                    {
                        name: '--verbose',
                        description: 'Show more info, like logs during installs',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Gradio',
                items: [
                    {
                        name: '--share',
                        description: 'Share this gradio instance.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--username',
                        description: 'Gradio username',
                        type: 'Input',
                    },
                    {
                        name: '--password',
                        description: 'Gradio password (defaults to "password")',
                        type: 'Input',
                        defaultValue: 'password',
                    },
                    {
                        name: '--theme',
                        description: 'Gradio theme',
                        type: 'Input',
                        defaultValue: 'gradio/soft',
                    },
                    {
                        name: '--listen',
                        description: 'Listen on 0.0.0.0',
                        type: 'CheckBox',
                    },
                    {
                        name: '--port',
                        description: 'Use a different port, automatic when not set.',
                        type: 'Input',
                    },
                    {
                        name: '--launch',
                        description: 'Automatically open a browser window when the webui launches.',
                        type: 'CheckBox',
                    },
                ],
            },
        ],
    },
];

const shellCommand$6 = isWin ? 'call run.bat' : 'bash ./run.sh';
const URL$6 = 'https://github.com/gitmylo/audio-webui';
function parseArgsToString$e(args) {
    let result = isWin ? '@echo off\n\n' : '#!/bin/bash\n\n';
    let argResult = '';
    args.forEach(arg => {
        const argType = getArgumentType(arg.name, gitmyloArguments);
        if (argType === 'CheckBox') {
            argResult += `${arg.name} `;
        }
        else if (argType === 'File' || argType === 'Directory') {
            argResult += `${arg.name} "${arg.value}" `;
        }
        else {
            argResult += `${arg.name} ${arg.value} `;
        }
    });
    result += lodashExports.isEmpty(argResult) ? shellCommand$6 : `${shellCommand$6} ${argResult}`;
    return result;
}
function parseStringToArgs$e(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (!line.startsWith(shellCommand$6))
            return;
        // Extract the command line arguments and clear falsy values
        const clArgs = line.split(`${shellCommand$6} `)[1];
        if (!clArgs)
            return;
        const args = clArgs.split('--').filter(Boolean);
        // Map each argument to an object with id and value
        const result = args.map((arg) => {
            const [id, ...value] = arg.trim().split(' ');
            return {
                name: `--${id}`,
                value: value.join(' ').replace(/"/g, ''),
            };
        });
        // Process each argument
        result.forEach((value) => {
            // Check if the argument exists or valid
            if (isValidArg(value.name, gitmyloArguments)) {
                if (getArgumentType(value.name, gitmyloArguments) === 'CheckBox') {
                    argResult.push({ name: value.name, value: '' });
                }
                else {
                    argResult.push({ name: value.name, value: value.value });
                }
            }
        });
    });
    return argResult;
}
function startInstall$d(stepper) {
    GitInstaller('Audio Generation', URL$6, stepper);
}
async function cardInfo$d(api, callback) {
    return CardInfo(URL$6, '/extensions', api, callback);
}
const AG_RM = {
    catchAddress: catchAddress$3,
    parseArgsToString: parseArgsToString$e,
    parseStringToArgs: parseStringToArgs$e,
    cardInfo: cardInfo$d,
    manager: { startInstall: startInstall$d, updater: { updateType: 'git' } },
};

const comfyArguments = [
    {
        category: 'Command Line Arguments',
        sections: [
            {
                section: 'Network',
                items: [
                    {
                        name: '--listen',
                        description: 'Specify the IP address to listen on (default: 127.0.0.1). You can give a list of ip addresses' +
                            ' by separating them with a comma like: 127.2.2.2,127.3.3.3 If --listen is provided without an' +
                            ' argument, it defaults to 0.0.0.0,:: (listens on all ipv4 and ipv6)',
                        type: 'Input',
                        defaultValue: '127.0.0.1',
                    },
                    {
                        name: '--port',
                        description: 'Set the listen port.',
                        type: 'Input',
                        defaultValue: 8188,
                    },
                    {
                        name: '--tls-keyfile',
                        description: 'Path to TLS (SSL) key file. Enables TLS, makes app accessible at https://...' +
                            ' requires --tls-certfile to function',
                        type: 'File',
                    },
                    {
                        name: '--tls-certfile',
                        description: 'Path to TLS (SSL) certificate file. Enables TLS, makes app accessible at https://...' +
                            ' requires --tls-keyfile to function',
                        type: 'File',
                    },
                    {
                        name: '--enable-cors-header',
                        description: "Enable CORS (Cross-Origin Resource Sharing) with optional origin or allow all with default '*'.",
                        type: 'Input',
                    },
                    {
                        name: '--max-upload-size',
                        description: 'Set the maximum upload size in MB.',
                        type: 'Input',
                        defaultValue: 100,
                    },
                    {
                        name: '--enable-compress-response-body',
                        description: 'Enable compressing response body.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--comfy-api-base',
                        description: 'Set the base URL for the ComfyUI API. (default: https://api.comfy.org)',
                        type: 'Input',
                        defaultValue: 'https://api.comfy.org',
                    },
                ],
            },
            {
                section: 'Paths',
                items: [
                    {
                        name: '--base-directory',
                        description: 'Set the ComfyUI base directory for models, custom_nodes, input, output, temp, and user directories.',
                        type: 'Directory',
                    },
                    {
                        name: '--extra-model-paths-config',
                        description: 'Load one or more extra_model_paths.yaml files.',
                        type: 'File',
                    },
                    {
                        name: '--output-directory',
                        description: 'Set the ComfyUI output directory. Overrides --base-directory.',
                        type: 'Directory',
                    },
                    {
                        name: '--temp-directory',
                        description: 'Set the ComfyUI temp directory (default is in the ComfyUI directory). Overrides --base-directory.',
                        type: 'Directory',
                    },
                    {
                        name: '--input-directory',
                        description: 'Set the ComfyUI input directory. Overrides --base-directory.',
                        type: 'Directory',
                    },
                    {
                        name: '--user-directory',
                        description: 'Set the ComfyUI user directory with an absolute path. Overrides --base-directory.',
                        type: 'Directory',
                    },
                ],
            },
            {
                section: 'Execution',
                items: [
                    {
                        name: '--auto-launch',
                        description: 'Automatically launch ComfyUI in the default browser.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-auto-launch',
                        description: 'Disable auto launching the browser.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--cuda-device',
                        description: 'Set the id of the cuda device this instance will use. All other devices will not be visible.',
                        type: 'Input',
                    },
                    {
                        name: '--default-device',
                        description: 'Set the id of the default device, all other devices will stay visible.',
                        type: 'Input',
                    },
                    {
                        name: '--cuda-malloc',
                        description: 'Enable cudaMallocAsync (enabled by default for torch 2.0 and up).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-cuda-malloc',
                        description: 'Disable cudaMallocAsync.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Precision',
                items: [
                    {
                        name: '--force-fp32',
                        description: 'Force fp32 (If this makes your GPU work better please report it).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--force-fp16',
                        description: 'Force fp16.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--bf16-unet',
                        description: 'Run the diffusion model in bf16.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp16-unet',
                        description: 'Run the diffusion model in fp16',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp32-unet',
                        description: 'Run the diffusion model in fp32.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp64-unet',
                        description: 'Run the diffusion model in fp64.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp8_e4m3fn-unet',
                        description: 'Store unet weights in fp8_e4m3fn.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp8_e5m2-unet',
                        description: 'Store unet weights in fp8_e5m2.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp8_e8m0fnu-unet',
                        description: 'Store unet weights in fp8_e8m0fnu.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp16-vae',
                        description: 'Run the VAE in fp16, might cause black images.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp32-vae',
                        description: 'Run the VAE in full precision fp32.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--bf16-vae',
                        description: 'Run the VAE in bf16.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--cpu-vae',
                        description: 'Run the VAE on the CPU.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp8_e4m3fn-text-enc',
                        description: 'Store text encoder weights in fp8 (e4m3fn variant).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp8_e5m2-text-enc',
                        description: 'Store text encoder weights in fp8 (e5m2 variant).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp16-text-enc',
                        description: 'Store text encoder weights in fp16.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp32-text-enc',
                        description: 'Store text encoder weights in fp32.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--bf16-text-enc',
                        description: 'Store text encoder weights in bf16.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Optimizations',
                items: [
                    {
                        name: '--force-channels-last',
                        description: 'Force channels last format when inferencing the models.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--directml',
                        description: 'Use torch-directml.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--oneapi-device-selector',
                        description: 'Sets the oneAPI device(s) this instance will use.',
                        type: 'Input',
                    },
                    {
                        name: '--disable-ipex-optimize',
                        description: "Disables ipex.optimize default when loading models with Intel's Extension for Pytorch.",
                        type: 'CheckBox',
                    },
                    {
                        name: '--supports-fp8-compute',
                        description: 'ComfyUI will act like if the device supports fp8 compute.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--preview-method',
                        description: 'Default preview method for sampler nodes.',
                        type: 'DropDown',
                        values: ['none', 'auto', 'latent2rgb', 'taesd'],
                        defaultValue: 'none',
                    },
                    {
                        name: '--preview-size',
                        description: 'Sets the maximum preview size for sampler nodes.',
                        type: 'Input',
                        defaultValue: 512,
                    },
                    {
                        name: '--cache-classic',
                        description: 'Use the old style (aggressive) caching.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--cache-lru',
                        description: 'Use LRU caching with a maximum of N node results cached. May use more RAM/VRAM.',
                        type: 'Input',
                        defaultValue: 0,
                    },
                    {
                        name: '--cache-none',
                        description: 'Reduced RAM/VRAM usage at the expense of executing every node for each run.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-split-cross-attention',
                        description: 'Use the split cross attention optimization. Ignored when xformers is used.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-quad-cross-attention',
                        description: 'Use the sub-quadratic cross attention optimization . Ignored when xformers is used.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-pytorch-cross-attention',
                        description: 'Use the new pytorch 2.0 cross attention function.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-sage-attention',
                        description: 'Use sage attention.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-flash-attention',
                        description: 'Use FlashAttention.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-xformers',
                        description: 'Disable xformers.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--force-upcast-attention',
                        description: 'Force enable attention upcasting, please report if it fixes black images.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--dont-upcast-attention',
                        description: 'Disable all upcasting of attention. Should be unnecessary except for debugging.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--force-non-blocking',
                        description: 'Force ComfyUI to use non-blocking operations for all applicable tensors.' +
                            ' This may improve performance on some non-Nvidia systems but can cause issues with some workflows.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Memory Management',
                items: [
                    {
                        name: '--gpu-only',
                        description: 'Store and run everything (text encoders/CLIP models, etc... on the GPU).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--highvram',
                        description: 'By default models will be unloaded to CPU memory after being used.' +
                            ' This option keeps them in GPU memory.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--normalvram',
                        description: 'Used to force normal vram use if lowvram gets automatically enabled.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--lowvram',
                        description: 'Split the unet in parts to use less vram.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--novram',
                        description: "When lowvram isn't enough.",
                        type: 'CheckBox',
                    },
                    {
                        name: '--cpu',
                        description: 'To use the CPU for everything (slow).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--async-offload',
                        description: 'Use async weight offloading.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-smart-memory',
                        description: 'Force ComfyUI to agressively offload to regular ram instead of keeping models in vram when it can.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--reserve-vram',
                        description: 'Set the amount of vram in GB you want to reserve for use by your OS/other software. By default some' +
                            ' amount is reserved depending on your OS.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Miscellaneous',
                items: [
                    {
                        name: '--default-hashing-function',
                        description: 'Allows you to choose the hash function to use for duplicate filename /' +
                            ' contents comparison. Default is sha256.',
                        type: 'DropDown',
                        values: ['md5', 'sha1', 'sha256', 'sha512'],
                        defaultValue: 'sha256',
                    },
                    {
                        name: '--deterministic',
                        description: 'Make pytorch use slower deterministic algorithms when it can. Note that this' +
                            ' might not make images deterministic in all cases.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--mmap-torch-files',
                        description: 'Use mmap when loading ckpt/pt files.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-mmap',
                        description: "Don't use mmap when loading safetensors.",
                        type: 'CheckBox',
                    },
                    {
                        name: '--dont-print-server',
                        description: "Don't print server output.",
                        type: 'CheckBox',
                    },
                    {
                        name: '--quick-test-for-ci',
                        description: 'Quick test for CI.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--windows-standalone-build',
                        description: 'Windows standalone build: Enable convenient things that most people using the' +
                            ' standalone windows build will probably enjoy (like auto opening the page on startup).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-metadata',
                        description: 'Disable saving prompt metadata in files.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-all-custom-nodes',
                        description: 'Disable loading all custom nodes.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--whitelist-custom-nodes',
                        description: 'Specify custom node folders to load even when --disable-all-custom-nodes is enabled.',
                        type: 'Input',
                    },
                    {
                        name: '--disable-api-nodes',
                        description: 'Disable loading all api nodes.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--multi-user',
                        description: 'Enables per-user storage.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--verbose',
                        description: 'Set the logging level',
                        type: 'DropDown',
                        values: ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                        defaultValue: 'INFO',
                    },
                    {
                        name: '--log-stdout',
                        description: 'Send normal process output to stdout instead of stderr (default).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--front-end-version',
                        description: 'Specifies the version of the frontend to be used. This command needs internet connectivity' +
                            ' to query and download available frontend implementations from GitHub releases. The version' +
                            ' string should be in the format of: [repoOwner]/[repoName]@[version]',
                        type: 'Input',
                        defaultValue: 'comfyanonymous/ComfyUI@latest',
                    },
                    {
                        name: '--front-end-root',
                        description: 'The local filesystem path to the directory where the frontend is' +
                            ' located. Overrides --front-end-version.',
                        type: 'Directory',
                    },
                    {
                        name: '--fast',
                        description: 'Enable some untested and potentially quality deteriorating optimizations.' +
                            ' Can enable specific ones like fp16_accumulation, fp8_matrix_mult, cublas_ops.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--database-url',
                        description: "Specify the database URL, e.g. for an in-memory database you can use 'sqlite:///:memory:'.",
                        type: 'Input',
                    },
                ],
            },
        ],
    },
];

const COMFYUI_URL = 'https://github.com/comfyanonymous/ComfyUI';
function parseArgsToString$d(args) {
    let result = isWin ? '@echo off\n\n' : '#!/bin/bash\n\n';
    let argResult = '';
    args.forEach(arg => {
        const argType = getArgumentType(arg.name, comfyArguments);
        if (argType === 'CheckBox') {
            argResult += `${arg.name} `;
        }
        else if (argType === 'File' || argType === 'Directory') {
            argResult += `${arg.name} "${arg.value}" `;
        }
        else {
            argResult += `${arg.name} ${arg.value} `;
        }
    });
    result += lodashExports.isEmpty(argResult) ? 'python main.py' : `python main.py ${argResult}`;
    return result;
}
function parseStringToArgs$d(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (!line.startsWith('python main.py'))
            return;
        // Extract the command line arguments and clear falsy values
        const clArgs = line.split('python main.py ')[1];
        if (!clArgs)
            return;
        const args = clArgs.split('--').filter(Boolean);
        // Map each argument to an object with id and value
        const result = args.map((arg) => {
            const [id, ...value] = arg.trim().split(' ');
            return {
                name: `--${id}`,
                value: value.join(' ').replace(/"/g, ''),
            };
        });
        // Process each argument
        result.forEach((value) => {
            // Check if the argument exists or valid
            if (isValidArg(value.name, comfyArguments)) {
                if (getArgumentType(value.name, comfyArguments) === 'CheckBox') {
                    argResult.push({ name: value.name, value: '' });
                }
                else {
                    argResult.push({ name: value.name, value: value.value });
                }
            }
        });
    });
    return argResult;
}
async function fetchExtensionList$4() {
    try {
        const response = await fetch('https://raw.githubusercontent.com/ltdrdata/ComfyUI-Manager/main/custom-node-list.json');
        const extensions = await response.json();
        return extensions.custom_nodes.map((extension) => ({
            title: extension.title,
            description: extension.description,
            url: extension.reference,
        }));
    }
    catch (e) {
        console.error(e);
        return [];
    }
}
function startInstall$c(stepper) {
    const selectOptions = [
        'NVIDIA CU129',
        'NVIDIA CU129 Nightly',
        'AMD GPUs (Linux only) ROCm 6.4',
        'AMD GPUs (Linux only) ROCm 6.4 Nightly',
        'Intel GPUs (Windows and Linux)',
        'Intel GPUs Nightly (Windows and Linux)',
    ];
    const getPyTorchInstallCommand = (selectedOption) => {
        switch (selectedOption) {
            case 'AMD GPUs (Linux only) ROCm 6.2':
                return 'pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/rocm6.4';
            case 'AMD GPUs (Linux only) ROCm 6.4 Nightly':
                return 'pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/rocm6.4';
            case 'Intel GPUs (Windows and Linux)':
                return 'pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/xpu';
            case 'Intel GPUs Nightly (Windows and Linux)':
                return 'pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/xpu';
            case 'NVIDIA CU129':
                return 'pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu129';
            case 'NVIDIA CU129 Nightly':
                return 'pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu129';
            default:
                return 'pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu124';
        }
    };
    stepper.initialSteps(['ComfyUI', 'Clone', 'PyTorch Version', 'Install PyTorch', 'Install Dependencies', 'Finish']);
    stepper.starterStep().then(({ targetDirectory, chosen }) => {
        if (chosen === 'install') {
            stepper.nextStep().then(() => {
                stepper.cloneRepository(COMFYUI_URL).then(dir => {
                    stepper.nextStep().then(() => {
                        stepper
                            .collectUserInput([
                            {
                                id: 'gpu_type',
                                type: 'select',
                                label: 'Please Select PyTorch Version (Gpu)',
                                selectOptions,
                                defaultValue: selectOptions[0],
                                isRequired: true,
                            },
                        ])
                            .then(result => {
                            stepper.nextStep().then(() => {
                                stepper.executeTerminalCommands(getPyTorchInstallCommand(result[0].result)).then(() => {
                                    stepper.nextStep().then(() => {
                                        stepper.executeTerminalCommands('pip install -r requirements.txt', dir).then(() => {
                                            stepper.setInstalled(dir);
                                            stepper.showFinalStep('success', 'ComfyUI installation complete!', 'All installation steps completed successfully. Your ComfyUI environment is now ready for use.');
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        }
        else if (targetDirectory) {
            stepper.utils.validateGitRepository(targetDirectory, COMFYUI_URL).then(isValid => {
                if (isValid) {
                    stepper.setInstalled(targetDirectory);
                    stepper.showFinalStep('success', 'ComfyUI located successfully!', 'Pre-installed ComfyUI detected. Installation skipped as your existing setup is ready to use.');
                }
                else {
                    stepper.showFinalStep('error', 'Unable to locate ComfyUI!', 'Please ensure you have selected the correct folder containing the ComfyUI repository.');
                }
            });
        }
    });
}
async function cardInfo$c(api, callback) {
    return CardInfo(COMFYUI_URL, '/custom_nodes', api, callback);
}
const COMFYUI_RM = {
    catchAddress: catchAddress$3,
    fetchExtensionList: fetchExtensionList$4,
    parseArgsToString: parseArgsToString$d,
    parseStringToArgs: parseStringToArgs$d,
    cardInfo: cardInfo$c,
    manager: { startInstall: startInstall$c, updater: { updateType: 'git' } },
};

const comfyZludaArguments = [
    {
        category: 'Environment Variables',
        items: [
            {
                name: 'PYTHON',
                description: 'Sets a custom path for Python executable.',
                type: 'File',
                defaultValue: '"%~dp0/venv/Scripts/python.exe"',
            },
            {
                name: 'VENV_DIR',
                description: 'Specifies the path for the virtual environment. Default is venv.' +
                    ' Special value - runs the script without creating virtual environment.',
                type: 'Directory',
                defaultValue: './venv',
            },
            {
                name: 'ZLUDA_COMGR_LOG_LEVEL',
                description: 'Zluda log level',
                type: 'Input',
                defaultValue: '1',
            },
        ],
    },
    {
        category: 'Command Line Arguments',
        sections: [
            {
                section: 'Network',
                items: [
                    {
                        name: '--listen',
                        description: 'Specify the IP address to listen on (default: 127.0.0.1). You can give a list of ip addresses' +
                            ' by separating them with a comma like: 127.2.2.2,127.3.3.3 If --listen is provided without an' +
                            ' argument, it defaults to 0.0.0.0,:: (listens on all ipv4 and ipv6)',
                        type: 'Input',
                        defaultValue: '127.0.0.1',
                    },
                    {
                        name: '--port',
                        description: 'Set the listen port.',
                        type: 'Input',
                        defaultValue: 8188,
                    },
                    {
                        name: '--tls-keyfile',
                        description: 'Path to TLS (SSL) key file. Enables TLS, makes app accessible at https://...' +
                            ' requires --tls-certfile to function',
                        type: 'File',
                    },
                    {
                        name: '--tls-certfile',
                        description: 'Path to TLS (SSL) certificate file. Enables TLS, makes app accessible at https://...' +
                            ' requires --tls-keyfile to function',
                        type: 'File',
                    },
                    {
                        name: '--enable-cors-header',
                        description: "Enable CORS (Cross-Origin Resource Sharing) with optional origin or allow all with default '*'.",
                        type: 'Input',
                    },
                    {
                        name: '--max-upload-size',
                        description: 'Set the maximum upload size in MB.',
                        type: 'Input',
                        defaultValue: 100,
                    },
                    {
                        name: '--enable-compress-response-body',
                        description: 'Enable compressing response body.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--comfy-api-base',
                        description: 'Set the base URL for the ComfyUI API. (default: https://api.comfy.org)',
                        type: 'Input',
                        defaultValue: 'https://api.comfy.org',
                    },
                ],
            },
            {
                section: 'Paths',
                items: [
                    {
                        name: '--base-directory',
                        description: 'Set the ComfyUI base directory for models, custom_nodes, input, output, temp, and user directories.',
                        type: 'Directory',
                    },
                    {
                        name: '--extra-model-paths-config',
                        description: 'Load one or more extra_model_paths.yaml files.',
                        type: 'File',
                    },
                    {
                        name: '--output-directory',
                        description: 'Set the ComfyUI output directory. Overrides --base-directory.',
                        type: 'Directory',
                    },
                    {
                        name: '--temp-directory',
                        description: 'Set the ComfyUI temp directory (default is in the ComfyUI directory). Overrides --base-directory.',
                        type: 'Directory',
                    },
                    {
                        name: '--input-directory',
                        description: 'Set the ComfyUI input directory. Overrides --base-directory.',
                        type: 'Directory',
                    },
                    {
                        name: '--user-directory',
                        description: 'Set the ComfyUI user directory with an absolute path. Overrides --base-directory.',
                        type: 'Directory',
                    },
                ],
            },
            {
                section: 'Execution',
                items: [
                    {
                        name: '--auto-launch',
                        description: 'Automatically launch ComfyUI in the default browser.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-auto-launch',
                        description: 'Disable auto launching the browser.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--cuda-device',
                        description: 'Set the id of the cuda device this instance will use. All other devices will not be visible.',
                        type: 'Input',
                    },
                    {
                        name: '--default-device',
                        description: 'Set the id of the default device, all other devices will stay visible.',
                        type: 'Input',
                    },
                    {
                        name: '--cuda-malloc',
                        description: 'Enable cudaMallocAsync (enabled by default for torch 2.0 and up).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-cuda-malloc',
                        description: 'Disable cudaMallocAsync.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Precision',
                items: [
                    {
                        name: '--force-fp32',
                        description: 'Force fp32 (If this makes your GPU work better please report it).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--force-fp16',
                        description: 'Force fp16.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--bf16-unet',
                        description: 'Run the diffusion model in bf16.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp16-unet',
                        description: 'Run the diffusion model in fp16',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp32-unet',
                        description: 'Run the diffusion model in fp32.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp64-unet',
                        description: 'Run the diffusion model in fp64.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp8_e4m3fn-unet',
                        description: 'Store unet weights in fp8_e4m3fn.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp8_e5m2-unet',
                        description: 'Store unet weights in fp8_e5m2.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp8_e8m0fnu-unet',
                        description: 'Store unet weights in fp8_e8m0fnu.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp16-vae',
                        description: 'Run the VAE in fp16, might cause black images.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp32-vae',
                        description: 'Run the VAE in full precision fp32.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--bf16-vae',
                        description: 'Run the VAE in bf16.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--cpu-vae',
                        description: 'Run the VAE on the CPU.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp8_e4m3fn-text-enc',
                        description: 'Store text encoder weights in fp8 (e4m3fn variant).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp8_e5m2-text-enc',
                        description: 'Store text encoder weights in fp8 (e5m2 variant).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp16-text-enc',
                        description: 'Store text encoder weights in fp16.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--fp32-text-enc',
                        description: 'Store text encoder weights in fp32.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--bf16-text-enc',
                        description: 'Store text encoder weights in bf16.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Optimizations',
                items: [
                    {
                        name: '--force-channels-last',
                        description: 'Force channels last format when inferencing the models.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--directml',
                        description: 'Use torch-directml.',
                        type: 'Input',
                    },
                    {
                        name: '--oneapi-device-selector',
                        description: 'Sets the oneAPI device(s) this instance will use.',
                        type: 'Input',
                    },
                    {
                        name: '--disable-ipex-optimize',
                        description: "Disables ipex.optimize default when loading models with Intel's Extension for Pytorch.",
                        type: 'CheckBox',
                    },
                    {
                        name: '--supports-fp8-compute',
                        description: 'ComfyUI will act like if the device supports fp8 compute.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--preview-method',
                        description: 'Default preview method for sampler nodes.',
                        type: 'DropDown',
                        values: ['none', 'auto', 'latent2rgb', 'taesd'],
                        defaultValue: 'none',
                    },
                    {
                        name: '--preview-size',
                        description: 'Sets the maximum preview size for sampler nodes.',
                        type: 'Input',
                        defaultValue: 512,
                    },
                    {
                        name: '--cache-classic',
                        description: 'Use the old style (aggressive) caching.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--cache-lru',
                        description: 'Use LRU caching with a maximum of N node results cached. May use more RAM/VRAM.',
                        type: 'Input',
                        defaultValue: 0,
                    },
                    {
                        name: '--cache-none',
                        description: 'Reduced RAM/VRAM usage at the expense of executing every node for each run.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-split-cross-attention',
                        description: 'Use the split cross attention optimization. Ignored when xformers is used.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-quad-cross-attention',
                        description: 'Use the sub-quadratic cross attention optimization . Ignored when xformers is used.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-pytorch-cross-attention',
                        description: 'Use the new pytorch 2.0 cross attention function.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-sage-attention',
                        description: 'Use sage attention.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-flash-attention',
                        description: 'Use FlashAttention.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-xformers',
                        description: 'Disable xformers.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--force-upcast-attention',
                        description: 'Force enable attention upcasting, please report if it fixes black images.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--dont-upcast-attention',
                        description: 'Disable all upcasting of attention. Should be unnecessary except for debugging.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--force-non-blocking',
                        description: 'Force ComfyUI to use non-blocking operations for all applicable tensors. This may improve' +
                            ' performance on some non-Nvidia systems but can cause issues with some workflows.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Memory Management',
                items: [
                    {
                        name: '--gpu-only',
                        description: 'Store and run everything (text encoders/CLIP models, etc... on the GPU).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--highvram',
                        description: 'By default models will be unloaded to CPU memory after being used.' +
                            ' This option keeps them in GPU memory.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--normalvram',
                        description: 'Used to force normal vram use if lowvram gets automatically enabled.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--lowvram',
                        description: 'Split the unet in parts to use less vram.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--novram',
                        description: "When lowvram isn't enough.",
                        type: 'CheckBox',
                    },
                    {
                        name: '--cpu',
                        description: 'To use the CPU for everything (slow).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--async-offload',
                        description: 'Use async weight offloading.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-smart-memory',
                        description: 'Force ComfyUI to agressively offload to regular ram instead of keeping models in vram when it can.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--reserve-vram',
                        description: 'Set the amount of vram in GB you want to reserve for use by your OS/other software. By default some' +
                            ' amount is reserved depending on your OS.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Miscellaneous',
                items: [
                    {
                        name: '--default-hashing-function',
                        description: 'Allows you to choose the hash function to use for duplicate filename /' +
                            ' contents comparison. Default is sha256.',
                        type: 'DropDown',
                        values: ['md5', 'sha1', 'sha256', 'sha512'],
                        defaultValue: 'sha256',
                    },
                    {
                        name: '--deterministic',
                        description: 'Make pytorch use slower deterministic algorithms when it can. Note that this' +
                            ' might not make images deterministic in all cases.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--mmap-torch-files',
                        description: 'Use mmap when loading ckpt/pt files.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-mmap',
                        description: "Don't use mmap when loading safetensors.",
                        type: 'CheckBox',
                    },
                    {
                        name: '--dont-print-server',
                        description: "Don't print server output.",
                        type: 'CheckBox',
                    },
                    {
                        name: '--quick-test-for-ci',
                        description: 'Quick test for CI.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--windows-standalone-build',
                        description: 'Windows standalone build: Enable convenient things that most people using the' +
                            ' standalone windows build will probably enjoy (like auto opening the page on startup).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-metadata',
                        description: 'Disable saving prompt metadata in files.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable-all-custom-nodes',
                        description: 'Disable loading all custom nodes.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--whitelist-custom-nodes',
                        description: 'Specify custom node folders to load even when --disable-all-custom-nodes is enabled.',
                        type: 'Input',
                    },
                    {
                        name: '--disable-api-nodes',
                        description: 'Disable loading all api nodes.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--multi-user',
                        description: 'Enables per-user storage.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--verbose',
                        description: 'Set the logging level',
                        type: 'DropDown',
                        values: ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                        defaultValue: 'INFO',
                    },
                    {
                        name: '--log-stdout',
                        description: 'Send normal process output to stdout instead of stderr (default).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--front-end-version',
                        description: 'Specifies the version of the frontend to be used. This command needs internet' +
                            ' connectivity to query and download available frontend implementations from' +
                            ' GitHub releases. The version string should be in the format of: [repoOwner]/[repoName]@[version]',
                        type: 'Input',
                        defaultValue: 'comfyanonymous/ComfyUI@latest',
                    },
                    {
                        name: '--front-end-root',
                        description: 'The local filesystem path to the directory where the frontend is' +
                            ' located. Overrides --front-end-version.',
                        type: 'Directory',
                    },
                    {
                        name: '--fast',
                        description: 'Enable some untested and potentially quality deteriorating optimizations.' +
                            ' Can enable specific ones like fp16_accumulation, fp8_matrix_mult, cublas_ops.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--database-url',
                        description: "Specify the database URL, e.g. for an in-memory database you can use 'sqlite:///:memory:'.",
                        type: 'Input',
                    },
                ],
            },
        ],
    },
];

const URL$5 = 'https://github.com/patientx/ComfyUI-Zluda';
function parseArgsToString$c(args) {
    let result = '@echo off' + '\n\n';
    let argResult = '';
    args.forEach(arg => {
        if (arg.name === 'PYTHON' || arg.name === 'VENV_DIR' || arg.name === 'ZLUDA_COMGR_LOG_LEVEL') {
            result += `set ${arg.name}=${arg.value}` + `\n`;
            return;
        }
        const argType = getArgumentType(arg.name, comfyZludaArguments);
        if (argType === 'CheckBox') {
            argResult += `${arg.name} `;
        }
        else if (argType === 'File' || argType === 'Directory') {
            argResult += `${arg.name} "${arg.value}" `;
        }
        else {
            argResult += `${arg.name} ${arg.value} `;
        }
    });
    result += '\n' + '.\\zluda\\zluda.exe -- ';
    result += lodashExports.isEmpty(argResult) ? '%PYTHON% main.py' : `%PYTHON% main.py ${argResult}`;
    result += '\n\n' + 'pause';
    return result;
}
function parseStringToArgs$c(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (line.startsWith('set')) {
            const argName = line.split('=')[0].split(' ')[1].trim();
            const argValue = line.split('=')[1].trim();
            if (argName === 'PYTHON' || argName === 'VENV_DIR' || argName === 'ZLUDA_COMGR_LOG_LEVEL') {
                argResult.push({ name: argName, value: argValue });
            }
        }
        else if (line.includes('%PYTHON% main.py')) {
            // Extract the command line arguments and clear falsy values
            const clArgs = line.split('%PYTHON% main.py ')[1];
            if (!clArgs)
                return;
            const args = clArgs.split('--').filter(Boolean);
            // Map each argument to an object with id and value
            const result = args.map((arg) => {
                const [id, ...value] = arg.trim().split(' ');
                return {
                    name: `--${id}`,
                    value: value.join(' ').replace(/"/g, ''),
                };
            });
            // Process each argument
            result.forEach((value) => {
                // Check if the argument exists or valid
                if (isValidArg(value.name, comfyZludaArguments)) {
                    if (getArgumentType(value.name, comfyZludaArguments) === 'CheckBox') {
                        argResult.push({ name: value.name, value: '' });
                    }
                    else {
                        argResult.push({ name: value.name, value: value.value });
                    }
                }
            });
        }
    });
    return argResult;
}
async function fetchExtensionList$3() {
    try {
        const response = await fetch('https://raw.githubusercontent.com/ltdrdata/ComfyUI-Manager/main/custom-node-list.json');
        const extensions = await response.json();
        return extensions.custom_nodes.map((extension) => ({
            title: extension.title,
            description: extension.description,
            url: extension.reference,
        }));
    }
    catch (e) {
        console.error(e);
        return [];
    }
}
const COMFYUI_ZLUDA_URL = 'https://github.com/patientx/ComfyUI-Zluda';
const customArguments = [
    { name: 'PYTHON', value: '"%~dp0/venv/Scripts/python.exe"' },
    { name: 'VENV_DIR', value: './venv' },
    {
        name: '--use-quad-cross-attention',
        value: '',
    },
];
function startInstall$b(stepper) {
    stepper.initialSteps(['ComfyUI Zluda', 'Clone', 'Install', 'Finish']);
    stepper.starterStep().then(({ targetDirectory, chosen }) => {
        if (chosen === 'install') {
            stepper.nextStep().then(() => {
                stepper.cloneRepository(COMFYUI_ZLUDA_URL).then(dir => {
                    stepper.nextStep().then(() => {
                        stepper.runTerminalScript(dir, 'install.bat').then(() => {
                            stepper.setInstalled(dir);
                            stepper.postInstall.config({
                                customArguments: {
                                    presetName: 'Zluda Config',
                                    customArguments,
                                },
                            });
                            stepper.showFinalStep('success', 'ComfyUI-Zluda installation complete!', 'All installation steps completed successfully. Your ComfyUI-Zluda environment is now ready for use.');
                        });
                    });
                });
            });
        }
        else if (targetDirectory) {
            stepper.utils.validateGitRepository(targetDirectory, COMFYUI_ZLUDA_URL).then(isValid => {
                if (isValid) {
                    stepper.setInstalled(targetDirectory);
                    stepper.postInstall.config({
                        customArguments: {
                            presetName: 'Zluda Config',
                            customArguments,
                        },
                    });
                    stepper.showFinalStep('success', 'ComfyUI-Zluda located successfully!', 'Pre-installed ComfyUI-Zluda detected. Installation skipped as your existing setup is ready to use.');
                }
                else {
                    stepper.showFinalStep('error', 'Unable to locate ComfyUI-Zluda!', 'Please ensure you have selected the correct folder containing the ComfyUI-Zluda repository.');
                }
            });
        }
    });
}
async function cardInfo$b(api, callback) {
    return CardInfo(URL$5, '/custom_nodes', api, callback);
}
const COMFYUI_ZLUDA_RM = {
    catchAddress: catchAddress$3,
    fetchExtensionList: fetchExtensionList$3,
    parseArgsToString: parseArgsToString$c,
    parseStringToArgs: parseStringToArgs$c,
    cardInfo: cardInfo$b,
    manager: { startInstall: startInstall$b, updater: { updateType: 'git' } },
};

const Invoke_Command_CreateVenv = 'uv venv --relocatable --prompt invoke --python 3.12 --python-preference only-managed .venv';
const Invoke_Command_ActivateVenv = isWin ? '.venv\\Scripts\\activate' : 'source .venv/bin/activate';
const Invoke_Command_InstallPip = 'python -m ensurepip --upgrade';
const Invoke_Command_InstallUV = isWin
    ? 'powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"'
    : 'wget -qO- https://astral.sh/uv/install.sh | sh';
const Invoke_PyPI = {
    cu126: 'cu126: Windows or Linux with an Nvidia GPU',
    rocm: 'rocm6.2.4: Linux with an AMD GPU',
    cpu: 'cpu: Linux with no GPU',
};
const Invoke_PackageSpec = {
    invokeai: 'invokeai: Nvidia 30xx series GPU or newer, or do not have an Nvidia GPU',
    invokeaiXformers: 'invokeai[xformers]:  Nvidia 20xx series GPU or older',
};
const INVOKEAI_INSTALL_TIME_KEY = 'install-time-invokeai';
const INVOKEAI_INSTALL_DIR_KEY = 'install-dir-invokeai';
const INVOKEAI_UPDATE_TIME_KEY = 'update-time-invokeai';
const INVOKEAI_UPDATE_AVAILABLE_KEY = 'update-version-invokeai';
const invokeGetInputFields = async (ipc) => {
    const releases = await ipc.invoke('invoke_latest_versions');
    return [
        {
            label: 'Installation Directory',
            id: 'install_dir',
            type: 'directory',
            isRequired: true,
        },
        {
            label: 'InvokeAI Version',
            id: 'invoke_version',
            type: 'select',
            selectOptions: releases,
            defaultValue: releases[0],
            isRequired: true,
        },
        {
            label: 'Package Specifier',
            id: 'package_spec',
            type: 'select',
            selectOptions: [Invoke_PackageSpec.invokeai, Invoke_PackageSpec.invokeaiXformers],
            defaultValue: Invoke_PackageSpec.invokeai,
            isRequired: true,
        },
        {
            label: 'PyPI',
            id: 'pypi',
            type: 'select',
            selectOptions: [Invoke_PyPI.cu126, Invoke_PyPI.rocm, Invoke_PyPI.cpu, 'others'],
            defaultValue: Invoke_PyPI.cu126,
            isRequired: true,
        },
    ];
};
const invokeGetInputResults = (items) => {
    let installDirResult = '';
    let packageSpecResult = '';
    let pyPIResult = '';
    let version = '';
    items.forEach(item => {
        if (item.id === 'install_dir') {
            installDirResult = item.result;
        }
        else if (item.id === 'invoke_version') {
            version = item.result;
        }
        else if (item.id === 'package_spec') {
            switch (item.result) {
                case Invoke_PackageSpec.invokeaiXformers:
                    packageSpecResult = 'invokeai[xformers]';
                    break;
                case Invoke_PackageSpec.invokeai:
                default:
                    packageSpecResult = 'invokeai';
            }
        }
        else if (item.id === 'pypi') {
            switch (item.result) {
                case Invoke_PyPI.rocm:
                    pyPIResult = 'https://download.pytorch.org/whl/rocm6.3';
                    break;
                case Invoke_PyPI.cu126:
                    pyPIResult = 'https://download.pytorch.org/whl/cu128';
                    break;
                case Invoke_PyPI.cpu:
                    pyPIResult = 'https://download.pytorch.org/whl/cpu';
                    break;
                default:
                case 'others':
                    pyPIResult = '';
                    break;
            }
        }
    });
    return { installDirResult, version, packageSpecResult, pyPIResult };
};
const invokeGetInstallCommand = (items) => {
    const { version, pyPIResult, packageSpecResult } = invokeGetInputResults(items);
    const index = pyPIResult ? ` --index=${pyPIResult}` : '';
    return (`uv pip install ${packageSpecResult}==${version} --python 3.12 ` +
        `--python-preference only-managed${index} --force-reinstall`);
};

function parseArgsToString$b(args) {
    let result = 'schema_version: 4.0.2\n\n';
    const argResult = args
        .map(arg => {
        return `${arg.name}: ${arg.value}`;
    })
        .join('\n');
    result += argResult;
    return result;
}
function parseStringToArgs$b(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (line.startsWith('schema_version') || line.startsWith('#') || lodash.isEmpty(line.trim()))
            return;
        const clArgs = line.split(`: `);
        const [name, value] = clArgs;
        argResult.push({ name, value });
    });
    return argResult;
}
function startInstall$a(stepper) {
    stepper.initialSteps(['InvokeAI', 'UV', 'Config', 'Install', 'Finish']);
    stepper.starterStep().then(({ targetDirectory, chosen }) => {
        if (chosen === 'install') {
            stepper.nextStep().then(() => {
                stepper.progressBar(true, 'Detecting UV installation...');
                stepper.ipc.invoke('is_uv_installed').then(isUvInstalled => {
                    if (!isUvInstalled) {
                        stepper.executeTerminalCommands(Invoke_Command_InstallUV).then(() => {
                            stepper.showFinalStep('success', 'UV Package Manager Installation Complete.', 'Restart your computer and run the installer again to continue installation.');
                        });
                    }
                    else {
                        stepper.nextStep().then(() => {
                            stepper.progressBar(true, 'Fetching the latest InvokeAI versions...');
                            invokeGetInputFields(stepper.ipc).then(fields => {
                                stepper.collectUserInput(fields).then(result => {
                                    const { installDirResult } = invokeGetInputResults(result);
                                    const installCommand = invokeGetInstallCommand(result);
                                    stepper.nextStep().then(() => {
                                        stepper
                                            .executeTerminalCommands([
                                            Invoke_Command_CreateVenv,
                                            Invoke_Command_ActivateVenv,
                                            Invoke_Command_InstallPip,
                                            installCommand,
                                        ], installDirResult)
                                            .then(() => {
                                            stepper.setInstalled(installDirResult);
                                            const currentDate = new Date();
                                            stepper.storage.set(INVOKEAI_INSTALL_TIME_KEY, currentDate.toLocaleString());
                                            stepper.storage.set(INVOKEAI_INSTALL_DIR_KEY, installDirResult);
                                            stepper.showFinalStep('success', 'InvokeAI Installation Complete.', 'Your InvokeAI environment is ready. Enjoy!');
                                        });
                                    });
                                });
                            });
                        });
                    }
                });
            });
        }
        else {
            stepper.ipc.invoke('validate_install_dir', targetDirectory).then(isValid => {
                if (isValid) {
                    stepper.setInstalled(targetDirectory);
                    const currentDate = new Date();
                    stepper.storage.set(INVOKEAI_INSTALL_TIME_KEY, currentDate.toLocaleString());
                    stepper.storage.set(INVOKEAI_INSTALL_DIR_KEY, targetDirectory);
                    stepper.showFinalStep('success', 'InvokeAI Environment Found.', 'Location validated successfully.');
                }
                else {
                    stepper.showFinalStep('error', 'Invalid Environment!', 'Could not find InvokeAI installation in the selected directory.');
                }
            });
        }
    });
}
function startUpdate$4(stepper, dir) {
    if (!dir)
        return;
    const venvDir = isWin ? `${dir}\\.venv` : `${dir}/.venv`;
    const pythonPath = getVenvPythonPath(venvDir);
    stepper.initialSteps(['Updating', 'Done']);
    stepper
        .executeTerminalCommands(`${isWin ? '&' : '.'} "${pythonPath}" -m pip install --upgrade "invokeai"`, dir)
        .then(() => {
        const currentDate = new Date();
        stepper.storage.set(INVOKEAI_UPDATE_TIME_KEY, currentDate);
        stepper.setUpdated();
        stepper.showFinalStep('success', 'InvokeAI Updated Successfully!', `InvokeAI has been updated to the latest version. You can now enjoy the new features and improvements.`);
    });
}
async function cardInfo$a(api, callback) {
    const dir = api.installationFolder;
    callback.setOpenFolders(dir ? [dir] : undefined);
    const descManager = new DescriptionManager([
        {
            title: 'Installation Data',
            items: [
                { label: 'Install Date', result: 'loading' },
                { label: 'Update Date', result: 'loading' },
                { label: 'Current Version', result: 'loading' },
                { label: 'Latest Version', result: 'loading' },
            ],
        },
    ], callback);
    api.storage.get(INVOKEAI_INSTALL_TIME_KEY).then(result => {
        descManager.updateItem(0, 0, result);
    });
    api.storage.get(INVOKEAI_UPDATE_TIME_KEY).then(result => {
        descManager.updateItem(0, 1, result);
    });
    api.ipc.invoke('invoke_current_version').then(result => {
        descManager.updateItem(0, 2, result);
    });
    api.storage.get(INVOKEAI_UPDATE_AVAILABLE_KEY).then(result => {
        descManager.updateItem(0, 3, result);
    });
}
const INVOKE_RM = {
    catchAddress: catchAddress$3,
    cardInfo: cardInfo$a,
    parseArgsToString: parseArgsToString$b,
    parseStringToArgs: parseStringToArgs$b,
    manager: { startInstall: startInstall$a, updater: { updateType: 'stepper', startUpdate: startUpdate$4 } },
};

const bmaltaisArguments = [
    {
        category: 'Command Line Arguments',
        items: [
            {
                name: '--config',
                description: 'Path to the toml config file for interface defaults',
                type: 'File',
                defaultValue: './config.toml',
            },
            {
                name: '--debug',
                description: 'Enable debug mode.',
                type: 'CheckBox',
            },
            {
                name: '--listen',
                description: 'Specify the IP address to listen on for connections to Gradio.',
                type: 'Input',
                defaultValue: '127.0.0.1',
            },
            {
                name: '--username',
                description: 'Set a username for authentication.',
                type: 'Input',
                defaultValue: '',
            },
            {
                name: '--password',
                description: 'Set a password for authentication.',
                type: 'Input',
                defaultValue: '',
            },
            {
                name: '--server_port',
                description: 'Define the port to run the server listener on.',
                type: 'Input',
                defaultValue: '0',
            },
            {
                name: '--inbrowser',
                description: 'Open the Gradio UI in a web browser.',
                type: 'CheckBox',
            },
            {
                name: '--share',
                description: 'Share the Gradio UI.',
                type: 'CheckBox',
            },
            {
                name: '--headless',
                description: 'Indicates whether the server is headless.',
                type: 'CheckBox',
            },
            {
                name: '--language',
                description: 'Set custom language',
                type: 'Input',
            },
            {
                name: '--use-ipex',
                description: 'Use IPEX environment.',
                type: 'CheckBox',
            },
            {
                name: '--use-rocm',
                description: 'Use ROCm environment.',
                type: 'CheckBox',
            },
            {
                name: '--do_not_use_shell',
                description: 'Enforce not to use shell=True when running external commands.',
                type: 'CheckBox',
            },
            {
                name: '--do_not_share',
                description: 'Do not share the Gradio UI.',
                type: 'CheckBox',
            },
            {
                name: '--root_path',
                description: '`root_path` for Gradio to enable reverse proxy support. e.g. /kohya_ss',
                type: 'Input',
            },
        ],
    },
];

const shellCommand$5 = isWin ? 'call gui.bat' : 'bash ./gui.sh';
const URL$4 = 'https://github.com/bmaltais/kohya_ss';
function parseArgsToString$a(args) {
    let result = isWin ? '@echo off\n\n' : '#!/bin/bash\n\n';
    let argResult = '';
    args.forEach(arg => {
        const argType = getArgumentType(arg.name, bmaltaisArguments);
        if (argType === 'CheckBox') {
            argResult += `${arg.name} `;
        }
        else if (argType === 'File' || argType === 'Directory') {
            argResult += `${arg.name} "${arg.value}" `;
        }
        else {
            argResult += `${arg.name} ${arg.value} `;
        }
    });
    result += lodashExports.isEmpty(argResult) ? shellCommand$5 : `${shellCommand$5} ${argResult}`;
    return result;
}
function parseStringToArgs$a(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (!line.startsWith(shellCommand$5))
            return;
        // Extract the command line arguments and clear falsy values
        const clArgs = line.split(`${shellCommand$5} `)[1];
        if (!clArgs)
            return;
        const args = clArgs.split('--').filter(Boolean);
        // Map each argument to an object with id and value
        const result = args.map((arg) => {
            const [id, ...value] = arg.trim().split(' ');
            return {
                name: `--${id}`,
                value: value.join(' ').replace(/"/g, ''),
            };
        });
        // Process each argument
        result.forEach((value) => {
            // Check if the argument exists or valid
            if (isValidArg(value.name, bmaltaisArguments)) {
                if (getArgumentType(value.name, bmaltaisArguments) === 'CheckBox') {
                    argResult.push({ name: value.name, value: '' });
                }
                else {
                    argResult.push({ name: value.name, value: value.value });
                }
            }
        });
    });
    return argResult;
}
function startInstall$9(stepper) {
    GitInstaller("Kohya's GUI", URL$4, stepper);
}
async function cardInfo$9(api, callback) {
    return CardInfo(URL$4, undefined, api, callback);
}
const KOHYA_GUI_RM = {
    catchAddress: catchAddress$3,
    parseArgsToString: parseArgsToString$a,
    parseStringToArgs: parseStringToArgs$a,
    cardInfo: cardInfo$9,
    manager: { startInstall: startInstall$9, updater: { updateType: 'git' } },
};

const automatic1111Arguments = [
    {
        category: 'Command Line Arguments',
        condition: 'COMMANDLINE_ARGS',
        sections: [
            {
                items: [
                    {
                        defaultValue: false,
                        description: 'Show this help message and exit.',
                        name: '--help',
                        type: 'CheckBox',
                    },
                    {
                        description: 'Terminate after installation',
                        name: '--exit',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: './',
                        description: 'base path where all user data is stored',
                        name: '--data-dir',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'configs/stable-diffusion/v1-inference.yaml',
                        description: 'Path to config which constructs model.',
                        name: '--config',
                        type: 'File',
                    },
                    {
                        defaultValue: 'model.ckpt',
                        description: 'Path to checkpoint of Stable Diffusion model; if specified, this checkpoint will' +
                            ' be added to the list of checkpoints and loaded.',
                        name: '--ckpt',
                        type: 'File',
                    },
                    {
                        description: 'Path to directory with Stable Diffusion checkpoints.',
                        name: '--ckpt-dir',
                        type: 'Directory',
                    },
                    {
                        defaultValue: false,
                        description: "Don't download SD1.5 model even if no model is found.",
                        name: '--no-download-sd-model',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: "do not download CLIP model even if it's not included in the checkpoint",
                        name: '--do-not-download-clip',
                        type: 'CheckBox',
                    },
                    {
                        description: 'Path to Variational Autoencoders model | disables all settings related to VAE.',
                        name: '--vae-dir',
                        type: 'Directory',
                    },
                    {
                        description: 'Checkpoint to use as VAE; setting this argument',
                        name: '--vae-path',
                        type: 'File',
                    },
                    {
                        defaultValue: 'GFPGAN/',
                        description: 'GFPGAN directory.',
                        name: '--gfpgan-dir',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'GFPGAN model file name.',
                        name: '--gfpgan-model',
                        type: 'Input',
                    },
                    {
                        defaultValue: 'models/Codeformer/',
                        description: 'Path to directory with codeformer model file(s).',
                        name: '--codeformer-models-path',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'models/GFPGAN',
                        description: 'Path to directory with GFPGAN model file(s).',
                        name: '--gfpgan-models-path',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'models/ESRGAN',
                        description: 'Path to directory with ESRGAN model file(s).',
                        name: '--esrgan-models-path',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'models/BSRGAN',
                        description: 'Path to directory with BSRGAN model file(s).',
                        name: '--bsrgan-models-path',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'models/RealESRGAN',
                        description: 'Path to directory with RealESRGAN model file(s).',
                        name: '--realesrgan-models-path',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'models/ScuNET',
                        description: 'Path to directory with ScuNET model file(s).',
                        name: '--scunet-models-path',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'models/SwinIR',
                        description: 'Path to directory with SwinIR and SwinIR v2 model file(s).',
                        name: '--swinir-models-path',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'models/LDSR',
                        description: 'Path to directory with LDSR model file(s).',
                        name: '--ldsr-models-path',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'models/DAT',
                        description: 'Path to directory with DAT model file(s).',
                        name: '--dat-models-path',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'models/Lora',
                        description: 'Path to directory with Lora networks.',
                        name: '--lora-dir',
                        type: 'Directory',
                    },
                    {
                        description: 'Path to directory with CLIP model file(s).',
                        name: '--clip-models-path',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'embeddings/',
                        description: 'Embeddings directory for textual inversion (default: embeddings).',
                        name: '--embeddings-dir',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'textual_inversion_templates',
                        description: 'Directory with textual inversion templates.',
                        name: '--textual-inversion-templates-dir',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'models/hypernetworks/',
                        description: 'hypernetwork directory.',
                        name: '--hypernetwork-dir',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'localizations/',
                        description: 'Localizations directory.',
                        name: '--localizations-dir',
                        type: 'Directory',
                    },
                    {
                        defaultValue: 'styles.csv',
                        description: 'Path or wildcard path of styles files, allow multiple entries.',
                        name: '--styles-file',
                        type: 'File',
                    },
                    {
                        defaultValue: 'ui-config.json',
                        description: 'Filename to use for UI configuration.',
                        name: '--ui-config-file',
                        type: 'File',
                    },
                    {
                        defaultValue: false,
                        description: 'Do not hide progress bar in gradio UI (we hide it because it' +
                            ' slows down ML if you have hardware acceleration in browser).',
                        name: '--no-progressbar-hiding',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: 16,
                        description: 'Maximum batch count value for the UI.',
                        name: '--max-batch-count',
                        type: 'Input',
                    },
                    {
                        defaultValue: 'config.json',
                        description: 'Filename to use for UI settings.',
                        name: '--ui-settings-file',
                        type: 'File',
                    },
                    {
                        defaultValue: false,
                        description: 'Allow custom script execution from web UI.',
                        name: '--allow-code',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Use `share=True` for gradio and make the UI accessible through their site.',
                        name: '--share',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Launch gradio with 0.0.0.0 as server name, allowing to respond to network requests.',
                        name: '--listen',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: 7860,
                        description: 'Launch gradio with given server port, you need root/admin rights for ports' +
                            ' < 1024; defaults to 7860 if available.',
                        name: '--port',
                        type: 'Input',
                    },
                    {
                        defaultValue: false,
                        description: 'Hide directory configuration from web UI.',
                        name: '--hide-ui-dir-config',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'disable editing of all settings globally',
                        name: '--freeze-settings',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'disable editing settings in specific sections of the settings page by specifying a' +
                            ' comma-delimited list such like "saving-images,upscaling". The list of setting names' +
                            ' can be found in the modules/shared_options.py file',
                        name: '--freeze-settings-in-sections',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'disable editing of individual settings by specifying a comma-delimited list like' +
                            ' "samples_save,samples_format". The list of setting names can be found in the config.json file',
                        name: '--freeze-specific-settings',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Enable extensions tab regardless of other options.',
                        name: '--enable-insecure-extension-access',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Launch gradio with `--debug` option.',
                        name: '--gradio-debug',
                        type: 'CheckBox',
                    },
                    {
                        description: 'Set gradio authentication like `username:password`; or comma-delimit multiple like `u1:p1,u2:p2,u3:p3`.',
                        name: '--gradio-auth',
                        type: 'Input',
                    },
                    {
                        description: 'Set gradio authentication file path ex. `/path/to/auth/file` same auth format as `--gradio-auth`.',
                        name: '--gradio-auth-path',
                        type: 'File',
                    },
                    {
                        defaultValue: false,
                        description: 'Do not output progress bars to console.',
                        name: '--disable-console-progressbars',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Print prompts to console when generating with txt2img and img2img.',
                        name: '--enable-console-prompts',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Launch web UI with API.',
                        name: '--api',
                        type: 'CheckBox',
                    },
                    {
                        description: 'Set authentication for API like `username:password`; or ' +
                            'comma-delimit multiple like `u1:p1,u2:p2,u3:p3`.',
                        name: '--api-auth',
                        type: 'Input',
                    },
                    {
                        defaultValue: false,
                        description: 'Enable logging of all API requests.',
                        name: '--api-log',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Only launch the API, without the UI.',
                        name: '--nowebui',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: "Don't load model to quickly launch UI.",
                        name: '--ui-debug-mode',
                        type: 'CheckBox',
                    },
                    {
                        description: 'Select the default CUDA device to use (export `CUDA_VISIBLE_DEVICES=0,1` etc might be needed before).',
                        name: '--device-id',
                        type: 'Input',
                    },
                    {
                        defaultValue: false,
                        description: 'Administrator privileges.',
                        name: '--administrator',
                        type: 'CheckBox',
                    },
                    {
                        description: 'Allowed CORS origin(s) in the form of a comma-separated list (no spaces).',
                        name: '--cors-allow-origins',
                        type: 'Input',
                    },
                    {
                        description: 'Allowed CORS origin(s) in the form of a single regular expression.',
                        name: '--cors-allow-origins-regex',
                        type: 'Input',
                    },
                    {
                        description: 'Partially enables TLS, requires `--tls-certfile` to fully function.',
                        name: '--tls-keyfile',
                        type: 'File',
                    },
                    {
                        description: 'Partially enables TLS, requires `--tls-keyfile` to fully function.',
                        name: '--tls-certfile',
                        type: 'File',
                    },
                    {
                        defaultValue: false,
                        description: 'When passed, enables the use of self-signed certificates.',
                        name: '--disable-tls-verify',
                        type: 'CheckBox',
                    },
                    {
                        description: 'Sets hostname of server.',
                        name: '--server-name',
                        type: 'Input',
                    },
                    {
                        defaultValue: false,
                        description: 'Disables gradio queue; causes the webpage to use http requests' +
                            ' instead of websockets; was the default in earlier versions.',
                        name: '--no-gradio-queue',
                        type: 'CheckBox',
                    },
                    {
                        description: "Add path to Gradio's `allowed_paths`; make it possible to serve files from it.",
                        name: '--gradio-allowed-path',
                        type: 'Directory',
                    },
                    {
                        defaultValue: false,
                        description: 'Disable SHA-256 hashing of checkpoints to help loading performance.',
                        name: '--no-hashing',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Do not check versions of torch and xformers.',
                        name: '--skip-version-check',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Do not check versions of Python.',
                        name: '--skip-python-version-check',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Do not check if CUDA is able to work properly.',
                        name: '--skip-torch-cuda-test',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Skip installation of packages.',
                        name: '--skip-install',
                        type: 'CheckBox',
                    },
                    {
                        description: 'log level; one of: CRITICAL, ERROR, WARNING, INFO, DEBUG',
                        name: '--loglevel',
                        type: 'DropDown',
                        values: ['CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG'],
                    },
                    {
                        defaultValue: false,
                        description: "launch.py argument: print a detailed log of what's happening at startup",
                        name: '--log-startup',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'enable server stop/restart/kill via api',
                        name: '--api-server-stop',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: 30,
                        description: 'set timeout_keep_alive for uvicorn',
                        name: '--timeout-keep-alive',
                        type: 'Input',
                    },
                ],
                section: 'Configuration',
            },
            {
                items: [
                    {
                        defaultValue: false,
                        description: 'Enable xformers for cross attention layers.',
                        name: '--xformers',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Enable xformers for cross attention layers regardless of whether the' +
                            ' checking code thinks you can run it; ***do not make bug reports if' +
                            ' this fails to work***.',
                        name: '--force-enable-xformers',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Enable xformers with Flash Attention to improve reproducibility (supported for SD2.x or variant only).',
                        name: '--xformers-flash-attention',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Enable scaled dot product cross-attention layer optimization; requires PyTorch 2.*',
                        name: '--opt-sdp-attention',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Enable scaled dot product cross-attention layer optimization without memory' +
                            ' efficient attention, makes image generation deterministic; requires PyTorch 2.*',
                        name: '--opt-sdp-no-mem-attention',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: "Force-enables Doggettx's cross-attention layer optimization. By default," +
                            " it's on for CUDA-enabled systems.",
                        name: '--opt-split-attention',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: "Force-enables InvokeAI's cross-attention layer optimization. By default," +
                            " it's on when CUDA is unavailable.",
                        name: '--opt-split-attention-invokeai',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Enable older version of split attention optimization that does not consume all VRAM available.',
                        name: '--opt-split-attention-v1',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Enable memory efficient sub-quadratic cross-attention layer optimization.',
                        name: '--opt-sub-quad-attention',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: 1024,
                        description: 'Query chunk size for the sub-quadratic cross-attention layer optimization to use.',
                        name: '--sub-quad-q-chunk-size',
                        type: 'Input',
                    },
                    {
                        description: 'KV chunk size for the sub-quadratic cross-attention layer optimization to use.',
                        name: '--sub-quad-kv-chunk-size',
                        type: 'Input',
                    },
                    {
                        description: 'The percentage of VRAM threshold for the sub-quadratic cross-attention' +
                            ' layer optimization to use chunking.',
                        name: '--sub-quad-chunk-threshold',
                        type: 'Input',
                    },
                    {
                        defaultValue: false,
                        description: 'Enable alternative layout for 4d tensors, may result in faster inference' +
                            ' **only** on Nvidia cards with Tensor cores (16xx and higher).',
                        name: '--opt-channelslast',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Force-disables cross-attention layer optimization.',
                        name: '--disable-opt-split-attention',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Do not check if produced images/latent spaces have nans; useful for running without a checkpoint in CI.',
                        name: '--disable-nan-check',
                        type: 'CheckBox',
                    },
                    {
                        description: 'Use CPU as torch device for specified modules.',
                        name: '--use-cpu',
                        type: 'DropDown',
                        values: ['all', 'sd', 'interrogate', 'gfpgan', 'bsrgan', 'esrgan', 'scunet', 'codeformer'],
                    },
                    {
                        defaultValue: false,
                        description: 'Use Intel XPU as torch device',
                        name: '--use-ipex',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Do not switch the model to 16-bit floats.',
                        name: '--no-half',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: 'autocast',
                        description: 'Evaluate at this precision.',
                        name: '--precision',
                        type: 'DropDown',
                        values: ['full', 'autocast'],
                    },
                    {
                        defaultValue: false,
                        description: 'Do not switch the VAE model to 16-bit floats.',
                        name: '--no-half-vae',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Upcast sampling. No effect with `--no-half`. Usually produces similar results' +
                            ' to `--no-half` with better performance while using less memory.',
                        name: '--upcast-sampling',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Enable Stable Diffusion model optimizations for sacrificing a some performance for low VRAM usage.',
                        name: '--medvram',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'enable `--medvram` optimization just for SDXL models',
                        name: '--medvram-sdxl',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Enable Stable Diffusion model optimizations for sacrificing a lot of speed for very low VRAM usage.',
                        name: '--lowvram',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Load Stable Diffusion checkpoint weights to VRAM instead of RAM.',
                        name: '--lowram',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'disable an optimization that reduces RAM use when loading a model',
                        name: '--disable-model-loading-ram-optimization',
                        type: 'CheckBox',
                    },
                ],
                section: 'Performance',
            },
            {
                items: [
                    {
                        defaultValue: false,
                        description: "Open the web UI URL in the system's default browser upon launch.",
                        name: '--autolaunch',
                        type: 'CheckBox',
                    },
                    {
                        description: 'Open the web UI with the specified theme (`light` or `dark`). If not specified,' +
                            ' uses the default browser theme.',
                        name: '--theme',
                        type: 'DropDown',
                    },
                    {
                        defaultValue: false,
                        description: 'Use textbox for seeds in UI (no up/down, but possible to input long seeds).',
                        name: '--use-textbox-seed',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Disable checking PyTorch models for malicious code.',
                        name: '--disable-safe-unpickle',
                        type: 'CheckBox',
                    },
                    {
                        description: 'ngrok authtoken, alternative to gradio `--share`.',
                        name: '--ngrok',
                        type: 'Input',
                    },
                    {
                        defaultValue: 'us',
                        description: 'The region in which ngrok should start.',
                        name: '--ngrok-region',
                        type: 'Input',
                    },
                    {
                        description: 'The options to pass to ngrok in JSON format, e.g.: `{"authtoken_from_env":true,' +
                            ' "basic_auth":"user:password", "oauth_provider":"google", "oauth_allow_emails":"user@asdf.com"}`',
                        name: '--ngrok-options',
                        type: 'Input',
                    },
                    {
                        description: 'On startup, notifies whether or not your web UI version (commit) is up-to-date' +
                            ' with the current master branch.',
                        name: '--update-check',
                        type: 'CheckBox',
                    },
                    {
                        description: 'On startup, it pulls the latest updates for all extensions you have installed.',
                        name: '--update-all-extensions',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Force-reinstall xformers. Useful for upgrading - but remove it after upgrading' +
                            " or you'll reinstall xformers perpetually.",
                        name: '--reinstall-xformers',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Force-reinstall torch. Useful for upgrading - but remove it after upgrading' +
                            " or you'll reinstall torch perpetually.",
                        name: '--reinstall-torch',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Run test to validate web UI functionality, see wiki topic for more details.',
                        name: '--tests',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'Do not run tests even if `--tests` option is specified.',
                        name: '--no-tests',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'launch.py argument: dump limited sysinfo file (without information' +
                            ' about extensions, options) to disk and quit',
                        name: '--dump-sysinfo',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'disable all non-built-in extensions from running',
                        name: '--disable-all-extensions',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'disable all extensions from running',
                        name: '--disable-extra-extensions',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: 'if load a model at web start, only take effect when --nowebui',
                        name: '--skip-load-model-at-start',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: false,
                        description: "allow any symbols except '/' in filenames. May conflict with your browser and file system",
                        name: '--unix-filenames-sanitization',
                        type: 'CheckBox',
                    },
                    {
                        defaultValue: 128,
                        description: 'maximal length of filenames of saved images, longer filenames will be truncated.' +
                            ' if overridden it can potentially cause issues with the file system',
                        name: '--filenames-max-length',
                        type: 'Input',
                    },
                    {
                        defaultValue: false,
                        description: 'disable read prompt from last generation feature; disables `--data-path/params.txt`',
                        name: '--no-prompt-history',
                        type: 'CheckBox',
                    },
                ],
                section: 'Features',
            },
        ],
    },
];
const winEV = {
    category: 'Environment Variables',
    items: [
        {
            description: 'Sets a custom path for Python executable.',
            name: 'PYTHON',
            type: 'File',
        },
        {
            description: 'Specifies the path for the virtual environment. Default is venv.' +
                ' Special value - runs the script without creating virtual environment.',
            name: 'VENV_DIR',
            type: 'Directory',
        },
        {
            description: 'Additional commandline arguments for the main program.',
            name: 'COMMANDLINE_ARGS',
            type: 'CheckBox',
        },
        {
            description: 'Set to anything to make the program not exit with an error' +
                ' if an unexpected commandline argument is encountered.',
            name: 'IGNORE_CMD_ARGS_ERRORS',
            type: 'CheckBox',
        },
        {
            description: 'Name of requirements.txt file with dependencies that will be' +
                ' installed when launch.py is run. Defaults to requirements_versions.txt.',
            name: 'REQS_FILE',
            type: 'Input',
        },
        {
            description: 'Command for installing PyTorch.',
            name: 'TORCH_COMMAND',
            type: 'Input',
        },
        {
            description: '`--index-url` parameter for pip.',
            name: 'INDEX_URL',
            type: 'Input',
        },
        {
            description: 'Path to where transformers library will download and keep its files related to the CLIP model.',
            name: 'TRANSFORMERS_CACHE',
            type: 'Directory',
        },
        {
            description: 'Select GPU to use for your instance on a system with multiple GPUs. For example, if you' +
                ' want to use secondary GPU, put "1".\n(add a new line to webui-user.bat not in' +
                ' COMMANDLINE_ARGS): `set CUDA_VISIBLE_DEVICES=0`\nAlternatively, just use `--device-id`' +
                ' flag in `COMMANDLINE_ARGS`.',
            name: 'CUDA_VISIBLE_DEVICES',
            type: 'Input',
        },
        {
            description: "Log verbosity. Supports any valid logging level supported by Python's built-in" +
                ' `logging` module. Defaults to `INFO` if not set.',
            name: 'SD_WEBUI_LOG_LEVEL',
            type: 'Input',
        },
        {
            description: 'Cache file path. Defaults to `cache.json` in the root directory if not set.',
            name: 'SD_WEBUI_CACHE_FILE',
            type: 'File',
        },
        {
            description: 'A value set by `launcher script` (like webui.bat webui.sh) informing Webui that' +
                ' restart function is available',
            name: 'SD_WEBUI_RESTAR',
            type: 'CheckBox',
        },
        {
            description: 'A internal value signifying if webui is currently restarting or reloading, used for disabling' +
                ' certain actions asuch as auto launching browser.\nset to `1` disables auto launching browser\n' +
                'set to `0` enables auto launch even when restarting\nCertain extensions might use this value' +
                ' for similar purpose.',
            name: 'SD_WEBUI_RESTARTING',
            type: 'CheckBox',
        },
    ],
};
const linEV = {
    category: 'Environment',
    sections: [
        {
            section: 'Variables',
            items: [
                {
                    description: 'Install directory without trailing slash',
                    name: 'install_dir',
                    type: 'Input',
                    defaultValue: '/home/$(whoami)',
                },
                {
                    description: 'Name of the subdirectory',
                    name: 'clone_dir',
                    type: 'Input',
                    defaultValue: 'stable-diffusion-webui',
                },
                {
                    description: 'python3 executable',
                    name: 'python_cmd',
                    type: 'Input',
                    defaultValue: 'python3',
                },
                {
                    description: 'python3 venv without trailing slash (defaults to ${install_dir}/${clone_dir}/venv)',
                    name: 'venv_dir',
                    type: 'Input',
                    defaultValue: 'venv',
                },
            ],
        },
        {
            section: 'Arguments',
            items: [
                {
                    description: 'Commandline arguments for webui.py',
                    name: 'COMMANDLINE_ARGS',
                    type: 'CheckBox',
                },
                {
                    description: 'Script to launch to start the app',
                    name: 'LAUNCH_SCRIPT',
                    type: 'Input',
                    defaultValue: 'launch.py',
                },
                {
                    description: 'Install command for torch',
                    name: 'TORCH_COMMAND',
                    type: 'Input',
                    defaultValue: 'pip install torch==1.12.1+cu113 --extra-index-url https://download.pytorch.org/whl/cu113',
                },
                {
                    description: 'Requirements file to use for stable-diffusion-webui',
                    name: 'REQS_FILE',
                    type: 'Input',
                    defaultValue: 'requirements_versions.txt',
                },
                {
                    description: 'Fixed git repo for K_DIFFUSION_PACKAGE',
                    name: 'K_DIFFUSION_PACKAGE',
                    type: 'Input',
                    defaultValue: '',
                },
                {
                    description: 'Fixed git repo for GFPGAN_PACKAGE',
                    name: 'GFPGAN_PACKAGE',
                    type: 'Input',
                    defaultValue: '',
                },
                {
                    description: 'Fixed git commit for Stable Diffusion',
                    name: 'STABLE_DIFFUSION_COMMIT_HASH',
                    type: 'Input',
                    defaultValue: '',
                },
                {
                    description: 'Fixed git commit for CodeFormer',
                    name: 'CODEFORMER_COMMIT_HASH',
                    type: 'Input',
                    defaultValue: '',
                },
                {
                    description: 'Fixed git commit for BLIP',
                    name: 'BLIP_COMMIT_HASH',
                    type: 'Input',
                    defaultValue: '',
                },
                {
                    description: 'Enable accelerated launch',
                    name: 'ACCELERATE',
                    type: 'CheckBox',
                    defaultValue: false,
                },
                {
                    description: 'Disable TCMalloc',
                    name: 'NO_TCMALLOC',
                    type: 'CheckBox',
                    defaultValue: false,
                },
            ],
        },
    ],
};
automatic1111Arguments.unshift(isWin ? winEV : linEV);

async function fetchExtensionList$2() {
    try {
        const response = await fetch('https://raw.githubusercontent.com/AUTOMATIC1111/stable-diffusion-webui-extensions/master/index.json');
        const extensions = await response.json();
        return extensions.extensions.map((extension) => ({
            title: extension.name,
            description: extension.description,
            url: extension.url,
            stars: extension.stars,
        }));
    }
    catch (e) {
        console.error(e);
        return [];
    }
}
function getTypeByCategoryName$1(category) {
    switch (category) {
        case 'Command Line Arguments':
            return 'cl';
        case 'Environment':
        case 'Environment Variables':
            return 'env';
        default:
            return undefined;
    }
}
function getCategoryType$1(name) {
    if (!name)
        return undefined;
    for (const argument of automatic1111Arguments) {
        if ('sections' in argument) {
            for (const section of argument.sections) {
                if (section.items.some(item => item.name === name)) {
                    if (section.section === 'Variables')
                        return 'envVar';
                    return getTypeByCategoryName$1(argument.category);
                }
            }
        }
        else {
            if (argument.items.some(item => item.name === name)) {
                return getTypeByCategoryName$1(argument.category);
            }
        }
    }
    return undefined;
}
function parseArgsToString$9(args) {
    let result = isWin ? '@echo off\n\n' : '#!/bin/bash\n\n';
    let clResult = '';
    args.forEach(arg => {
        const cat = getCategoryType$1(arg.name);
        if (cat !== 'cl') {
            const eWinResult = `set ${arg.name}=${arg.value}\n`;
            const eResult = cat === 'env' ? `export ${arg.name}="${arg.value}"\n` : `${arg.name}="${arg.value}"\n`;
            if (arg.name !== 'COMMANDLINE_ARGS')
                result += isWin ? eWinResult : eResult;
        }
        else if (cat === 'cl') {
            const argType = getArgumentType(arg.name, automatic1111Arguments);
            if (argType === 'CheckBox') {
                clResult += `${arg.name} `;
            }
            else if (argType === 'File' || argType === 'Directory') {
                clResult += isWin ? `${arg.name} "${arg.value}" ` : `${arg.name} ${arg.value} `;
            }
            else {
                clResult += `${arg.name} ${arg.value} `;
            }
        }
    });
    if (!lodashExports.isEmpty(clResult))
        result += isWin ? `set COMMANDLINE_ARGS=${clResult}\n` : `export COMMANDLINE_ARGS=${clResult}\n`;
    result += isWin ? `\ncall webui.bat` : ``;
    return result;
}
function checkLinuxArgLine$4(line) {
    if (isWin && line.startsWith('set '))
        return 'set';
    if (line.startsWith('export '))
        return 'export';
    for (const arg of automatic1111Arguments) {
        if (arg.category === 'Environment') {
            if (arg.sections[0].items.find(item => item.name === line.split('=')[0])) {
                return 'var';
            }
            else {
                return undefined;
            }
        }
    }
    return undefined;
}
function parseStringToArgs$9(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (line.startsWith('#')) {
            return;
        }
        else if (line.startsWith(`${isWin ? 'set' : 'export'} COMMANDLINE_ARGS=`)) {
            argResult.push({ name: 'COMMANDLINE_ARGS', value: '' });
            // Extract the command line arguments and clear falsy values
            const clArgs = line.split('=')[1];
            if (!clArgs)
                return;
            const args = clArgs.split('--').filter(Boolean);
            // Map each argument to an object with id and value
            const result = args.map((arg) => {
                const [id, ...value] = arg.trim().split(' ');
                return {
                    name: `--${id}`,
                    value: value.join(' ').replace(/"/g, ''),
                };
            });
            // Process each argument
            result.forEach((value) => {
                // Check if the argument exists or valid
                if (isValidArg(value.name, automatic1111Arguments)) {
                    if (getArgumentType(value.name, automatic1111Arguments) === 'CheckBox') {
                        argResult.push({ name: value.name, value: '' });
                    }
                    else {
                        argResult.push({ name: value.name, value: value.value });
                    }
                }
            });
        }
        else {
            const lineType = checkLinuxArgLine$4(line);
            if (lineType === 'export' || lineType === 'set') {
                // If line starts with 'set ' or 'export ', extract the environment variable id and value
                let [name, value] = line.replace(`${lineType} `, '').split('=');
                name = removeEscapes(name.trim());
                value = removeEscapes(value.trim());
                if (isValidArg(name, automatic1111Arguments)) {
                    argResult.push({ name, value });
                }
            }
            else if (checkLinuxArgLine$4(line) === 'var') {
                let [name, value] = line.split('=');
                name = removeEscapes(name.trim());
                value = removeEscapes(value.trim());
                if (isValidArg(name, automatic1111Arguments)) {
                    argResult.push({ name, value });
                }
            }
        }
    });
    return argResult;
}

const lshqqytigerArguments = lodashExports.cloneDeep(automatic1111Arguments);
const lsSpecifArgs = [
    {
        description: 'Skip installation of onnxruntime; ONNX and Olive will be unavailable',
        name: '--skip-ort',
        type: 'CheckBox',
    },
    {
        description: 'use torch built with cpu',
        name: '--use-cpu-torch',
        type: 'CheckBox',
    },
    {
        description: 'use DirectML device as torch device',
        name: '--use-directml',
        type: 'CheckBox',
    },
    {
        description: 'use ZLUDA device as torch device',
        name: '--use-zluda',
        type: 'CheckBox',
    },
    {
        description: 'override torch version',
        name: '--override-torch',
        type: 'Input',
    },
];
const newSection = {
    section: 'AmdGPU',
    items: lsSpecifArgs,
};
const commandLineArgsIndex = lshqqytigerArguments.findIndex(arg => arg.category === 'Command Line Arguments');
if (commandLineArgsIndex !== -1 && lshqqytigerArguments[commandLineArgsIndex].sections) {
    lshqqytigerArguments[commandLineArgsIndex].sections.unshift(newSection);
}

const SdAMD_URL = 'https://github.com/lshqqytiger/stable-diffusion-webui-amdgpu';
function startInstall$8(stepper) {
    GitInstaller('Stable Diffusion AMDGPU', SdAMD_URL, stepper);
}
async function cardInfo$8(api, callback) {
    return CardInfo(SdAMD_URL, '/extensions', api, callback);
}
function getTypeByCategoryName(category) {
    switch (category) {
        case 'Command Line Arguments':
            return 'cl';
        case 'Environment':
        case 'Environment Variables':
            return 'env';
        default:
            return undefined;
    }
}
function getCategoryType(name) {
    if (!name)
        return undefined;
    for (const argument of lshqqytigerArguments) {
        if ('sections' in argument) {
            for (const section of argument.sections) {
                if (section.items.some(item => item.name === name)) {
                    if (section.section === 'Variables')
                        return 'envVar';
                    return getTypeByCategoryName(argument.category);
                }
            }
        }
        else {
            if (argument.items.some(item => item.name === name)) {
                return getTypeByCategoryName(argument.category);
            }
        }
    }
    return undefined;
}
function parseArgsToString$8(args) {
    let result = isWin ? '@echo off\n\n' : '#!/bin/bash\n\n';
    let clResult = '';
    args.forEach(arg => {
        const cat = getCategoryType(arg.name);
        if (cat !== 'cl') {
            const eWinResult = `set ${arg.name}=${arg.value}\n`;
            const eResult = cat === 'env' ? `export ${arg.name}="${arg.value}"\n` : `${arg.name}="${arg.value}"\n`;
            if (arg.name !== 'COMMANDLINE_ARGS')
                result += isWin ? eWinResult : eResult;
        }
        else if (cat === 'cl') {
            const argType = getArgumentType(arg.name, lshqqytigerArguments);
            if (argType === 'CheckBox') {
                clResult += `${arg.name} `;
            }
            else if (argType === 'File' || argType === 'Directory') {
                clResult += isWin ? `${arg.name} "${arg.value}" ` : `${arg.name} ${arg.value} `;
            }
            else {
                clResult += `${arg.name} ${arg.value} `;
            }
        }
    });
    if (!lodashExports.isEmpty(clResult))
        result += isWin ? `set COMMANDLINE_ARGS=${clResult}\n` : `export COMMANDLINE_ARGS=${clResult}\n`;
    result += isWin ? `\ncall webui.bat` : ``;
    return result;
}
function checkLinuxArgLine$3(line) {
    if (isWin && line.startsWith('set '))
        return 'set';
    if (line.startsWith('export '))
        return 'export';
    for (const arg of lshqqytigerArguments) {
        if (arg.category === 'Environment') {
            if (arg.sections[0].items.find(item => item.name === line.split('=')[0])) {
                return 'var';
            }
            else {
                return undefined;
            }
        }
    }
    return undefined;
}
function parseStringToArgs$8(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (line.startsWith('#')) {
            return;
        }
        else if (line.startsWith(`${isWin ? 'set' : 'export'} COMMANDLINE_ARGS=`)) {
            argResult.push({ name: 'COMMANDLINE_ARGS', value: '' });
            // Extract the command line arguments and clear falsy values
            const clArgs = line.split('=')[1];
            if (!clArgs)
                return;
            const args = clArgs.split('--').filter(Boolean);
            // Map each argument to an object with id and value
            const result = args.map((arg) => {
                const [id, ...value] = arg.trim().split(' ');
                return {
                    name: `--${id}`,
                    value: value.join(' ').replace(/"/g, ''),
                };
            });
            // Process each argument
            result.forEach((value) => {
                // Check if the argument exists or valid
                if (isValidArg(value.name, lshqqytigerArguments)) {
                    if (getArgumentType(value.name, lshqqytigerArguments) === 'CheckBox') {
                        argResult.push({ name: value.name, value: '' });
                    }
                    else {
                        argResult.push({ name: value.name, value: value.value });
                    }
                }
            });
        }
        else {
            const lineType = checkLinuxArgLine$3(line);
            if (lineType === 'export' || lineType === 'set') {
                // If line starts with 'set ' or 'export ', extract the environment variable id and value
                let [name, value] = line.replace(`${lineType} `, '').split('=');
                name = removeEscapes(name.trim());
                value = removeEscapes(value.trim());
                if (isValidArg(name, lshqqytigerArguments)) {
                    argResult.push({ name, value });
                }
            }
            else if (checkLinuxArgLine$3(line) === 'var') {
                let [name, value] = line.split('=');
                name = removeEscapes(name.trim());
                value = removeEscapes(value.trim());
                if (isValidArg(name, lshqqytigerArguments)) {
                    argResult.push({ name, value });
                }
            }
        }
    });
    return argResult;
}
const SD_AMD_RM = {
    catchAddress: catchAddress$3,
    fetchExtensionList: fetchExtensionList$2,
    parseArgsToString: parseArgsToString$8,
    parseStringToArgs: parseStringToArgs$8,
    cardInfo: cardInfo$8,
    manager: { startInstall: startInstall$8, updater: { updateType: 'git' } },
};

const vladmandicArguments = [
    {
        category: 'Environment Variables',
        items: [
            {
                description: 'Sets a custom path for Python executable.',
                name: 'PYTHON',
                type: 'File',
            },
            {
                description: 'Specifies the path for the virtual environment. Default is venv.' +
                    ' Special value - runs the script without creating virtual environment.',
                name: 'VENV_DIR',
                type: 'Directory',
            },
        ],
    },
    {
        category: 'Command Line Arguments',
        sections: [
            {
                section: 'Configuration',
                items: [
                    {
                        name: '--config',
                        description: 'Use specific server configuration file, default: config.json',
                        type: 'File',
                    },
                    {
                        name: '--ui-config',
                        description: 'Use specific UI configuration file, default: ui-config.json',
                        type: 'File',
                    },
                    {
                        name: '--medvram',
                        description: 'Split model stages and keep only active part in VRAM',
                        type: 'CheckBox',
                    },
                    {
                        name: '--lowvram',
                        description: 'Split model components and keep only active part in VRAM',
                        type: 'CheckBox',
                    },
                    {
                        name: '--freeze',
                        description: 'Disable editing settings',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Compute Engine',
                items: [
                    {
                        name: '--device-id',
                        description: 'Select the default CUDA device to use',
                        type: 'Input',
                    },
                    {
                        name: '--use-directml',
                        description: 'Use DirectML if no compatible GPU is detected',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-zluda',
                        description: 'Force use ZLUDA, AMD GPUs only',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-openvino',
                        description: 'Use Intel OpenVINO backend',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-ipex',
                        description: 'Force use Intel OneAPI XPU backend',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-cuda',
                        description: 'Force use nVidia CUDA backend',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use-rocm',
                        description: 'Force use AMD ROCm backend',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Paths',
                items: [
                    {
                        name: '--ckpt',
                        description: 'Path to model checkpoint to load immediately',
                        type: 'File',
                    },
                    {
                        name: '--data-dir',
                        description: 'Base path where all user data is stored',
                        type: 'Directory',
                    },
                    {
                        name: '--models-dir',
                        description: 'Base path where all models are stored',
                        type: 'Directory',
                    },
                    {
                        name: '--extensions-dir',
                        description: 'Base path where all extensions are stored',
                        type: 'Directory',
                    },
                    {
                        name: '--allowed-paths',
                        description: 'Add additional paths to paths allowed for web access',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Diagnostics',
                items: [
                    {
                        name: '--no-hashing',
                        description: 'Disable hashing of checkpoints',
                        type: 'CheckBox',
                    },
                    {
                        name: '--no-metadata',
                        description: 'Disable reading of metadata from models',
                        type: 'CheckBox',
                    },
                    {
                        name: '--profile',
                        description: 'Run profiler',
                        type: 'CheckBox',
                    },
                    {
                        name: '--monitor',
                        description: 'Run memory monitor',
                        type: 'Input',
                        defaultValue: 0,
                    },
                    {
                        name: '--status',
                        description: 'Run server is-alive status',
                        type: 'Input',
                        defaultValue: 120,
                    },
                    {
                        name: '--experimental',
                        description: 'Allow unsupported versions of libraries',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'HTTP Server',
                items: [
                    {
                        name: '--listen',
                        description: 'Launch web server using public IP address',
                        type: 'CheckBox',
                    },
                    {
                        name: '--port',
                        description: 'Launch web server with given server port',
                        type: 'Input',
                        defaultValue: 7860,
                    },
                    {
                        name: '--share',
                        description: 'Enable UI accessible through Gradio site',
                        type: 'CheckBox',
                    },
                    {
                        name: '--autolaunch',
                        description: "Open the UI URL in the system's default browser upon launch",
                        type: 'CheckBox',
                    },
                    {
                        name: '--subpath',
                        description: 'Customize the URL subpath for usage with reverse proxy',
                        type: 'Input',
                    },
                    {
                        name: '--theme',
                        description: 'Override UI theme',
                        type: 'Input',
                    },
                    {
                        name: '--locale',
                        description: 'Override UI locale',
                        type: 'Input',
                    },
                    {
                        name: '--server-name',
                        description: 'Sets hostname of server',
                        type: 'Input',
                    },
                    {
                        name: '--insecure',
                        description: 'Enable extensions tab regardless of other options',
                        type: 'CheckBox',
                    },
                    {
                        name: '--auth',
                        description: 'Set access authentication like "user:pwd,user:pwd"',
                        type: 'Input',
                    },
                    {
                        name: '--auth-file',
                        description: 'Set access authentication using file',
                        type: 'File',
                    },
                    {
                        name: '--docs',
                        description: 'Mount API docs',
                        type: 'CheckBox',
                    },
                    {
                        name: '--cors-origins',
                        description: 'Allowed CORS origins as comma-separated list',
                        type: 'Input',
                    },
                    {
                        name: '--cors-regex',
                        description: 'Allowed CORS origins as regular expression',
                        type: 'Input',
                    },
                    {
                        name: '--tls-keyfile',
                        description: 'Enable TLS and specify key file',
                        type: 'File',
                    },
                    {
                        name: '--tls-certfile',
                        description: 'Enable TLS and specify cert file',
                        type: 'File',
                    },
                    {
                        name: '--tls-selfsign',
                        description: 'Enable TLS with self-signed certificates',
                        type: 'CheckBox',
                    },
                ],
            },
        ],
    },
];

const shellCommand$4 = isWin ? 'call webui.bat' : 'bash ./webui.sh';
const URL$3 = 'https://github.com/vladmandic/sdnext';
function parseArgsToString$7(args) {
    let result = isWin ? '@echo off\n\n' : '#!/bin/bash\n\n';
    let argResult = '';
    args.forEach(arg => {
        const argType = getArgumentType(arg.name, vladmandicArguments);
        if (argType === 'CheckBox') {
            argResult += `${arg.name} `;
        }
        else if (argType === 'File' || argType === 'Directory') {
            argResult += `${arg.name} "${arg.value}" `;
        }
        else {
            argResult += `${arg.name} ${arg.value} `;
        }
    });
    result += lodashExports.isEmpty(argResult) ? shellCommand$4 : `${shellCommand$4} ${argResult}`;
    return result;
}
function parseStringToArgs$7(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (!line.startsWith(shellCommand$4))
            return;
        // Extract the command line arguments and clear falsy values
        const clArgs = line.split(`${shellCommand$4} `)[1];
        if (!clArgs)
            return;
        const args = clArgs.split('--').filter(Boolean);
        // Map each argument to an object with id and value
        const result = args.map((arg) => {
            const [id, ...value] = arg.trim().split(' ');
            return {
                name: `--${id}`,
                value: value.join(' ').replace(/"/g, ''),
            };
        });
        // Process each argument
        result.forEach((value) => {
            // Check if the argument exists or valid
            if (isValidArg(value.name, vladmandicArguments)) {
                if (getArgumentType(value.name, vladmandicArguments) === 'CheckBox') {
                    argResult.push({ name: value.name, value: '' });
                }
                else {
                    argResult.push({ name: value.name, value: value.value });
                }
            }
        });
    });
    return argResult;
}
function startInstall$7(stepper) {
    GitInstaller('SD Next', URL$3, stepper);
}
async function cardInfo$7(api, callback) {
    return CardInfo(URL$3, '/extensions', api, callback);
}
const SD_NEXT_RM = {
    catchAddress: catchAddress$3,
    fetchExtensionList: fetchExtensionList$2,
    parseArgsToString: parseArgsToString$7,
    parseStringToArgs: parseStringToArgs$7,
    cardInfo: cardInfo$7,
    manager: { startInstall: startInstall$7, updater: { updateType: 'git' } },
};

const mcMonkeyArguments = [
    {
        category: 'Command Line Arguments',
        items: [
            {
                name: '--data_dir',
                description: 'Override the default data directory.',
                type: 'Directory',
                defaultValue: 'Data',
            },
            {
                name: '--settings_file',
                description: 'If your settings file is anywhere other than the default, you must specify as a command line arg.',
                type: 'File',
                defaultValue: 'Data/Settings.fds',
            },
            {
                name: '--backends_file',
                description: 'If your backends file is anywhere other than the default, you must specify as a command line arg.',
                type: 'File',
                defaultValue: 'Data/Backends.fds',
            },
            {
                name: '--environment',
                description: 'Can be `development` or `production` to set what ASP.NET Web Environment to use. `Development`' +
                    ' gives detailed debug logs and errors, while `Production` is optimized for normal usage.',
                type: 'DropDown',
                defaultValue: 'Production',
                values: ['development', 'production'],
            },
            {
                name: '--host',
                description: "Can be used to override the 'Network.Host' server setting.",
                type: 'Input',
                defaultValue: 'localhost',
            },
            {
                name: '--port',
                description: "Can be used to override the 'Network.Port' server setting.",
                type: 'Input',
                defaultValue: '7801',
            },
            {
                name: '--asp_loglevel',
                description: 'Sets the minimum log level for ASP.NET web logger, as any of: `Trace`, `Debug`, `Information`,' +
                    " `Warning`, `Error`, `Critical`, `None`. Note 'information' here spams debug output.",
                type: 'DropDown',
                defaultValue: 'warning',
                values: ['Trace', 'Debug', 'Information', 'Warning', 'Error', 'Critical', 'None'],
            },
            {
                name: '--loglevel',
                description: 'Minimum SwarmUI log level, as any of: `Debug`, `Info`, `Init`, `Warning`, `Error`,' +
                    " `None`. 'Info' here is the normal usage data.",
                type: 'DropDown',
                defaultValue: 'Info',
                values: ['Debug', 'Info', 'Init', 'Warning', 'Error', 'None'],
            },
            {
                name: '--user_id',
                description: "Set the local user's default UserID (for running in single-user mode, not useful in shared mode).",
                type: 'Input',
                defaultValue: 'local',
            },
            {
                name: '--lock_settings',
                description: 'If enabled, blocks in-UI editing of server settings by admins. Settings cannot be modified ' +
                    'in this mode without editing the settings file and restarting the server.',
                type: 'CheckBox',
            },
            {
                name: '--ngrok-path',
                description: 'If specified, will be used as the path to an `ngrok` executable, and will automatically ' +
                    'load and configure ngrok when launching, to share your UI instance on a publicly accessible URL.',
                type: 'File',
            },
            {
                name: '--cloudflared-path',
                description: 'If specified, will be used as the path to an `cloudflared` executable, and will automatically' +
                    ' load and configure TryCloudflare when launching, to share your UI instance on a publicly accessible URL.',
                type: 'File',
            },
            {
                name: '--proxy-region',
                description: 'If specified, sets the proxy (ngrok/cloudflared) region. If unspecified, defaults to closest.',
                type: 'Input',
            },
            {
                name: '--proxy-added-args',
                description: 'If specified, adds additional args to the proxy launch. Use a `.` as the first symbol (parser hackaround).' +
                    ' For example, `--proxy-added-args ".--my-arg --arg -argy arg"`',
                type: 'Input',
            },
            {
                name: '--ngrok-basic-auth',
                description: 'If specified, sets an ngrok basic-auth requirement to access.',
                type: 'Input',
            },
            {
                name: '--launch_mode',
                description: "Can be used to override the 'LaunchMode' server setting.",
                type: 'Input',
                defaultValue: 'none',
            },
            {
                name: '--help',
                description: 'Displays an in-CLI shortlist of CLI args and some usage hints.',
                type: 'CheckBox',
            },
        ],
    },
];

const shellCommand$3 = isWin ? 'call launch-windows.bat' : 'bash ./launch-linux.sh';
const URL$2 = 'https://github.com/mcmonkeyprojects/SwarmUI';
function parseArgsToString$6(args) {
    let result = isWin ? '@echo off\n\n' : '#!/bin/bash\n\n';
    let argResult = '';
    args.forEach(arg => {
        const argType = getArgumentType(arg.name, mcMonkeyArguments);
        if (argType === 'CheckBox') {
            argResult += `${arg.name} `;
        }
        else if (argType === 'File' || argType === 'Directory') {
            argResult += `${arg.name} "${arg.value}" `;
        }
        else {
            argResult += `${arg.name} ${arg.value} `;
        }
    });
    result += lodashExports.isEmpty(argResult) ? shellCommand$3 : `${shellCommand$3} ${argResult}`;
    return result;
}
function parseStringToArgs$6(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (!line.startsWith(shellCommand$3))
            return;
        // Extract the command line arguments and clear falsy values
        const clArgs = line.split(`${shellCommand$3} `)[1];
        if (!clArgs)
            return;
        const args = clArgs.split('--').filter(Boolean);
        // Map each argument to an object with id and value
        const result = args.map((arg) => {
            const [id, ...value] = arg.trim().split(' ');
            return {
                name: `--${id}`,
                value: value.join(' ').replace(/"/g, ''),
            };
        });
        // Process each argument
        result.forEach((value) => {
            // Check if the argument exists or valid
            if (isValidArg(value.name, mcMonkeyArguments)) {
                if (getArgumentType(value.name, mcMonkeyArguments) === 'CheckBox') {
                    argResult.push({ name: value.name, value: '' });
                }
                else {
                    argResult.push({ name: value.name, value: value.value });
                }
            }
        });
    });
    return argResult;
}
async function fetchExtensionList$1() {
    return [
        {
            url: 'https://github.com/Quaggles/SwarmUI-FaceTools',
            title: 'SwarmUI-FaceTools',
            description: 'A SwarmUI extension that adds parameters for ReActor and FaceRestoreCF nodes to the the generate tab.',
            stars: 8,
        },
        {
            url: 'https://github.com/mcmonkey4eva/SwarmComfyDeployBackendExt',
            title: 'Swarm ComfyDeploy Backend Extension',
            description: 'An extension for SwarmUI to use ComfyDeploy as a backend.',
            stars: 1,
        },
        {
            url: 'https://github.com/kalebbroo/SwarmUI-MagicPromptExtension',
            title: 'SwarmUI MagicPrompt Extension',
            description: 'The MagicPrompt Extension provides a simple and intuitive way directly in SwarmUI to generate text' +
                ' prompts for Stable Diffusion images. This uses your local Ollama LLMs.',
            stars: 7,
        },
        {
            url: 'https://github.com/Quaggles/SwarmUI-FaceTools',
            title: 'SwarmUI-FaceTools',
            description: 'A SwarmUI extension that adds parameters for ReActor and FaceRestoreCF nodes to the the generate tab.',
            stars: 8,
        },
    ];
}
function startInstall$6(stepper) {
    GitInstaller('SwarmUI', URL$2, stepper);
}
async function cardInfo$6(api, callback) {
    return CardInfo(URL$2, '/src/Extensions', api, callback);
}
const SWARM_RM = {
    catchAddress: catchAddress$3,
    fetchExtensionList: fetchExtensionList$1,
    parseArgsToString: parseArgsToString$6,
    parseStringToArgs: parseStringToArgs$6,
    cardInfo: cardInfo$6,
    manager: { startInstall: startInstall$6, updater: { updateType: 'git' } },
};

const flowiseArguments = [
    {
        category: 'General',
        sections: [
            {
                section: 'Basic Configuration',
                items: [
                    {
                        name: '--PORT',
                        description: 'The HTTP port Flowise runs on',
                        type: 'Input',
                        defaultValue: 3000,
                    },
                    {
                        name: '--CORS_ORIGINS',
                        description: 'The allowed origins for all cross-origin HTTP calls',
                        type: 'Input',
                    },
                    {
                        name: '--IFRAME_ORIGINS',
                        description: 'The allowed origins for iframe src embedding',
                        type: 'Input',
                    },
                    {
                        name: '--FLOWISE_USERNAME',
                        description: 'Username to login',
                        type: 'Input',
                    },
                    {
                        name: '--FLOWISE_PASSWORD',
                        description: 'Password to login',
                        type: 'Input',
                    },
                    {
                        name: '--FLOWISE_FILE_SIZE_LIMIT',
                        description: 'Upload File Size Limit',
                        type: 'Input',
                        defaultValue: '50mb',
                    },
                ],
            },
            {
                section: 'Logging',
                items: [
                    {
                        name: '--DEBUG',
                        description: 'Print logs from components',
                        type: 'CheckBox',
                    },
                    {
                        name: '--LOG_PATH',
                        description: 'Location where log files are stored',
                        type: 'Input',
                        defaultValue: 'your-path/Flowise/logs',
                    },
                    {
                        name: '--LOG_LEVEL',
                        description: 'Different levels of logs',
                        type: 'DropDown',
                        values: ['error', 'info', 'verbose', 'debug'],
                        defaultValue: 'info',
                    },
                    {
                        name: '--LOG_JSON_SPACES',
                        description: 'Spaces to beautify JSON logs',
                        type: 'Input',
                        defaultValue: 2,
                    },
                ],
            },
            {
                section: 'API Keys',
                items: [
                    {
                        name: '--APIKEY_STORAGE_TYPE',
                        description: 'To store api keys on a JSON file or database. Default is `json`',
                        type: 'DropDown',
                        values: ['json', 'db'],
                        defaultValue: 'json',
                    },
                    {
                        name: '--APIKEY_PATH',
                        description: 'Location where api keys are saved when `APIKEY_STORAGE_TYPE` is `json`',
                        type: 'Input',
                        defaultValue: 'your-path/Flowise/packages/server',
                    },
                ],
            },
            {
                section: 'Tool Function Dependencies',
                items: [
                    {
                        name: '--TOOL_FUNCTION_BUILTIN_DEP',
                        description: 'NodeJS built-in modules to be used for Tool Function',
                        type: 'Input',
                    },
                    {
                        name: '--TOOL_FUNCTION_EXTERNAL_DEP',
                        description: 'External modules to be used for Tool Function',
                        type: 'Input',
                    },
                ],
            },
        ],
    },
    {
        category: 'Database',
        condition: 'DATABASE_TYPE === "sqlite"',
        sections: [
            {
                section: 'SQLite Configuration',
                items: [
                    {
                        name: '--DATABASE_TYPE',
                        description: 'Type of database to store the flowise data',
                        type: 'DropDown',
                        values: ['sqlite', 'mysql', 'postgres'],
                        defaultValue: 'sqlite',
                    },
                    {
                        name: '--DATABASE_PATH',
                        description: 'Location where database is saved (When DATABASE_TYPE is sqlite)',
                        type: 'Input',
                        defaultValue: 'your-home-dir/.flowise',
                    },
                ],
            },
        ],
    },
    {
        category: 'Database',
        condition: 'DATABASE_TYPE !== "sqlite"',
        sections: [
            {
                section: 'Database Configuration',
                items: [
                    {
                        name: '--DATABASE_TYPE',
                        description: 'Type of database to store the flowise data',
                        type: 'DropDown',
                        values: ['sqlite', 'mysql', 'postgres'],
                        defaultValue: 'sqlite',
                    },
                    {
                        name: '--DATABASE_HOST',
                        description: 'Host URL or IP address (When DATABASE_TYPE is not sqlite)',
                        type: 'Input',
                    },
                    {
                        name: '--DATABASE_PORT',
                        description: 'Database port (When DATABASE_TYPE is not sqlite)',
                        type: 'Input',
                    },
                    {
                        name: '--DATABASE_USER',
                        description: 'Database username (When DATABASE_TYPE is not sqlite)',
                        type: 'Input',
                    },
                    {
                        name: '--DATABASE_PASSWORD',
                        description: 'Database password (When DATABASE_TYPE is not sqlite)',
                        type: 'Input',
                    },
                    {
                        name: '--DATABASE_NAME',
                        description: 'Database name (When DATABASE_TYPE is not sqlite)',
                        type: 'Input',
                    },
                    {
                        name: '--DATABASE_SSL_KEY_BASE64',
                        description: 'Database SSL client cert in base64 (takes priority over DATABASE_SSL)',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Postgres Specific',
                items: [
                    {
                        name: '--DATABASE_SSL',
                        description: 'Database connection overssl (When DATABASE_TYPE is postgre)',
                        type: 'CheckBox',
                    },
                ],
            },
        ],
    },
    {
        category: 'Encryption',
        sections: [
            {
                section: 'Encryption Key',
                items: [
                    {
                        name: '--SECRETKEY_PATH',
                        description: 'Location where encryption key (used to encrypt/decrypt credentials) is saved',
                        type: 'Input',
                        defaultValue: 'your-path/Flowise/packages/server',
                    },
                    {
                        name: '--FLOWISE_SECRETKEY_OVERWRITE',
                        description: 'Encryption key to be used instead of the key stored in SECRETKEY_PATH',
                        type: 'Input',
                    },
                ],
            },
        ],
    },
    {
        category: 'Telemetry',
        sections: [
            {
                section: 'Telemetry',
                items: [
                    {
                        name: '--DISABLE_FLOWISE_TELEMETRY',
                        description: 'Turn off telemetry',
                        type: 'CheckBox',
                    },
                ],
            },
        ],
    },
    {
        category: 'Models',
        sections: [
            {
                section: 'Model Configuration',
                items: [
                    {
                        name: '--MODEL_LIST_CONFIG_JSON',
                        description: 'File path to load list of models from your local config file',
                        type: 'Input',
                        defaultValue: '/your_model_list_config_file_path',
                    },
                ],
            },
        ],
    },
    {
        category: 'Storage',
        sections: [
            {
                section: 'Storage Configuration',
                items: [
                    {
                        name: '--STORAGE_TYPE',
                        description: 'Type of storage for uploaded files. default is `local`',
                        type: 'DropDown',
                        values: ['s3', 'local', 'gcs'],
                        defaultValue: 'local',
                    },
                ],
            },
            {
                section: 'Local Storage',
                items: [
                    {
                        name: '--BLOB_STORAGE_PATH',
                        description: 'Local folder path where uploaded files are stored when `STORAGE_TYPE` is `local`',
                        type: 'Input',
                        defaultValue: 'your-home-dir/.flowise/storage',
                    },
                ],
            },
            {
                section: 'S3 Storage',
                items: [
                    {
                        name: '--S3_STORAGE_BUCKET_NAME',
                        description: 'Bucket name to hold the uploaded files when `STORAGE_TYPE` is `s3`',
                        type: 'Input',
                    },
                    {
                        name: '--S3_STORAGE_ACCESS_KEY_ID',
                        description: 'AWS Access Key',
                        type: 'Input',
                    },
                    {
                        name: '--S3_STORAGE_SECRET_ACCESS_KEY',
                        description: 'AWS Secret Key',
                        type: 'Input',
                    },
                    {
                        name: '--S3_STORAGE_REGION',
                        description: 'Region for S3 bucket',
                        type: 'Input',
                    },
                    {
                        name: '--S3_ENDPOINT_URL',
                        description: 'Custom Endpoint for S3',
                        type: 'Input',
                    },
                    {
                        name: '--S3_FORCE_PATH_STYLE',
                        description: 'Set this to true to force the request to use path-style addressing',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'GCS Storage',
                items: [
                    {
                        name: '--GOOGLE_CLOUD_STORAGE_PROJ_ID',
                        description: 'The GCP project id for cloud storage & logging when `STORAGE_TYPE` is `gcs`',
                        type: 'Input',
                    },
                    {
                        name: '--GOOGLE_CLOUD_STORAGE_CREDENTIAL',
                        description: 'The credential key file path when `STORAGE_TYPE` is `gcs`',
                        type: 'Input',
                    },
                    {
                        name: '--GOOGLE_CLOUD_STORAGE_BUCKET_NAME',
                        description: 'Bucket name to hold the uploaded files when `STORAGE_TYPE` is `gcs`',
                        type: 'Input',
                    },
                    {
                        name: '--GOOGLE_CLOUD_UNIFORM_BUCKET_ACCESS',
                        description: 'Enable uniform bucket level access when `STORAGE_TYPE` is `gcs`',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                ],
            },
        ],
    },
    {
        category: 'Nodes',
        sections: [
            {
                section: 'Node Visibility',
                items: [
                    {
                        name: '--SHOW_COMMUNITY_NODES',
                        description: 'Show nodes created by community',
                        type: 'CheckBox',
                    },
                    {
                        name: '--DISABLED_NODES',
                        description: 'Hide nodes from UI (comma separated list of node names)',
                        type: 'Input',
                    },
                ],
            },
        ],
    },
];

const INSTALL_TIME_KEY$3 = 'install-time-flowise';
const UPDATE_TIME_KEY$3 = 'update-time-flowise';
const UPDATE_AVAILABLE_KEY$3 = 'update-available-version-flowise';
const shellCommand$2 = 'npx flowise start';
function parseArgsToString$5(args) {
    let result = isWin ? '@echo off\n\n' : '#!/bin/bash\n\n';
    let argResult = '';
    args.forEach(arg => {
        const argType = getArgumentType(arg.name, flowiseArguments);
        if (argType === 'CheckBox') {
            argResult += `${arg.name}=true `;
        }
        else if (argType === 'File' || argType === 'Directory') {
            argResult += `${arg.name}="${arg.value}" `;
        }
        else {
            argResult += `${arg.name}=${arg.value} `;
        }
    });
    result += lodashExports.isEmpty(argResult) ? shellCommand$2 : `${shellCommand$2} ${argResult}`;
    return result;
}
function parseStringToArgs$5(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (!line.startsWith(shellCommand$2))
            return;
        const clArgs = line.split(`${shellCommand$2} `)[1];
        if (!clArgs)
            return;
        const args = clArgs.split('--').filter(Boolean);
        const result = args.map((arg) => {
            const [id, ...value] = arg.trim().split(' ');
            return {
                name: `--${id}`,
                value: value.join(' ').replace(/"/g, ''),
            };
        });
        result.forEach((value) => {
            if (isValidArg(value.name, flowiseArguments)) {
                if (getArgumentType(value.name, flowiseArguments) === 'CheckBox') {
                    argResult.push({ name: value.name, value: '' });
                }
                else {
                    argResult.push({ name: value.name, value: value.value });
                }
            }
        });
    });
    return argResult;
}
function startInstall$5(stepper) {
    stepper.initialSteps(['Getting Started', 'Checking NodeJS', 'Detect Existing', 'Install Flowise', 'All Done!']);
    stepper.starterStep({ disableSelectDir: true }).then(() => {
        stepper.nextStep().then(() => {
            stepper.progressBar(true, 'Checking if NPM is installed...');
            stepper.ipc.invoke('is_npm_available').then((isNpmInstalled) => {
                if (isNpmInstalled) {
                    stepper.nextStep().then(() => {
                        stepper.progressBar(true, 'Checking for existing Flowise installation...');
                        stepper.ipc.invoke('is_flowise_installed').then((isFlowInstalled) => {
                            if (isFlowInstalled) {
                                stepper.setInstalled();
                                const currentDate = new Date();
                                stepper.storage.set(INSTALL_TIME_KEY$3, currentDate.toLocaleString());
                                stepper.showFinalStep('success', "You're All Set!", "Flowise is already installed. You're good to go!");
                            }
                            else {
                                stepper.nextStep().then(() => {
                                    stepper.executeTerminalCommands('npm i -g flowise').then(() => {
                                        stepper.setInstalled();
                                        const currentDate = new Date();
                                        stepper.storage.set(INSTALL_TIME_KEY$3, currentDate.toLocaleString());
                                        stepper.showFinalStep('success', 'Installation Complete!', 'Your Flowise environment is ready. Enjoy!');
                                    });
                                });
                            }
                        });
                    });
                }
                else {
                    stepper.showFinalStep('error', 'NodeJs is not installed!', 'Flowise need NPM! Please install NodeJs then try again.');
                }
            });
        });
    });
}
function startUpdate$3(stepper) {
    stepper.initialSteps(['Update Flowise', 'Complete Update']);
    stepper.executeTerminalCommands('npm -g update flowise').then(() => {
        const currentDate = new Date();
        stepper.storage.set(UPDATE_TIME_KEY$3, currentDate.toLocaleString());
        stepper.setUpdated();
        stepper.showFinalStep('success', 'Flowise Updated Successfully!', `Flowise has been updated to the latest version. You can now enjoy the new features and improvements.`);
    });
}
async function cardInfo$5(api, callback) {
    callback.setOpenFolders(undefined);
    const descManager = new DescriptionManager([
        {
            title: 'Installation Data',
            items: [
                { label: 'Install Date', result: 'loading' },
                { label: 'Update Date', result: 'loading' },
                { label: 'Current Version', result: 'loading' },
                { label: 'Latest Version', result: 'loading' },
            ],
        },
    ], callback);
    api.storage.get(INSTALL_TIME_KEY$3).then(result => {
        descManager.updateItem(0, 0, result);
    });
    api.storage.get(UPDATE_TIME_KEY$3).then(result => {
        descManager.updateItem(0, 1, result);
    });
    api.ipc.invoke('current_flowise_version').then(result => {
        descManager.updateItem(0, 2, result);
    });
    api.storage.get(UPDATE_AVAILABLE_KEY$3).then(result => {
        descManager.updateItem(0, 3, result);
    });
}
function catchAddress$2(input) {
    if (input.toLowerCase().includes('listening at')) {
        const portRegex = /:(\d+)(?!.*\d)/;
        const match = input.match(portRegex);
        if (match && match[1]) {
            return `http://localhost:${match[1]}`;
        }
        else {
            return undefined;
        }
    }
    return undefined;
}
const Flow_RM = {
    catchAddress: catchAddress$2,
    parseArgsToString: parseArgsToString$5,
    parseStringToArgs: parseStringToArgs$5,
    cardInfo: cardInfo$5,
    manager: { startInstall: startInstall$5, updater: { updateType: 'stepper', startUpdate: startUpdate$3 } },
};

// noinspection SpellCheckingInspection
/* eslint max-len: 0 */
const openArguments = [
    {
        category: 'App/Backend',
        sections: [
            {
                section: 'General',
                items: [
                    {
                        name: 'WEBUI_URL',
                        description: 'Specifies the URL where your Open WebUI installation is reachable. Needed for search engine support and OAuth/SSO.',
                        type: 'Input',
                        defaultValue: 'http://localhost:3000',
                    },
                    {
                        name: 'ENABLE_SIGNUP',
                        description: 'Toggles user account creation.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ENABLE_SIGNUP_PASSWORD_CONFIRMATION',
                        description: 'If set to True, a "Confirm Password" field is added to the sign-up page to help users avoid typos when creating their password.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ENABLE_LOGIN_FORM',
                        description: 'Toggles email, password, sign-in and "or" (only when ENABLE_OAUTH_SIGNUP is set to True) elements.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'DEFAULT_LOCALE',
                        description: 'Sets the default locale for the application.',
                        type: 'Input',
                        defaultValue: 'en',
                    },
                    {
                        name: 'DEFAULT_MODELS',
                        description: 'Sets a default Language Model.',
                        type: 'Input',
                    },
                    {
                        name: 'DEFAULT_USER_ROLE',
                        description: 'Sets the default role assigned to new users.',
                        type: 'DropDown',
                        values: ['pending', 'user', 'admin'],
                        defaultValue: 'pending',
                    },
                    {
                        name: 'PENDING_USER_OVERLAY_TITLE',
                        description: 'Sets a custom title for the pending user overlay.',
                        type: 'Input',
                    },
                    {
                        name: 'PENDING_USER_OVERLAY_CONTENT',
                        description: 'Sets a custom text content for the pending user overlay.',
                        type: 'Input',
                    },
                    {
                        name: 'ENABLE_CHANNELS',
                        description: 'Enables or disables channel support.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'WEBHOOK_URL',
                        description: 'Sets a webhook for integration with Discord/Slack/Microsoft Teams.',
                        type: 'Input',
                    },
                    {
                        name: 'ENABLE_ADMIN_EXPORT',
                        description: 'Controls whether admins can export data, chats and the database in the admin panel. Database exports only work for SQLite databases for now.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ENABLE_ADMIN_CHAT_ACCESS',
                        description: "Enables admin users to directly access the chats of other users. When disabled, admins can no longer accesss user's chats in the admin panel. If you disable this, consider disabling `ENABLE_ADMIN_EXPORT` too, if you are using SQLite, as the exports also contain user chats.",
                        type: 'CheckBox',
                    },
                    {
                        name: 'BYPASS_ADMIN_ACCESS_CONTROL',
                        description: 'When disabled, admin users are treated like regular users for workspace access (models, knowledge, prompts and tools) and only see items they have explicit permission to access through the existing access control system. This also applies to the visibility of models in the model selector - admins will be treated as regular users: base models and custom models they do not have explicit permission to access, will be hidden. If set to `True` (Default), admins have access to all created items in the workspace area and all models in the model selector, regardless of access permissions.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ENABLE_USER_WEBHOOKS',
                        description: 'Enables or disables user webhooks.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'RESPONSE_WATERMARK',
                        description: 'Sets a custom text that will be included when you copy a message in the chat. E.g. `"This text is AI generated"` -> will add "This text is AI generated" to every message, when copied.',
                        type: 'Input',
                    },
                    {
                        name: 'THREAD_POOL_SIZE',
                        description: 'Sets the thread pool size for FastAPI/AnyIO blocking calls. By default (when set to `0`) FastAPI/AnyIO use `40` threads. In case of large instances and many concurrent users, it may be needed to increase `THREAD_POOL_SIZE` to prevent blocking.',
                        type: 'Input',
                        defaultValue: 0,
                    },
                    {
                        name: 'MODELS_CACHE_TTL',
                        description: 'Sets the cache time-to-live in seconds for model list responses from OpenAI and Ollama endpoints. This reduces API calls by caching the available models list for the specified duration. Set to empty string to disable caching entirely.',
                        type: 'Input',
                        defaultValue: 1,
                    },
                    {
                        name: 'SHOW_ADMIN_DETAILS',
                        description: 'Toggles whether to show admin user details in the interface.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ADMIN_EMAIL',
                        description: 'Sets the admin email shown by `SHOW_ADMIN_DETAILS`',
                        type: 'Input',
                    },
                    {
                        name: 'ENV',
                        description: 'Environment setting.',
                        type: 'DropDown',
                        values: ['dev', 'prod'],
                        defaultValue: 'dev',
                    },
                    {
                        name: 'ENABLE_PERSISTENT_CONFIG',
                        description: 'If set to `False`, all `PersistentConfig` variables are treated as regular variables.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'CUSTOM_NAME',
                        description: 'Sets `WEBUI_NAME` but polls **api.openwebui.com** for metadata.',
                        type: 'Input',
                    },
                    {
                        name: 'WEBUI_NAME',
                        description: 'Sets the main WebUI name. Appends `(Open WebUI)` if overridden.',
                        type: 'Input',
                        defaultValue: 'Open WebUI',
                    },
                    {
                        name: 'PORT',
                        description: 'Sets the port to run Open WebUI from.',
                        type: 'Input',
                        defaultValue: 8080,
                    },
                    {
                        name: 'ENABLE_REALTIME_CHAT_SAVE',
                        description: "When enabled, the system saves each chunk of streamed chat data to the database in real time to ensure maximum data persistency. This feature provides robust data recovery and allows accurate session tracking. However, the tradeoff is increased latency, as saving to the database introduces a delay. Disabling this feature can improve performance and reduce delays, but it risks potential data loss in the event of a system failure or crash. Use based on your application's requirements and acceptable tradeoffs.",
                        type: 'CheckBox',
                    },
                    {
                        name: 'CHAT_RESPONSE_STREAM_DELTA_CHUNK_SIZE',
                        description: "Sets a system-wide minimum value for the number of tokens to batch together before sending them to the client during a streaming response. This allows an administrator to enforce a baseline level of performance and stability across the entire system by preventing excessively small chunk sizes that can cause high CPU load. The final chunk size used for a response will be the highest value set among this global variable, the model's advanced parameters, or the per-chat settings. The default is 1, which applies no minimum batching at the global level.",
                        type: 'Input',
                        defaultValue: 1,
                    },
                    {
                        name: 'BYPASS_MODEL_ACCESS_CONTROL',
                        description: "Bypasses model access control. When set to `true`, all users (and admins alike) will have access to all models, regardless of the model's privacy setting (Private, Public, Shared with certain groups). This is useful for smaller or individual Open WebUI installations where model access restrictions may not be needed.",
                        type: 'CheckBox',
                    },
                    {
                        name: 'WEBUI_BUILD_HASH',
                        description: 'Used for identifying the Git SHA of the build for releases.',
                        type: 'Input',
                        defaultValue: 'dev-build',
                    },
                    {
                        name: 'WEBUI_BANNERS',
                        description: 'List of banners to show to users.',
                        type: 'Input',
                    },
                    {
                        name: 'USE_CUDA_DOCKER',
                        description: 'Builds the Docker image with NVIDIA CUDA support. Enables GPU acceleration for local Whisper and embeddings.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'EXTERNAL_PWA_MANIFEST_URL',
                        description: 'When defined as a fully qualified URL (e.g., https://path/to/manifest.webmanifest), requests sent to /manifest.json will use the external manifest file. When not defined, the default manifest.json file will be used.',
                        type: 'Input',
                    },
                    {
                        name: 'ENABLE_TITLE_GENERATION',
                        description: 'Enables or disables chat title generation.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'LICENSE_KEY',
                        description: 'Specifies the license key to use (for Enterprise users only).',
                        type: 'Input',
                    },
                    {
                        name: 'SSL_ASSERT_FINGERPRINT',
                        description: 'Specifies the SSL assert fingerprint to use.',
                        type: 'Input',
                    },
                    {
                        name: 'DEFAULT_PROMPT_SUGGESTIONS',
                        description: 'List of prompt suggestions.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'AIOHTTP Client',
                items: [
                    {
                        name: 'AIOHTTP_CLIENT_TIMEOUT',
                        description: 'Specifies the timeout duration in seconds for the AIOHTTP client. This impacts things such as connections to Ollama and OpenAI endpoints.',
                        type: 'Input',
                        defaultValue: 300,
                    },
                    {
                        name: 'AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST',
                        description: 'Sets the timeout in seconds for fetching the model list. This can be useful in cases where network latency requires a longer timeout duration to successfully retrieve the model list.',
                        type: 'Input',
                        defaultValue: 10,
                    },
                    {
                        name: 'AIOHTTP_CLIENT_TIMEOUT_OPENAI_MODEL_LIST',
                        description: 'Sets the timeout in seconds for fetching the model list. This can be useful in cases where network latency requires a longer timeout duration to successfully retrieve the model list.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Directories',
                items: [
                    {
                        name: 'DATA_DIR',
                        description: 'Specifies the base directory for data storage, including uploads, cache, vector database, etc.',
                        type: 'Input',
                        defaultValue: './data',
                    },
                    {
                        name: 'FONTS_DIR',
                        description: 'Specifies the directory for fonts.',
                        type: 'Input',
                    },
                    {
                        name: 'FRONTEND_BUILD_DIR',
                        description: 'Specifies the location of the built frontend files.',
                        type: 'Input',
                        defaultValue: '../build',
                    },
                    {
                        name: 'STATIC_DIR',
                        description: 'Specifies the directory for static files, such as the favicon.',
                        type: 'Input',
                        defaultValue: './static',
                    },
                ],
            },
            {
                section: 'Ollama',
                items: [
                    {
                        name: 'ENABLE_OLLAMA_API',
                        description: 'Enables the use of Ollama APIs.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'OLLAMA_BASE_URL',
                        description: 'Configures the Ollama backend URL.',
                        type: 'Input',
                        defaultValue: 'http://localhost:11434',
                    },
                    {
                        name: 'OLLAMA_BASE_URLS',
                        description: 'Configures load-balanced Ollama backend hosts, separated by ;. Takes precedence over OLLAMA_BASE_URL.',
                        type: 'Input',
                    },
                    {
                        name: 'USE_OLLAMA_DOCKER',
                        description: 'Builds the Docker image with a bundled Ollama instance.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'K8S_FLAG',
                        description: 'If set, assumes Helm chart deployment and sets OLLAMA_BASE_URL to http://ollama-service.open-webui.svc.cluster.local:11434',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'OpenAI',
                items: [
                    {
                        name: 'ENABLE_OPENAI_API',
                        description: 'Enables the use of OpenAI APIs.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'OPENAI_API_BASE_URL',
                        description: 'Configures the OpenAI base API URL.',
                        type: 'Input',
                        defaultValue: 'https://api.openai.com/v1',
                    },
                    {
                        name: 'OPENAI_API_BASE_URLS',
                        description: 'Supports balanced OpenAI base API URLs, semicolon-separated.',
                        type: 'Input',
                    },
                    {
                        name: 'OPENAI_API_KEY',
                        description: 'Sets the OpenAI API key.',
                        type: 'Input',
                    },
                    {
                        name: 'OPENAI_API_KEYS',
                        description: 'Supports multiple OpenAI API keys, semicolon-separated.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Tasks',
                items: [
                    {
                        name: 'TASK_MODEL',
                        description: 'The default model to use for tasks such as title and web search query generation when using Ollama models.',
                        type: 'Input',
                    },
                    {
                        name: 'TASK_MODEL_EXTERNAL',
                        description: 'The default model to use for tasks such as title and web search query generation when using OpenAI-compatible endpoints.',
                        type: 'Input',
                    },
                    {
                        name: 'TITLE_GENERATION_PROMPT_TEMPLATE',
                        description: 'Prompt to use when generating chat titles.',
                        type: 'Input',
                    },
                    {
                        name: 'ENABLE_FOLLOW_UP_GENERATION',
                        description: 'Enables or disables follow up generation.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'FOLLOW_UP_GENERATION_PROMPT_TEMPLATE',
                        description: 'Prompt to use for generating several relevant follow-up questions.',
                        type: 'Input',
                    },
                    {
                        name: 'TOOLS_FUNCTION_CALLING_PROMPT_TEMPLATE',
                        description: 'Prompt to use when calling tools.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Code Execution',
                items: [
                    {
                        name: 'ENABLE_CODE_EXECUTION',
                        description: 'Enables or disables code execution.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'CODE_EXECUTION_ENGINE',
                        description: 'Specifies the code execution engine to use.',
                        type: 'Input',
                        defaultValue: 'pyodide',
                    },
                    {
                        name: 'CODE_EXECUTION_JUPYTER_URL',
                        description: 'Specifies the Jupyter URL to use for code execution.',
                        type: 'Input',
                    },
                    {
                        name: 'CODE_EXECUTION_JUPYTER_AUTH',
                        description: 'Specifies the Jupyter authentication method to use for code execution.',
                        type: 'Input',
                    },
                    {
                        name: 'CODE_EXECUTION_JUPYTER_AUTH_TOKEN',
                        description: 'Specifies the Jupyter authentication token to use for code execution.',
                        type: 'Input',
                    },
                    {
                        name: 'CODE_EXECUTION_JUPYTER_AUTH_PASSWORD',
                        description: 'Specifies the Jupyter authentication password to use for code execution.',
                        type: 'Input',
                    },
                    {
                        name: 'CODE_EXECUTION_JUPYTER_TIMEOUT',
                        description: 'Specifies the timeout for Jupyter code execution.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Code Interpreter',
                items: [
                    {
                        name: 'ENABLE_CODE_INTERPRETER',
                        description: 'Enables or disables code interpreter.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'CODE_INTERPRETER_ENGINE',
                        description: 'Specifies the code interpreter engine to use.',
                        type: 'Input',
                        defaultValue: 'pyodide',
                    },
                    {
                        name: 'CODE_INTERPRETER_BLACKLISTED_MODULES',
                        description: 'Specifies a comma-separated list of Python modules that are blacklisted and cannot be imported or used within the code interpreter. This enhances security by preventing access to potentially sensitive or system-level functionalities.',
                        type: 'Input',
                    },
                    {
                        name: 'CODE_INTERPRETER_PROMPT_TEMPLATE',
                        description: 'Specifies the prompt template to use for code interpreter.',
                        type: 'Input',
                    },
                    {
                        name: 'CODE_INTERPRETER_JUPYTER_URL',
                        description: 'Specifies the Jupyter URL to use for code interpreter.',
                        type: 'Input',
                    },
                    {
                        name: 'CODE_INTERPRETER_JUPYTER_AUTH',
                        description: 'Specifies the Jupyter authentication method to use for code interpreter.',
                        type: 'Input',
                    },
                    {
                        name: 'CODE_INTERPRETER_JUPYTER_AUTH_TOKEN',
                        description: 'Specifies the Jupyter authentication token to use for code interpreter.',
                        type: 'Input',
                    },
                    {
                        name: 'CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD',
                        description: 'Specifies the Jupyter authentication password to use for code interpreter.',
                        type: 'Input',
                    },
                    {
                        name: 'CODE_INTERPRETER_JUPYTER_TIMEOUT',
                        description: 'Specifies the timeout for the Jupyter code interpreter.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Direct Connections (OpenAPI/MCPO Tool Servers)',
                items: [
                    {
                        name: 'ENABLE_DIRECT_CONNECTIONS',
                        description: 'Enables or disables direct connections.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Autocomplete',
                items: [
                    {
                        name: 'ENABLE_AUTOCOMPLETE_GENERATION',
                        description: 'Enables or disables autocomplete generation.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH',
                        description: 'Sets the maximum input length for autocomplete generation.',
                        type: 'Input',
                        defaultValue: -1,
                    },
                    {
                        name: 'AUTOCOMPLETE_GENERATION_PROMPT_TEMPLATE',
                        description: 'Sets the prompt template for autocomplete generation.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Evaluation Arena Model',
                items: [
                    {
                        name: 'ENABLE_EVALUATION_ARENA_MODELS',
                        description: 'Enables or disables evaluation arena models.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ENABLE_MESSAGE_RATING',
                        description: 'Enables message rating feature.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ENABLE_COMMUNITY_SHARING',
                        description: 'Controls whether users are shown the share to community button.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Tags Generation',
                items: [
                    {
                        name: 'ENABLE_TAGS_GENERATION',
                        description: 'Enables or disables tag generation.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'TAGS_GENERATION_PROMPT_TEMPLATE',
                        description: 'Sets the prompt template for tag generation.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'API Key Endpoint Restrictions',
                items: [
                    {
                        name: 'ENABLE_API_KEY',
                        description: 'Enables API key authentication.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ENABLE_API_KEY_ENDPOINT_RESTRICTIONS',
                        description: 'Enables API key endpoint restrictions for added security and configurability.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'API_KEY_ALLOWED_ENDPOINTS',
                        description: 'Specifies a comma-separated list of allowed API endpoints when API key endpoint restrictions are enabled.',
                        type: 'Input',
                    },
                    {
                        name: 'JWT_EXPIRES_IN',
                        description: 'Sets the JWT expiration time in seconds. Valid time units: `s`, `m`, `h`, `d`, `w` or `-1` for no expiration.',
                        type: 'Input',
                        defaultValue: '-1',
                    },
                ],
            },
        ],
    },
    {
        category: 'Security Variables',
        items: [
            {
                name: 'ENABLE_FORWARD_USER_INFO_HEADERS',
                description: 'Forwards user information (name, ID, email, role and chat-id) as X-headers to OpenAI API and Ollama API.',
                type: 'CheckBox',
            },
            {
                name: 'ENABLE_WEB_LOADER_SSL_VERIFICATION',
                description: 'Bypass SSL Verification for RAG on Websites.',
                type: 'CheckBox',
            },
            {
                name: 'WEBUI_SESSION_COOKIE_SAME_SITE',
                description: 'Sets the `SameSite` attribute for session cookies.',
                type: 'DropDown',
                values: ['lax', 'strict', 'none'],
                defaultValue: 'lax',
            },
            {
                name: 'WEBUI_SESSION_COOKIE_SECURE',
                description: 'Sets the `Secure` attribute for session cookies if set to `True`.',
                type: 'CheckBox',
            },
            {
                name: 'WEBUI_AUTH_COOKIE_SAME_SITE',
                description: 'Sets the `SameSite` attribute for auth cookies.',
                type: 'DropDown',
                values: ['lax', 'strict', 'none'],
                defaultValue: 'lax',
            },
            {
                name: 'WEBUI_AUTH_COOKIE_SECURE',
                description: 'Sets the `Secure` attribute for auth cookies if set to `True`.',
                type: 'CheckBox',
            },
            {
                name: 'WEBUI_AUTH',
                description: 'This setting enables or disables authentication.',
                type: 'CheckBox',
            },
            {
                name: 'WEBUI_SECRET_KEY',
                description: 'Overrides the randomly generated string used for JSON Web Token.',
                type: 'Input',
                defaultValue: 't0p-s3cr3t',
            },
            {
                name: 'ENABLE_VERSION_UPDATE_CHECK',
                description: 'When enabled, the application makes automatic update checks and notifies you about version updates.',
                type: 'CheckBox',
            },
            {
                name: 'OFFLINE_MODE',
                description: "Disables Open WebUI's network connections for update checks and automatic model downloads.",
                type: 'CheckBox',
            },
            {
                name: 'RESET_CONFIG_ON_START',
                description: 'Resets the `config.json` file on startup.',
                type: 'CheckBox',
            },
            {
                name: 'SAFE_MODE',
                description: 'Enables safe mode, which disables potentially unsafe features, deactivating all functions.',
                type: 'CheckBox',
            },
            {
                name: 'CORS_ALLOW_ORIGIN',
                description: 'Sets the allowed origins for Cross-Origin Resource Sharing (CORS).',
                type: 'Input',
                defaultValue: '*',
            },
            {
                name: 'CORS_ALLOW_CUSTOM_SCHEME',
                description: 'Sets a list of further allowed schemes for Cross-Origin Resource Sharing (CORS). Allows you to specify additional custom URL schemes, beyond the standard `http` and `https`, that are permitted as valid origins for Cross-Origin Resource Sharing (CORS).',
                type: 'Input',
            },
            {
                name: 'RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE',
                description: 'Determines whether to allow custom models defined on the Hub in their own modeling files.',
                type: 'CheckBox',
            },
            {
                name: 'RAG_RERANKING_MODEL_TRUST_REMOTE_CODE',
                description: 'Determines whether to allow custom models defined on the Hub in their own. modeling files for reranking.',
                type: 'CheckBox',
            },
            {
                name: 'RAG_EMBEDDING_MODEL_AUTO_UPDATE',
                description: 'Toggles automatic update of the Sentence-Transformer model.',
                type: 'CheckBox',
            },
            {
                name: 'RAG_RERANKING_MODEL_AUTO_UPDATE',
                description: 'Toggles automatic update of the reranking model.',
                type: 'CheckBox',
            },
        ],
    },
    {
        category: 'Vector Database',
        sections: [
            {
                section: 'General',
                items: [
                    {
                        name: 'VECTOR_DB',
                        description: 'Specifies which vector database system to use. This setting determines which vector storage system will be used for managing embeddings.',
                        type: 'DropDown',
                        values: [
                            'chroma',
                            'elasticsearch',
                            'milvus',
                            'opensearch',
                            'pgvector',
                            'qdrant',
                            'pinecone',
                            's3vector',
                            'oracle23ai',
                        ],
                        defaultValue: 'chroma',
                    },
                ],
            },
            {
                section: 'ChromaDB',
                items: [
                    {
                        name: 'CHROMA_TENANT',
                        description: 'Sets the tenant for ChromaDB to use for RAG embeddings.',
                        type: 'Input',
                    },
                    {
                        name: 'CHROMA_DATABASE',
                        description: 'Sets the database in the ChromaDB tenant to use for RAG embeddings.',
                        type: 'Input',
                    },
                    {
                        name: 'CHROMA_HTTP_HOST',
                        description: 'Specifies the hostname of a remote ChromaDB Server. Uses a local ChromaDB instance if not set.',
                        type: 'Input',
                    },
                    {
                        name: 'CHROMA_HTTP_PORT',
                        description: 'Specifies the port of a remote ChromaDB Server.',
                        type: 'Input',
                        defaultValue: 8000,
                    },
                    {
                        name: 'CHROMA_HTTP_HEADERS',
                        description: 'A comma-separated list of HTTP headers to include with every ChromaDB request.',
                        type: 'Input',
                    },
                    {
                        name: 'CHROMA_HTTP_SSL',
                        description: 'Controls whether or not SSL is used for ChromaDB Server connections.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'CHROMA_CLIENT_AUTH_PROVIDER',
                        description: 'Specifies an authentication provider for remote ChromaDB Server.',
                        type: 'Input',
                    },
                    {
                        name: 'CHROMA_CLIENT_AUTH_CREDENTIALS',
                        description: 'Specifies auth credentials for remote ChromaDB Server.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Elasticsearch',
                items: [
                    {
                        name: 'ELASTICSEARCH_API_KEY',
                        description: 'Specifies the Elasticsearch API key.',
                        type: 'Input',
                    },
                    {
                        name: 'ELASTICSEARCH_CA_CERTS',
                        description: 'Specifies the path to the CA certificates for Elasticsearch.',
                        type: 'Input',
                    },
                    {
                        name: 'ELASTICSEARCH_CLOUD_ID',
                        description: 'Specifies the Elasticsearch cloud ID.',
                        type: 'Input',
                    },
                    {
                        name: 'ELASTICSEARCH_INDEX_PREFIX',
                        description: 'Specifies the prefix for the Elasticsearch index.',
                        type: 'Input',
                        defaultValue: 'open_webui_collections',
                    },
                    {
                        name: 'ELASTICSEARCH_PASSWORD',
                        description: 'Specifies the password for Elasticsearch.',
                        type: 'Input',
                    },
                    {
                        name: 'ELASTICSEARCH_URL',
                        description: 'Specifies the URL for the Elasticsearch instance.',
                        type: 'Input',
                        defaultValue: 'https://localhost:9200',
                    },
                    {
                        name: 'ELASTICSEARCH_USERNAME',
                        description: 'Specifies the username for Elasticsearch.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Milvus',
                items: [
                    {
                        name: 'MILVUS_URI',
                        description: 'Specifies the URI for connecting to the Milvus vector database. This can point to a local or remote Milvus server based on the deployment configuration.',
                        type: 'Input',
                        defaultValue: '${DATA_DIR}/vector_db/milvus.db',
                    },
                    {
                        name: 'MILVUS_DB',
                        description: 'Specifies the database to connect to within a Milvus instance.',
                        type: 'Input',
                        defaultValue: 'default',
                    },
                    {
                        name: 'MILVUS_TOKEN',
                        description: 'Specifies an optional connection token for Milvus.',
                        type: 'Input',
                    },
                    {
                        name: 'MILVUS_INDEX_TYPE',
                        description: 'Specifies the index type to use when creating a new collection in Milvus. `AUTOINDEX` is generally recommended for Milvus standalone. `HNSW` may offer better performance but typically requires a clustered Milvus setup.',
                        type: 'DropDown',
                        values: ['AUTOINDEX', 'FLAT', 'IVF_FLAT', 'HNSW'],
                        defaultValue: 'HNSW',
                    },
                    {
                        name: 'MILVUS_METRIC_TYPE',
                        description: 'Specifies the metric type for vector similarity search in Milvus.',
                        type: 'DropDown',
                        values: ['COSINE', 'IP', 'L2'],
                        defaultValue: 'COSINE',
                    },
                    {
                        name: 'MILVUS_HNSW_M',
                        description: 'Specifies the `M` parameter for the HNSW index type in Milvus. This influences the number of bi-directional links created for each new element during construction. Only applicable if `MILVUS_INDEX_TYPE` is `HNSW`.',
                        type: 'Input',
                        defaultValue: 16,
                    },
                    {
                        name: 'MILVUS_HNSW_EFCONSTRUCTION',
                        description: 'Specifies the `efConstruction` parameter for the HNSW index type in Milvus. This influences the size of the dynamic list for the nearest neighbors during index construction. Only applicable if `MILVUS_INDEX_TYPE` is `HNSW`.',
                        type: 'Input',
                        defaultValue: 100,
                    },
                    {
                        name: 'MILVUS_IVF_FLAT_NLIST',
                        description: 'Specifies the `nlist` parameter for the IVF_FLAT index type in Milvus. This is the number of cluster units. Only applicable if `MILVUS_INDEX_TYPE` is `IVF_FLAT`.',
                        type: 'Input',
                        defaultValue: 128,
                    },
                ],
            },
            {
                section: 'OpenSearch',
                items: [
                    {
                        name: 'OPENSEARCH_CERT_VERIFY',
                        description: 'Enables or disables OpenSearch certificate verification.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'OPENSEARCH_PASSWORD',
                        description: 'Sets the password for OpenSearch.',
                        type: 'Input',
                    },
                    {
                        name: 'OPENSEARCH_SSL',
                        description: 'Enables or disables SSL for OpenSearch.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'OPENSEARCH_URI',
                        description: 'Sets the URI for OpenSearch.',
                        type: 'Input',
                        defaultValue: 'https://localhost:9200',
                    },
                    {
                        name: 'OPENSEARCH_USERNAME',
                        description: 'Sets the username for OpenSearch.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'PGVector',
                items: [
                    {
                        name: 'PGVECTOR_DB_URL',
                        description: 'Sets the database URL for model storage.',
                        type: 'Input',
                    },
                    {
                        name: 'PGVECTOR_INITIALIZE_MAX_VECTOR_LENGTH',
                        description: 'Specifies the maximum vector length for PGVector initialization.',
                        type: 'Input',
                        defaultValue: '1536',
                    },
                ],
            },
            {
                section: 'Qdrant',
                items: [
                    {
                        name: 'QDRANT_API_KEY',
                        description: 'Sets the API key for Qdrant.',
                        type: 'Input',
                    },
                    {
                        name: 'QDRANT_URI',
                        description: 'Sets the URI for Qdrant.',
                        type: 'Input',
                    },
                    {
                        name: 'QDRANT_ON_DISK',
                        description: 'Enable the usage of memmap(also known as on-disk) storage',
                        type: 'CheckBox',
                    },
                    {
                        name: 'QDRANT_PREFER_GRPC',
                        description: 'Use gPRC interface whenever possible.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'QDRANT_GRPC_PORT',
                        description: 'Sets the gRPC port number for Qdrant.',
                        type: 'Input',
                        defaultValue: 6334,
                    },
                    {
                        name: 'QDRANT_TIMEOUT',
                        description: 'Sets the timeout in seconds for all requests made to the Qdrant server, helping to prevent long-running queries from stalling the application.',
                        type: 'Input',
                        defaultValue: 5,
                    },
                    {
                        name: 'QDRANT_HNSW_M',
                        description: 'Controls the HNSW (Hierarchical Navigable Small World) index construction. In standard mode, this sets the `m` parameter. In multi-tenancy mode, this value is used for the `payload_m` parameter to build indexes on the payload, as the global `m` is disabled for performance, following Qdrant best practices.',
                        type: 'Input',
                        defaultValue: 16,
                    },
                    {
                        name: 'ENABLE_QDRANT_MULTITENANCY_MODE',
                        description: 'Enables multitenancy pattern for Qdrant collections management, which significantly reduces RAM usage and computational overhead by consolidating similar vector data structures. Recommend turn on',
                        type: 'CheckBox',
                    },
                    {
                        name: 'QDRANT_COLLECTION_PREFIX',
                        description: 'Sets the prefix for Qdrant collection names. Useful for namespacing or isolating collections, especially in multitenancy mode. Changing this value will cause the application to use a different set of collections in Qdrant. Existing collections with a different prefix will not be affected.',
                        type: 'Input',
                        defaultValue: 'open-webui',
                    },
                ],
            },
            {
                section: 'Pinecone',
                items: [
                    {
                        name: 'PINECONE_API_KEY',
                        description: 'Sets the API key used to authenticate with the Pinecone service.',
                        type: 'Input',
                    },
                    {
                        name: 'PINECONE_ENVIRONMENT',
                        description: 'Specifies the Pinecone environment to connect to (e.g., `us-west1-gcp`, `gcp-starter`, etc.).',
                        type: 'Input',
                    },
                    {
                        name: 'PINECONE_INDEX_NAME',
                        description: 'Defines the name of the Pinecone index that will be used to store and query vector embeddings.',
                        type: 'Input',
                        defaultValue: 'open-webui-index',
                    },
                    {
                        name: 'PINECONE_DIMENSION',
                        description: 'The dimensionality of the vector embeddings. Must match the dimension expected by the index (commonly 768, 1024, 1536, or 3072 based on model used).',
                        type: 'Input',
                        defaultValue: 1536,
                    },
                    {
                        name: 'PINECONE_METRIC',
                        description: 'Specifies the similarity metric to use for vector comparisons within the Pinecone index.',
                        type: 'DropDown',
                        values: ['cosine', 'dotproduct', 'euclidean'],
                        defaultValue: 'cosine',
                    },
                    {
                        name: 'PINECONE_CLOUD',
                        description: 'Specifies the cloud provider where the Pinecone index is hosted.',
                        type: 'DropDown',
                        values: ['aws', 'gcp', 'azure'],
                        defaultValue: 'aws',
                    },
                ],
            },
            {
                section: 'Oracle 23ai Vector Search (oracle23ai)',
                items: [
                    {
                        name: 'ORACLE_DB_USE_WALLET',
                        description: 'Determines the connection method to the Oracle Database.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ORACLE_DB_USER',
                        description: 'Specifies the username used to connect to the Oracle Database.',
                        type: 'Input',
                        defaultValue: 'DEMOUSER',
                    },
                    {
                        name: 'ORACLE_DB_PASSWORD',
                        description: 'Specifies the password for the `ORACLE_DB_USER`.',
                        type: 'Input',
                        defaultValue: 'Welcome123456',
                    },
                    {
                        name: 'ORACLE_DB_DSN',
                        description: 'Defines the Data Source Name for the Oracle Database connection.',
                        type: 'Input',
                        defaultValue: 'localhost:1521/FREEPDB1',
                    },
                    {
                        name: 'ORACLE_WALLET_DIR',
                        description: 'Required when `ORACLE_DB_USE_WALLET` is `true`. Specifies the absolute path to the directory containing the Oracle Cloud Wallet files.',
                        type: 'Input',
                    },
                    {
                        name: 'ORACLE_WALLET_PASSWORD',
                        description: 'Required when `ORACLE_DB_USE_WALLET` is `true`. Specifies the password for the Oracle Cloud Wallet.',
                        type: 'Input',
                    },
                    {
                        name: 'ORACLE_VECTOR_LENGTH',
                        description: 'Sets the expected dimension or length of the vector embeddings stored in the Oracle Database. This must match the embedding model used.',
                        type: 'Input',
                        defaultValue: 768,
                    },
                    {
                        name: 'ORACLE_DB_POOL_MIN',
                        description: 'The minimum number of connections to maintain in the Oracle Database connection pool.',
                        type: 'Input',
                        defaultValue: 2,
                    },
                    {
                        name: 'ORACLE_DB_POOL_MAX',
                        description: 'The maximum number of connections allowed in the Oracle Database connection pool.',
                        type: 'Input',
                        defaultValue: 10,
                    },
                    {
                        name: 'ORACLE_DB_POOL_INCREMENT',
                        description: 'The number of connections to create when the pool needs to grow.',
                        type: 'Input',
                        defaultValue: 1,
                    },
                ],
            },
            {
                section: 'S3 Vector Bucket',
                items: [
                    {
                        name: 'S3_VECTOR_BUCKET_NAME',
                        description: 'Specifies the name of the S3 Vector Bucket to store vectors in.',
                        type: 'Input',
                    },
                    {
                        name: 'S3_VECTOR_REGION',
                        description: 'Specifies the AWS region where the S3 Vector Bucket is hosted.',
                        type: 'Input',
                    },
                ],
            },
        ],
    },
    {
        category: 'RAG Content Extraction Engine',
        items: [
            {
                name: 'CONTENT_EXTRACTION_ENGINE',
                description: 'Sets the content extraction engine to use for document ingestion.',
                type: 'DropDown',
                values: ['', 'external', 'tika', 'docling', 'document_intelligence', 'mistral_ocr'],
            },
            {
                name: 'MISTRAL_OCR_API_KEY',
                description: 'Specifies the Mistral OCR API key to use.',
                type: 'Input',
            },
            {
                name: 'EXTERNAL_DOCUMENT_LOADER_URL',
                description: 'Sets the URL for the external document loader service.',
                type: 'Input',
            },
            {
                name: 'EXTERNAL_DOCUMENT_LOADER_API_KEY',
                description: 'Sets the API key for authenticating with the external document loader service.',
                type: 'Input',
            },
            {
                name: 'TIKA_SERVER_URL',
                description: 'Sets the URL for the Apache Tika server.',
                type: 'Input',
                defaultValue: 'http://localhost:9998',
            },
            {
                name: 'DOCLING_SERVER_URL',
                description: 'Specifies the URL for the Docling server. Requires Docling version 1.0.0 or later.',
                type: 'Input',
                defaultValue: 'http://docling:5001',
            },
            {
                name: 'DOCLING_OCR_ENGINE',
                description: 'Specifies the OCR engine used by Docling.',
                type: 'Input',
                defaultValue: 'tesseract',
            },
            {
                name: 'DOCLING_OCR_LANG',
                description: 'Specifies the OCR language(s) to be used with the configured `DOCLING_OCR_ENGINE`.',
                type: 'Input',
                defaultValue: 'eng,fra,deu,spa',
            },
        ],
    },
    {
        category: 'Retrieval Augmented Generation (RAG)',
        items: [
            {
                name: 'RAG_EMBEDDING_ENGINE',
                description: 'Selects an embedding engine to use for RAG.',
                type: 'DropDown',
                values: ['', 'ollama', 'openai'],
            },
            {
                name: 'RAG_EMBEDDING_MODEL',
                description: 'Sets a model for embeddings. Locally, a Sentence-Transformer model is used.',
                type: 'Input',
                defaultValue: 'sentence-transformers/all-MiniLM-L6-v2',
            },
            {
                name: 'ENABLE_RAG_HYBRID_SEARCH',
                description: 'Enables the use of ensemble search with `BM25` + `ChromaDB`, with reranking using `sentence_transformers` models.',
                type: 'CheckBox',
            },
            {
                name: 'RAG_TOP_K',
                description: 'Sets the default number of results to consider for the embedding when using RAG.',
                type: 'Input',
                defaultValue: 3,
            },
            {
                name: 'RAG_TOP_K_RERANKER',
                description: 'Sets the default number of results to consider for the reranker when using RAG.',
                type: 'Input',
                defaultValue: 3,
            },
            {
                name: 'RAG_RELEVANCE_THRESHOLD',
                description: 'Sets the relevance threshold to consider for documents when used with reranking.',
                type: 'Input',
                defaultValue: 0.0,
            },
            {
                name: 'RAG_HYBRID_BM25_WEIGHT',
                description: 'Sets the weight given to the keyword search (BM25) during hybrid search. 1 means only keyword serach, 0 means only vector search.',
                type: 'Input',
                defaultValue: 0.5,
            },
            {
                name: 'RAG_TEMPLATE',
                description: 'Template to use when injecting RAG documents into chat completion',
                type: 'Input',
            },
            {
                name: 'RAG_TEXT_SPLITTER',
                description: 'Sets the text splitter for RAG models.',
                type: 'DropDown',
                values: ['character', 'token'],
                defaultValue: 'character',
            },
            {
                name: 'TIKTOKEN_CACHE_DIR',
                description: 'Sets the directory for TikToken cache.',
                type: 'Input',
                defaultValue: '{CACHE_DIR}/tiktoken',
            },
            {
                name: 'TIKTOKEN_ENCODING_NAME',
                description: 'Sets the encoding name for TikToken.',
                type: 'Input',
                defaultValue: 'cl100k_base',
            },
            {
                name: 'CHUNK_SIZE',
                description: 'Sets the document chunk size for embeddings.',
                type: 'Input',
                defaultValue: 1000,
            },
            {
                name: 'CHUNK_OVERLAP',
                description: 'Specifies how much overlap there should be between chunks.',
                type: 'Input',
                defaultValue: 100,
            },
            {
                name: 'PDF_EXTRACT_IMAGES',
                description: 'Extracts images from PDFs using OCR when loading documents.',
                type: 'CheckBox',
            },
            {
                name: 'RAG_FILE_MAX_SIZE',
                description: 'Sets the maximum size of a file in megabytes that can be uploaded for document ingestion.',
                type: 'Input',
            },
            {
                name: 'RAG_FILE_MAX_COUNT',
                description: 'Sets the maximum number of files that can be uploaded at once for document ingestion.',
                type: 'Input',
            },
            {
                name: 'RAG_ALLOWED_FILE_EXTENSIONS',
                description: 'Specifies which file extensions are permitted for upload.',
                type: 'Input',
            },
            {
                name: 'RAG_RERANKING_MODEL',
                description: 'Sets a model for reranking results. Locally, a Sentence-Transformer model is used.',
                type: 'Input',
            },
            {
                name: 'RAG_OPENAI_API_BASE_URL',
                description: 'Sets the OpenAI base API URL to use for RAG embeddings.',
                type: 'Input',
                defaultValue: '${OPENAI_API_BASE_URL}',
            },
            {
                name: 'RAG_OPENAI_API_KEY',
                description: 'Sets the OpenAI API key to use for RAG embeddings.',
                type: 'Input',
                defaultValue: '${OPENAI_API_KEY}',
            },
            {
                name: 'RAG_EMBEDDING_OPENAI_BATCH_SIZE',
                description: 'Sets the batch size for OpenAI embeddings.',
                type: 'Input',
                defaultValue: 1,
            },
            {
                name: 'RAG_EMBEDDING_BATCH_SIZE',
                description: 'Sets the batch size for embedding in RAG (Retrieval-Augmented Generator) models.',
                type: 'Input',
                defaultValue: 1,
            },
            {
                name: 'RAG_OLLAMA_API_KEY',
                description: 'Sets the API key for Ollama API used in RAG models.',
                type: 'Input',
            },
            {
                name: 'RAG_OLLAMA_BASE_URL',
                description: 'Sets the base URL for Ollama API used in RAG models.',
                type: 'Input',
            },
            {
                name: 'ENABLE_RETRIEVAL_QUERY_GENERATION',
                description: 'Enables or disables retrieval query generation.',
                type: 'CheckBox',
            },
            {
                name: 'QUERY_GENERATION_PROMPT_TEMPLATE',
                description: 'Sets the prompt template for query generation.',
                type: 'Input',
            },
            {
                name: 'BYPASS_EMBEDDING_AND_RETRIEVAL',
                description: 'Bypasses the embedding and retrieval process.',
                type: 'CheckBox',
            },
            {
                name: 'DOCUMENT_INTELLIGENCE_ENDPOINT',
                description: 'Specifies the endpoint for document intelligence.',
                type: 'Input',
            },
            {
                name: 'DOCUMENT_INTELLIGENCE_KEY',
                description: 'Specifies the key for document intelligence.',
                type: 'Input',
            },
            {
                name: 'ENABLE_RAG_LOCAL_WEB_FETCH',
                description: 'Enables or disables local web fetch for RAG.',
                type: 'CheckBox',
            },
            {
                name: 'RAG_EMBEDDING_CONTENT_PREFIX',
                description: 'Specifies the prefix for the RAG embedding content.',
                type: 'Input',
            },
            {
                name: 'RAG_EMBEDDING_PREFIX_FIELD_NAME',
                description: 'Specifies the field name for the RAG embedding prefix.',
                type: 'Input',
            },
            {
                name: 'RAG_EMBEDDING_QUERY_PREFIX',
                description: 'Specifies the prefix for the RAG embedding query.',
                type: 'Input',
            },
            {
                name: 'RAG_FULL_CONTEXT',
                description: 'Specifies whether to use the full context for RAG.',
                type: 'CheckBox',
            },
        ],
        sections: [
            {
                section: 'Google Drive',
                items: [
                    {
                        name: 'ENABLE_GOOGLE_DRIVE_INTEGRATION',
                        description: 'Enables or disables Google Drive integration. If set to true, and `GOOGLE_DRIVE_CLIENT_ID` & `GOOGLE_DRIVE_API_KEY` are both configured, Google Drive will appear as an upload option in the chat UI.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'GOOGLE_DRIVE_CLIENT_ID',
                        description: 'Sets the client ID for Google Drive (client must be configured with Drive API and Picker API enabled).',
                        type: 'Input',
                    },
                    {
                        name: 'GOOGLE_DRIVE_API_KEY',
                        description: 'Sets the API key for Google Drive integration.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'OneDrive',
                items: [
                    {
                        name: 'ENABLE_ONEDRIVE_INTEGRATION',
                        description: 'Enables or disables OneDrive integration.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ONEDRIVE_CLIENT_ID',
                        description: 'Specifies the client ID for OneDrive integration.',
                        type: 'Input',
                    },
                    {
                        name: 'ONEDRIVE_SHAREPOINT_URL',
                        description: 'Specifies the SharePoint site URL for OneDrive integration e.g. https://companyname.sharepoint.com.',
                        type: 'Input',
                    },
                    {
                        name: 'ONEDRIVE_SHAREPOINT_TENANT_ID',
                        description: 'Specifies the SharePoint tenant ID for OneDrive integration.',
                        type: 'Input',
                    },
                ],
            },
        ],
    },
    {
        category: 'Web Search',
        items: [
            {
                name: 'ENABLE_WEB_SEARCH',
                description: 'Enable web search toggle.',
                type: 'CheckBox',
            },
            {
                name: 'ENABLE_SEARCH_QUERY_GENERATION',
                description: 'Enables or disables search query generation.',
                type: 'CheckBox',
            },
            {
                name: 'WEB_SEARCH_TRUST_ENV',
                description: 'Enables proxy set by `http_proxy` and `https_proxy` during web search content fetching.',
                type: 'CheckBox',
            },
            {
                name: 'WEB_SEARCH_RESULT_COUNT',
                description: 'Maximum number of search results to crawl.',
                type: 'Input',
                defaultValue: 3,
            },
            {
                name: 'WEB_LOADER_CONCURRENT_REQUESTS',
                description: 'Specifies the number of concurrent requests used by the web loader to fetch content from web pages returned by search results. This directly impacts how many pages can be crawled simultaneously.',
                type: 'Input',
                defaultValue: 10,
            },
            {
                name: 'WEB_SEARCH_ENGINE',
                description: 'Specifies the search engine to use.',
                type: 'DropDown',
                values: [
                    'searxng',
                    'google_pse',
                    'brave',
                    'kagi',
                    'mojeek',
                    'bocha',
                    'serpstack',
                    'serper',
                    'serply',
                    'searchapi',
                    'serpapi',
                    'duckduckgo',
                    'tavily',
                    'jina',
                    'bing',
                    'exa',
                    'perplexity',
                    'sougou',
                ],
            },
            {
                name: 'BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL',
                description: 'Bypasses the web search embedding and retrieval process.',
                type: 'CheckBox',
            },
            {
                name: 'SEARXNG_QUERY_URL',
                description: 'The [SearXNG search API](https://docs.searxng.org/dev/search_api.html) URL supporting JSON output. `<query>` is replaced with the search query. Example: `http://searxng.local/search?q=<query>`',
                type: 'Input',
            },
            {
                name: 'GOOGLE_PSE_API_KEY',
                description: 'Sets the API key for the Google Programmable Search Engine (PSE) service.',
                type: 'Input',
            },
            {
                name: 'GOOGLE_PSE_ENGINE_ID',
                description: 'The engine ID for the Google Programmable Search Engine (PSE) service.',
                type: 'Input',
            },
            {
                name: 'BRAVE_SEARCH_API_KEY',
                description: 'Sets the API key for the Brave Search API.',
                type: 'Input',
            },
            {
                name: 'KAGI_SEARCH_API_KEY',
                description: 'Sets the API key for Kagi Search API.',
                type: 'Input',
            },
            {
                name: 'MOJEEK_SEARCH_API_KEY',
                description: 'Sets the API key for Mojeek Search API.',
                type: 'Input',
            },
            {
                name: 'SERPSTACK_API_KEY',
                description: 'Sets the API key for Serpstack search API.',
                type: 'Input',
            },
            {
                name: 'SERPSTACK_HTTPS',
                description: 'Configures the use of HTTPS for Serpstack requests. Free tier requests are restricted to HTTP only.',
                type: 'CheckBox',
            },
            {
                name: 'SERPER_API_KEY',
                description: 'Sets the API key for Serper search API.',
                type: 'Input',
            },
            {
                name: 'SERPLY_API_KEY',
                description: 'Sets the API key for Serply search API.',
                type: 'Input',
            },
            {
                name: 'SEARCHAPI_API_KEY',
                description: 'Sets the API key for SearchAPI.',
                type: 'Input',
            },
            {
                name: 'SEARCHAPI_ENGINE',
                description: 'Sets the SearchAPI engine.',
                type: 'Input',
            },
            {
                name: 'TAVILY_API_KEY',
                description: 'Sets the API key for Tavily search API.',
                type: 'Input',
            },
            {
                name: 'JINA_API_KEY',
                description: 'Sets the API key for Jina.',
                type: 'Input',
            },
            {
                name: 'BING_SEARCH_V7_ENDPOINT',
                description: 'Sets the endpoint for Bing Search API.',
                type: 'Input',
            },
            {
                name: 'BING_SEARCH_V7_SUBSCRIPTION_KEY',
                description: 'Sets the subscription key for Bing Search API.',
                type: 'Input',
                defaultValue: 'https://api.bing.microsoft.com/v7.0/search',
            },
            {
                name: 'BOCHA_SEARCH_API_KEY',
                description: 'Sets the API key for Bocha Search API.',
                type: 'Input',
            },
            {
                name: 'EXA_API_KEY',
                description: 'Sets the API key for Exa search API.',
                type: 'Input',
            },
            {
                name: 'SERPAPI_API_KEY',
                description: 'Sets the API key for SerpAPI.',
                type: 'Input',
            },
            {
                name: 'SERPAPI_ENGINE',
                description: 'Specifies the search engine to use for SerpAPI.',
                type: 'Input',
            },
            {
                name: 'SOUGOU_API_SID',
                description: 'Sets the Sogou API SID.',
                type: 'Input',
            },
            {
                name: 'SOUGOU_API_SK',
                description: 'Sets the Sogou API SK.',
                type: 'Input',
            },
            {
                name: 'TAVILY_EXTRACT_DEPTH',
                description: 'Specifies the extract depth for Tavily search results.',
                type: 'Input',
                defaultValue: 'basic',
            },
        ],
        sections: [
            {
                section: 'Web Loader Configuration',
                items: [
                    {
                        name: 'WEB_LOADER_ENGINE',
                        description: 'Specifies the loader to use for retrieving and processing web content.',
                        type: 'DropDown',
                        values: ['requests', 'playwright'],
                        defaultValue: 'safe_web',
                    },
                    {
                        name: 'PLAYWRIGHT_WS_URL',
                        description: 'Specifies the WebSocket URI of a remote Playwright browser instance. When set, Open WebUI will use this remote browser instead of installing browser dependencies locally. This is particularly useful in containerized environments where you want to keep the Open WebUI container lightweight and separate browser concerns. Example: `ws://playwright:3000`',
                        type: 'Input',
                    },
                    {
                        name: 'FIRECRAWL_API_BASE_URL',
                        description: 'Sets the base URL for Firecrawl API.',
                        type: 'Input',
                        defaultValue: 'https://api.firecrawl.dev',
                    },
                    {
                        name: 'FIRECRAWL_API_KEY',
                        description: 'Sets the API key for Firecrawl API.',
                        type: 'Input',
                    },
                    {
                        name: 'PERPLEXITY_API_KEY',
                        description: 'Sets the API key for Perplexity API.',
                        type: 'Input',
                    },
                    {
                        name: 'PLAYWRIGHT_TIMEOUT',
                        description: 'Specifies the timeout for Playwright requests.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'YouTube Loader',
                items: [
                    {
                        name: 'YOUTUBE_LOADER_PROXY_URL',
                        description: 'Sets the proxy URL for YouTube loader.',
                        type: 'Input',
                    },
                    {
                        name: 'YOUTUBE_LOADER_LANGUAGE',
                        description: 'Comma-separated list of language codes to try when fetching YouTube video transcriptions, in priority order.',
                        type: 'Input',
                        defaultValue: 'en',
                    },
                ],
            },
        ],
    },
    {
        category: 'Audio',
        sections: [
            {
                section: 'Whisper Speech-to-Text (Local)',
                items: [
                    {
                        name: 'WHISPER_MODEL',
                        description: 'Sets the Whisper model to use for Speech-to-Text. The backend used is faster_whisper with quantization to `int8`.',
                        type: 'Input',
                        defaultValue: 'base',
                    },
                    {
                        name: 'WHISPER_MODEL_DIR',
                        description: 'Specifies the directory to store Whisper model files.',
                        type: 'Input',
                        defaultValue: '${DATA_DIR}/cache/whisper/models',
                    },
                    {
                        name: 'WHISPER_VAD_FILTER',
                        description: 'Specifies whether to apply a Voice Activity Detection (VAD) filter to Whisper Speech-to-Text.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'WHISPER_MODEL_AUTO_UPDATE',
                        description: 'Toggles automatic update of the Whisper model.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'WHISPER_LANGUAGE',
                        description: 'Specifies the ISO 639-1 language Whisper uses for STT (ISO 639-2 for Hawaiian and Cantonese). Whisper predicts the language by default.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Speech-to-Text (OpenAI)',
                items: [
                    {
                        name: 'AUDIO_STT_ENGINE',
                        description: 'Specifies the Speech-to-Text engine to use.',
                        type: 'DropDown',
                        values: ['', 'openai', 'deepgram', 'azure'],
                    },
                    {
                        name: 'AUDIO_STT_MODEL',
                        description: 'Specifies the Speech-to-Text model to use for OpenAI-compatible endpoints.',
                        type: 'Input',
                        defaultValue: 'whisper-1',
                    },
                    {
                        name: 'AUDIO_STT_OPENAI_API_BASE_URL',
                        description: 'Sets the OpenAI-compatible base URL to use for Speech-to-Text.',
                        type: 'Input',
                        defaultValue: '${OPENAI_API_BASE_URL}',
                    },
                    {
                        name: 'AUDIO_STT_OPENAI_API_KEY',
                        description: 'Sets the OpenAI API key to use for Speech-to-Text.',
                        type: 'Input',
                        defaultValue: '${OPENAI_API_KEY}',
                    },
                ],
            },
            {
                section: 'Speech-to-Text (Azure)',
                items: [
                    {
                        name: 'AUDIO_STT_AZURE_API_KEY',
                        description: 'Specifies the Azure API key to use for Speech-to-Text.',
                        type: 'Input',
                    },
                    {
                        name: 'AUDIO_STT_AZURE_REGION',
                        description: 'Specifies the Azure region to use for Speech-to-Text.',
                        type: 'Input',
                    },
                    {
                        name: 'AUDIO_STT_AZURE_LOCALES',
                        description: 'Specifies the locales to use for Azure Speech-to-Text.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Speech-to-Text (Deepgram)',
                items: [
                    {
                        name: 'DEEPGRAM_API_KEY',
                        description: 'Specifies the Deepgram API key to use for Speech-to-Text.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Text-to-Speech',
                items: [
                    {
                        name: 'AUDIO_TTS_API_KEY',
                        description: 'Sets the API key for Text-to-Speech.',
                        type: 'Input',
                    },
                    {
                        name: 'AUDIO_TTS_ENGINE',
                        description: 'Specifies the Text-to-Speech engine to use.',
                        type: 'DropDown',
                        values: ['', 'azure', 'elevenlabs', 'openai', 'transformers'],
                    },
                    {
                        name: 'AUDIO_TTS_MODEL',
                        description: 'Specifies the OpenAI text-to-speech model to use.',
                        type: 'Input',
                        defaultValue: 'tts-1',
                    },
                    {
                        name: 'AUDIO_TTS_VOICE',
                        description: 'Sets the OpenAI text-to-speech voice to use.',
                        type: 'Input',
                        defaultValue: 'alloy',
                    },
                    {
                        name: 'AUDIO_TTS_SPLIT_ON',
                        description: 'Sets the OpenAI text-to-speech split on to use.',
                        type: 'Input',
                        defaultValue: 'punctuation',
                    },
                ],
            },
            {
                section: 'Azure Text-to-Speech',
                items: [
                    {
                        name: 'AUDIO_TTS_AZURE_SPEECH_REGION',
                        description: 'Sets the region for Azure Text to Speech.',
                        type: 'Input',
                    },
                    {
                        name: 'AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT',
                        description: 'Sets the output format for Azure Text to Speech.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'OpenAI Text-to-Speech',
                items: [
                    {
                        name: 'AUDIO_TTS_OPENAI_API_BASE_URL',
                        description: 'Sets the OpenAI-compatible base URL to use for text-to-speech.',
                        type: 'Input',
                        defaultValue: '${OPENAI_API_BASE_URL}',
                    },
                    {
                        name: 'AUDIO_TTS_OPENAI_API_KEY',
                        description: 'Sets the API key to use for text-to-speech.',
                        type: 'Input',
                        defaultValue: '${OPENAI_API_KEY}',
                    },
                ],
            },
        ],
    },
    {
        category: 'Image Generation',
        sections: [
            {
                section: 'General',
                items: [
                    {
                        name: 'ENABLE_IMAGE_GENERATION',
                        description: 'Enables or disables image generation features.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'IMAGE_GENERATION_ENGINE',
                        description: 'Specifies the engine to use for image generation.',
                        type: 'DropDown',
                        values: ['openai', 'comfyui', 'automatic1111', 'gemini'],
                        defaultValue: 'openai',
                    },
                    {
                        name: 'ENABLE_IMAGE_PROMPT_GENERATION',
                        description: 'Enables or disables image prompt generation.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'IMAGE_PROMPT_GENERATION_PROMPT_TEMPLATE',
                        description: 'Specifies the template to use for generating image prompts.',
                        type: 'Input',
                    },
                    {
                        name: 'IMAGE_SIZE',
                        description: 'Sets the default image size to generate.',
                        type: 'Input',
                        defaultValue: '512x512',
                    },
                    {
                        name: 'IMAGE_STEPS',
                        description: 'Sets the default iteration steps for image generation. Used for ComfyUI and AUTOMATIC1111.',
                        type: 'Input',
                        defaultValue: 50,
                    },
                    {
                        name: 'IMAGE_GENERATION_MODEL',
                        description: 'Default model to use for image generation',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'AUTOMATIC1111',
                items: [
                    {
                        name: 'AUTOMATIC1111_BASE_URL',
                        description: "Specifies the URL to AUTOMATIC1111's Stable Diffusion API.",
                        type: 'Input',
                    },
                    {
                        name: 'AUTOMATIC1111_API_AUTH',
                        description: 'Sets the AUTOMATIC1111 API authentication.',
                        type: 'Input',
                    },
                    {
                        name: 'AUTOMATIC1111_CFG_SCALE',
                        description: 'Sets the scale for AUTOMATIC1111 inference.',
                        type: 'Input',
                    },
                    {
                        name: 'AUTOMATIC1111_SAMPLER',
                        description: 'Sets the sampler for AUTOMATIC1111 inference.',
                        type: 'Input',
                    },
                    {
                        name: 'AUTOMATIC1111_SCHEDULER',
                        description: 'Sets the scheduler for AUTOMATIC1111 inference.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'ComfyUI',
                items: [
                    {
                        name: 'COMFYUI_BASE_URL',
                        description: 'Specifies the URL to the ComfyUI image generation API.',
                        type: 'Input',
                    },
                    {
                        name: 'COMFYUI_API_KEY',
                        description: 'Sets the API key for ComfyUI.',
                        type: 'Input',
                    },
                    {
                        name: 'COMFYUI_WORKFLOW',
                        description: 'Sets the ComfyUI workflow.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Gemini',
                items: [
                    {
                        name: 'GEMINI_API_BASE_URL',
                        description: "Specifies the URL to Gemini's API.",
                        type: 'Input',
                    },
                    {
                        name: 'GEMINI_API_KEY',
                        description: 'Sets the Gemini API key.',
                        type: 'Input',
                    },
                    {
                        name: 'IMAGES_GEMINI_API_BASE_URL',
                        description: "Specifies the URL to Gemini's image generation API.",
                        type: 'Input',
                    },
                    {
                        name: 'IMAGES_GEMINI_API_KEY',
                        description: 'Sets the Gemini API key for image generation.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'OpenAI DALL-E',
                items: [
                    {
                        name: 'IMAGES_OPENAI_API_BASE_URL',
                        description: 'Sets the OpenAI-compatible base URL to use for DALL-E image generation.',
                        type: 'Input',
                        defaultValue: '${OPENAI_API_BASE_URL}',
                    },
                    {
                        name: 'IMAGES_OPENAI_API_KEY',
                        description: 'Sets the API key to use for DALL-E image generation.',
                        type: 'Input',
                        defaultValue: '${OPENAI_API_KEY}',
                    },
                ],
            },
        ],
    },
    {
        category: 'OAuth',
        sections: [
            {
                section: 'General',
                items: [
                    {
                        name: 'ENABLE_OAUTH_SIGNUP',
                        description: 'Enables account creation when signing up via OAuth. Distinct from `ENABLE_SIGNUP`.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ENABLE_OAUTH_PERSISTENT_CONFIG',
                        description: 'Controls whether OAuth-related settings are persisted in the database after the first launch.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'OAUTH_SUB_CLAIM',
                        description: "Overrides the default claim used to identify a user's unique ID (`sub`) from the OAuth/OIDC provider's user info response. By default, Open WebUI attempts to infer this from the provider's configuration. This variable allows you to explicitly specify which claim to use. For example, if your identity provider uses 'employee_id' as the unique identifier, you would set this variable to 'employee_id'.",
                        type: 'Input',
                    },
                    {
                        name: 'OAUTH_MERGE_ACCOUNTS_BY_EMAIL',
                        description: 'If enabled, merges OAuth accounts with existing accounts using the same email address. This is considered unsafe as not all OAuth providers will verify email addresses and can lead to potential account takeovers.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'OAUTH_UPDATE_PICTURE_ON_LOGIN',
                        description: 'If enabled, updates the local user profile picture with the OAuth-provided picture on login.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'WEBUI_AUTH_TRUSTED_EMAIL_HEADER',
                        description: 'Defines the trusted request header for authentication. See [SSO docs](/features/sso).',
                        type: 'Input',
                    },
                    {
                        name: 'WEBUI_AUTH_TRUSTED_NAME_HEADER',
                        description: 'Defines the trusted request header for the username of anyone registering with the `WEBUI_AUTH_TRUSTED_EMAIL_HEADER` header. See [SSO docs](/features/sso).',
                        type: 'Input',
                    },
                    {
                        name: 'WEBUI_AUTH_TRUSTED_GROUPS_HEADER',
                        description: 'Defines the trusted request header containing a comma-separated list of group memberships for the user when using trusted header authentication. See [SSO docs](/features/sso).',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Google',
                items: [
                    {
                        name: 'GOOGLE_CLIENT_ID',
                        description: 'Sets the client ID for Google OAuth.',
                        type: 'Input',
                    },
                    {
                        name: 'GOOGLE_CLIENT_SECRET',
                        description: 'Sets the client secret for Google OAuth.',
                        type: 'Input',
                    },
                    {
                        name: 'GOOGLE_OAUTH_SCOPE',
                        description: 'Sets the scope for Google OAuth authentication.',
                        type: 'Input',
                        defaultValue: 'openid email profile',
                    },
                    {
                        name: 'GOOGLE_REDIRECT_URI',
                        description: 'Sets the redirect URI for Google OAuth.',
                        type: 'Input',
                        defaultValue: '<backend>/oauth/google/callback',
                    },
                ],
            },
            {
                section: 'Microsoft',
                items: [
                    {
                        name: 'MICROSOFT_CLIENT_ID',
                        description: 'Sets the client ID for Microsoft OAuth.',
                        type: 'Input',
                    },
                    {
                        name: 'MICROSOFT_CLIENT_SECRET',
                        description: 'Sets the client secret for Microsoft OAuth.',
                        type: 'Input',
                    },
                    {
                        name: 'MICROSOFT_CLIENT_TENANT_ID',
                        description: 'Sets the tenant ID for Microsoft OAuth.',
                        type: 'Input',
                    },
                    {
                        name: 'MICROSOFT_OAUTH_SCOPE',
                        description: 'Sets the scope for Microsoft OAuth authentication.',
                        type: 'Input',
                        defaultValue: 'openid email profile',
                    },
                    {
                        name: 'MICROSOFT_REDIRECT_URI',
                        description: 'Sets the redirect URI for Microsoft OAuth.',
                        type: 'Input',
                        defaultValue: '<backend>/oauth/microsoft/callback',
                    },
                ],
            },
            {
                section: 'GitHub',
                items: [
                    {
                        name: 'GITHUB_CLIENT_ID',
                        description: 'Sets the client ID for GitHub OAuth.',
                        type: 'Input',
                    },
                    {
                        name: 'GITHUB_CLIENT_SECRET',
                        description: 'Sets the client secret for GitHub OAuth.',
                        type: 'Input',
                    },
                    {
                        name: 'GITHUB_CLIENT_SCOPE',
                        description: 'Specifies the scope for GitHub OAuth authentication.',
                        type: 'Input',
                        defaultValue: 'user:email',
                    },
                    {
                        name: 'GITHUB_CLIENT_REDIRECT_URI',
                        description: 'Sets the redirect URI for GitHub OAuth.',
                        type: 'Input',
                        defaultValue: '<backend>/oauth/github/callback',
                    },
                ],
            },
            {
                section: 'OpenID (OIDC)',
                items: [
                    {
                        name: 'OAUTH_CLIENT_ID',
                        description: 'Sets the client ID for OIDC.',
                        type: 'Input',
                    },
                    {
                        name: 'OAUTH_CLIENT_SECRET',
                        description: 'Sets the client secret for OIDC.',
                        type: 'Input',
                    },
                    {
                        name: 'OPENID_PROVIDER_URL',
                        description: 'Path to the `.well-known/openid-configuration` endpoint',
                        type: 'Input',
                    },
                    {
                        name: 'OPENID_REDIRECT_URI',
                        description: 'Sets the redirect URI for OIDC',
                        type: 'Input',
                        defaultValue: '<backend>/oauth/oidc/callback',
                    },
                    {
                        name: 'OAUTH_SCOPES',
                        description: 'Sets the scope for OIDC authentication. `openid` and `email` are required.',
                        type: 'Input',
                        defaultValue: 'openid email profile',
                    },
                    {
                        name: 'OAUTH_CODE_CHALLENGE_METHOD',
                        description: 'Specifies the code challenge method for OAuth authentication.',
                        type: 'Input',
                    },
                    {
                        name: 'OAUTH_PROVIDER_NAME',
                        description: 'Sets the name for the OIDC provider.',
                        type: 'Input',
                        defaultValue: 'SSO',
                    },
                    {
                        name: 'OAUTH_USERNAME_CLAIM',
                        description: 'Set username claim for OpenID.',
                        type: 'Input',
                        defaultValue: 'name',
                    },
                    {
                        name: 'OAUTH_EMAIL_CLAIM',
                        description: 'Set email claim for OpenID.',
                        type: 'Input',
                        defaultValue: 'email',
                    },
                    {
                        name: 'OAUTH_PICTURE_CLAIM',
                        description: 'Set picture (avatar) claim for OpenID.',
                        type: 'Input',
                        defaultValue: 'picture',
                    },
                    {
                        name: 'OAUTH_GROUP_CLAIM',
                        description: 'Specifies the group claim for OAuth authentication.',
                        type: 'Input',
                        defaultValue: 'groups',
                    },
                    {
                        name: 'ENABLE_OAUTH_ROLE_MANAGEMENT',
                        description: 'Enables role management for OAuth delegation.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ENABLE_OAUTH_GROUP_MANAGEMENT',
                        description: 'Enables or disables OAuth group management.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'OAUTH_ROLES_CLAIM',
                        description: 'Sets the roles claim to look for in the OIDC token.',
                        type: 'Input',
                        defaultValue: 'roles',
                    },
                    {
                        name: 'OAUTH_ALLOWED_ROLES',
                        description: 'Sets the roles that are allowed access to the platform.',
                        type: 'Input',
                        defaultValue: 'user,admin',
                    },
                    {
                        name: 'OAUTH_ADMIN_ROLES',
                        description: 'Sets the roles that are considered administrators.',
                        type: 'Input',
                        defaultValue: 'admin',
                    },
                    {
                        name: 'OAUTH_ALLOWED_DOMAINS',
                        description: 'Specifies the allowed domains for OAuth authentication. (e.g. "example1.com,example2.com").',
                        type: 'Input',
                        defaultValue: '*',
                    },
                ],
            },
        ],
    },
    {
        category: 'LDAP',
        items: [
            {
                name: 'ENABLE_LDAP',
                description: 'Enables or disables LDAP authentication.',
                type: 'CheckBox',
            },
            {
                name: 'LDAP_SERVER_LABEL',
                description: 'Sets the label of the LDAP server.',
                type: 'Input',
            },
            {
                name: 'LDAP_SERVER_HOST',
                description: 'Sets the hostname of the LDAP server.',
                type: 'Input',
                defaultValue: 'localhost',
            },
            {
                name: 'LDAP_SERVER_PORT',
                description: 'Sets the port number of the LDAP server.',
                type: 'Input',
                defaultValue: 389,
            },
            {
                name: 'LDAP_ATTRIBUTE_FOR_MAIL',
                description: 'Sets the attribute to use as mail for LDAP authentication.',
                type: 'Input',
            },
            {
                name: 'LDAP_ATTRIBUTE_FOR_USERNAME',
                description: 'Sets the attribute to use as a username for LDAP authentication.',
                type: 'Input',
            },
            {
                name: 'LDAP_APP_DN',
                description: 'Sets the distinguished name for the LDAP application.',
                type: 'Input',
            },
            {
                name: 'LDAP_APP_PASSWORD',
                description: 'Sets the password for the LDAP application.',
                type: 'Input',
            },
            {
                name: 'LDAP_SEARCH_BASE',
                description: 'Sets the base to search for LDAP authentication.',
                type: 'Input',
            },
            {
                name: 'LDAP_SEARCH_FILTER',
                description: 'Sets a single filter to use for LDAP search. Alternative to `LDAP_SEARCH_FILTERS`.',
                type: 'Input',
            },
            {
                name: 'LDAP_SEARCH_FILTERS',
                description: 'Sets the filter to use for LDAP search.',
                type: 'Input',
            },
            {
                name: 'LDAP_USE_TLS',
                description: 'Enables or disables TLS for LDAP connection.',
                type: 'CheckBox',
            },
            {
                name: 'LDAP_CA_CERT_FILE',
                description: 'Sets the path to the LDAP CA certificate file.',
                type: 'Input',
            },
            {
                name: 'LDAP_VALIDATE_CERT',
                description: 'Sets whether to validate the LDAP CA certificate.',
                type: 'CheckBox',
            },
            {
                name: 'LDAP_CIPHERS',
                description: 'Sets the ciphers to use for LDAP connection.',
                type: 'Input',
                defaultValue: 'ALL',
            },
            {
                name: 'ENABLE_LDAP_GROUP_MANAGEMENT',
                description: 'Enables the group management feature.',
                type: 'CheckBox',
            },
            {
                name: 'ENABLE_LDAP_GROUP_CREATION',
                description: 'If a group from LDAP does not exist in Open WebUI, it will be created automatically.',
                type: 'CheckBox',
            },
            {
                name: 'LDAP_ATTRIBUTE_FOR_GROUPS',
                description: "Specifies the LDAP attribute that contains the user's group memberships. `memberOf` is a standard attribute for this purpose in Active Directory environments.",
                type: 'Input',
                defaultValue: 'memberOf',
            },
        ],
    },
    {
        category: 'SCIM',
        items: [
            {
                name: 'SCIM_ENABLED',
                description: 'Enables or disables SCIM 2.0 (System for Cross-domain Identity Management) support for automated user and group provisioning from identity providers like Okta, Azure AD, and Google Workspace.',
                type: 'CheckBox',
            },
            {
                name: 'SCIM_TOKEN',
                description: 'Sets the bearer token for SCIM authentication. This token must be provided by identity providers when making SCIM API requests. Generate a secure random token (e.g., using `openssl rand -base64 32`) and configure it in both Open WebUI and your identity provider.',
                type: 'Input',
            },
        ],
    },
    {
        category: 'User Permissions',
        sections: [
            {
                section: 'Chat Permissions',
                items: [
                    {
                        name: 'USER_PERMISSIONS_CHAT_CONTROLS',
                        description: 'Acts as a master switch to enable or disable the main "Controls" button and panel in the chat interface. **If this is set to False, users will not see the Controls button, and the granular permissions below will have no effect**.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_VALVES',
                        description: 'When `USER_PERMISSIONS_CHAT_CONTROLS` is enabled, this setting specifically controls the visibility of the "Valves" section within the chat controls panel.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_SYSTEM_PROMPT',
                        description: 'When `USER_PERMISSIONS_CHAT_CONTROLS` is enabled, this setting specifically controls the visibility of the customizable "System Prompt" section within the chat controls panel, folders and the user settings.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_PARAMS',
                        description: 'When `USER_PERMISSIONS_CHAT_CONTROLS` is enabled, this setting specifically controls the visibility of the "Advanced Parameters" section within the chat controls panel.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_FILE_UPLOAD',
                        description: 'Enables or disables user permission to upload files to chats.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_DELETE',
                        description: 'Enables or disables user permission to delete chats.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_EDIT',
                        description: 'Enables or disables user permission to edit chats.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_DELETE_MESSAGE',
                        description: 'Enables or disables user permission to delete individual messages within chats. This provides granular control over message deletion capabilities separate from full chat deletion.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_CONTINUE_RESPONSE',
                        description: 'Enables or disables user permission to continue AI responses. When disabled, users cannot use the "Continue Response" button, which helps prevent potential system prompt leakage through response continuation manipulation.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_REGENERATE_RESPONSE',
                        description: 'Enables or disables user permission to regenerate AI responses. Controls access to both the standard regenerate button and the guided regeneration menu.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_RATE_RESPONSE',
                        description: 'Enables or disables user permission to rate AI responses using the thumbs up/down feedback system. This controls access to the response rating functionality for evaluation and feedback collection.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_STT',
                        description: 'Enables or disables user permission to use Speech-to-Text in chats.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_TTS',
                        description: 'Enables or disables user permission to use Text-to-Speech in chats.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_CALL',
                        description: 'Enables or disables user permission to make calls in chats.',
                        type: 'Input',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_MULTIPLE_MODELS',
                        description: 'Enables or disables user permission to use multiple models in chats.',
                        type: 'Input',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_TEMPORARY',
                        description: 'Enables or disables user permission to create temporary chats.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_CHAT_TEMPORARY_ENFORCED',
                        description: 'Enables or disables enforced temporary chats for users.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Feature Permissions',
                items: [
                    {
                        name: 'USER_PERMISSIONS_FEATURES_DIRECT_TOOL_SERVERS',
                        description: 'Enables or disables user permission to access direct tool servers.',
                        type: 'Input',
                    },
                    {
                        name: 'USER_PERMISSIONS_FEATURES_WEB_SEARCH',
                        description: 'Enables or disables user permission to use the web search feature.',
                        type: 'Input',
                    },
                    {
                        name: 'USER_PERMISSIONS_FEATURES_IMAGE_GENERATION',
                        description: 'Enables or disables user permission to use the image generation feature.',
                        type: 'Input',
                    },
                    {
                        name: 'USER_PERMISSIONS_FEATURES_CODE_INTERPRETER',
                        description: 'Enables or disables user permission to use code interpreter feature.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Workspace Permissions',
                items: [
                    {
                        name: 'USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS',
                        description: 'Enables or disables user permission to access workspace models.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS',
                        description: 'Enables or disables user permission to access workspace knowledge.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_WORKSPACE_PROMPTS_ACCESS',
                        description: 'Enables or disables user permission to access workspace prompts.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_WORKSPACE_TOOLS_ACCESS',
                        description: 'Enables or disables user permission to access workspace tools.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'USER_PERMISSIONS_WORKSPACE_MODELS_ALLOW_PUBLIC_SHARING',
                        description: 'Enables or disables public sharing of workspace models.',
                        type: 'Input',
                    },
                    {
                        name: 'USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ALLOW_PUBLIC_SHARING',
                        description: 'Enables or disables public sharing of workspace knowledge.',
                        type: 'Input',
                    },
                    {
                        name: 'USER_PERMISSIONS_WORKSPACE_PROMPTS_ALLOW_PUBLIC_SHARING',
                        description: 'Enables or disables public sharing of workspace prompts.',
                        type: 'Input',
                    },
                    {
                        name: 'USER_PERMISSIONS_WORKSPACE_TOOLS_ALLOW_PUBLIC_SHARING',
                        description: 'Enables or disables public sharing of workspace tools.',
                        type: 'Input',
                    },
                ],
            },
        ],
    },
    {
        category: 'Misc Environment Variables',
        sections: [
            {
                section: 'Cloud Storage',
                items: [
                    {
                        name: 'STORAGE_PROVIDER',
                        description: 'Sets the storage provider.',
                        type: 'DropDown',
                        values: ['s3', 'gcs', 'azure'],
                    },
                ],
            },
            {
                section: 'Amazon S3 Storage',
                items: [
                    {
                        name: 'S3_ACCESS_KEY_ID',
                        description: 'Sets the access key ID for S3 storage.',
                        type: 'Input',
                    },
                    {
                        name: 'S3_ADDRESSING_STYLE',
                        description: "Specifies the addressing style to use for S3 storage (e.g., 'path', 'virtual').",
                        type: 'Input',
                    },
                    {
                        name: 'S3_BUCKET_NAME',
                        description: 'Sets the bucket name for S3 storage.',
                        type: 'Input',
                    },
                    {
                        name: 'S3_ENDPOINT_URL',
                        description: 'Sets the endpoint URL for S3 storage.',
                        type: 'Input',
                    },
                    {
                        name: 'S3_KEY_PREFIX',
                        description: 'Sets the key prefix for a S3 object.',
                        type: 'Input',
                    },
                    {
                        name: 'S3_REGION_NAME',
                        description: 'Sets the region name for S3 storage.',
                        type: 'Input',
                    },
                    {
                        name: 'S3_SECRET_ACCESS_KEY',
                        description: 'Sets the secret access key for S3 storage.',
                        type: 'Input',
                    },
                    {
                        name: 'S3_USE_ACCELERATE_ENDPOINT',
                        description: 'Specifies whether to use the accelerated endpoint for S3 storage.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'S3_ENABLE_TAGGING',
                        description: 'Enables S3 object tagging after uploads for better organization, searching, and integration with file management policies. Always set to `False` when using Cloudflare R2, as R2 does not support object tagging.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Google Cloud Storage',
                items: [
                    {
                        name: 'GOOGLE_APPLICATION_CREDENTIALS_JSON',
                        description: 'Contents of Google Application Credentials JSON file.',
                        type: 'Input',
                    },
                    {
                        name: 'GCS_BUCKET_NAME',
                        description: 'Sets the bucket name for Google Cloud Storage. Bucket must already exist.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Microsoft Azure Storage',
                items: [
                    {
                        name: 'AZURE_STORAGE_ENDPOINT',
                        description: 'Sets the endpoint URL for Azure Storage.',
                        type: 'Input',
                    },
                    {
                        name: 'AZURE_STORAGE_CONTAINER_NAME',
                        description: 'Sets the container name for Azure Storage.',
                        type: 'Input',
                    },
                    {
                        name: 'AZURE_STORAGE_KEY',
                        description: 'Set the access key for Azure Storage.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'OpenTelemetry Configuration',
                items: [
                    {
                        name: 'ENABLE_OTEL',
                        description: 'Enables or disables OpenTelemetry for observability. When enabled, tracing, metrics, and logging data can be collected and exported to an OTLP endpoint.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ENABLE_OTEL_METRICS',
                        description: 'Enables or disables OpenTelemetry metrics collection and export. This variable works in conjunction with `ENABLE_OTEL`.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ENABLE_OTEL_LOGS',
                        description: 'Enables or disables OpenTelemetry logging export. When enabled, application logs are sent to the configured OTLP endpoint. This variable works in conjunction with `ENABLE_OTEL`.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'OTEL_EXPORTER_OTLP_ENDPOINT',
                        description: 'Specifies the default OTLP (OpenTelemetry Protocol) endpoint for exporting traces, metrics, and logs. This can be overridden for metrics if `OTEL_METRICS_EXPORTER_OTLP_ENDPOINT` is set, and for logs if `OTEL_LOGS_EXPORTER_OTLP_ENDPOINT` is set.',
                        type: 'Input',
                        defaultValue: 'http://localhost:4317',
                    },
                    {
                        name: 'OTEL_METRICS_EXPORTER_OTLP_ENDPOINT',
                        description: 'Specifies the dedicated OTLP endpoint for exporting OpenTelemetry metrics. If not set, it defaults to the value of `OTEL_EXPORTER_OTLP_ENDPOINT`. This is useful when separate endpoints for traces and metrics are used.',
                        type: 'Input',
                    },
                    {
                        name: 'OTEL_LOGS_EXPORTER_OTLP_ENDPOINT',
                        description: 'Specifies the dedicated OTLP endpoint for exporting OpenTelemetry logs. If not set, it defaults to the value of `OTEL_EXPORTER_OTLP_ENDPOINT`. This is useful when separate endpoints for logs, traces, and metrics are used.',
                        type: 'Input',
                    },
                    {
                        name: 'OTEL_EXPORTER_OTLP_INSECURE',
                        description: 'If set to `True`, the OTLP exporter will use an insecure connection (e.g., HTTP for gRPC) for traces. For metrics, its behavior is governed by `OTEL_METRICS_EXPORTER_OTLP_INSECURE`, and for logs by `OTEL_LOGS_EXPORTER_OTLP_INSECURE`.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'OTEL_METRICS_EXPORTER_OTLP_INSECURE',
                        description: 'If set to `True`, the OTLP exporter will use an insecure connection for metrics. If not specified, it uses the value of `OTEL_EXPORTER_OTLP_INSECURE`.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'OTEL_LOGS_EXPORTER_OTLP_INSECURE',
                        description: 'If set to `True`, the OTLP exporter will use an insecure connection for logs. If not specified, it uses the value of `OTEL_EXPORTER_OTLP_INSECURE`.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'OTEL_SERVICE_NAME',
                        description: 'Sets the service name that will be reported to your OpenTelemetry collector or observability platform. This helps identify your Open WebUI instance.',
                        type: 'Input',
                        defaultValue: 'open-webui',
                    },
                    {
                        name: 'OTEL_RESOURCE_ATTRIBUTES',
                        description: 'Allows you to define additional resource attributes to be attached to all telemetry data, in a comma-separated `key1=val1,key2=val2` format.',
                        type: 'Input',
                    },
                    {
                        name: 'OTEL_TRACES_SAMPLER',
                        description: 'Configures the sampling strategy for OpenTelemetry traces. This determines which traces are collected and exported to reduce data volume.',
                        type: 'Input',
                        defaultValue: 'parentbased_always_on',
                    },
                    {
                        name: 'OTEL_BASIC_AUTH_USERNAME',
                        description: 'Sets the username for basic authentication with the default OTLP endpoint. This applies to traces, and by default, to metrics and logs unless overridden by their specific authentication variables.',
                        type: 'Input',
                    },
                    {
                        name: 'OTEL_BASIC_AUTH_PASSWORD',
                        description: 'Sets the password for basic authentication with the default OTLP endpoint. This applies to traces, and by default, to metrics and logs unless overridden by their specific authentication variables.',
                        type: 'Input',
                    },
                    {
                        name: 'OTEL_METRICS_BASIC_AUTH_USERNAME',
                        description: 'Sets the username for basic authentication specifically for the OTLP metrics endpoint. If not specified, it uses the value of `OTEL_BASIC_AUTH_USERNAME`.',
                        type: 'Input',
                    },
                    {
                        name: 'OTEL_METRICS_BASIC_AUTH_PASSWORD',
                        description: 'Sets the password for basic authentication specifically for the OTLP metrics endpoint. If not specified, it uses the value of `OTEL_BASIC_AUTH_PASSWORD`.',
                        type: 'Input',
                    },
                    {
                        name: 'OTEL_LOGS_BASIC_AUTH_USERNAME',
                        description: 'Sets the username for basic authentication specifically for the OTLP logs endpoint. If not specified, it uses the value of `OTEL_BASIC_AUTH_USERNAME`.',
                        type: 'Input',
                    },
                    {
                        name: 'OTEL_LOGS_BASIC_AUTH_PASSWORD',
                        description: 'Sets the password for basic authentication specifically for the OTLP logs endpoint. If not specified, it uses the value of `OTEL_BASIC_AUTH_PASSWORD`.',
                        type: 'Input',
                    },
                    {
                        name: 'OTEL_OTLP_SPAN_EXPORTER',
                        description: 'Specifies the default protocol for exporting OpenTelemetry traces (gRPC or HTTP). This can be overridden for metrics if `OTEL_METRICS_OTLP_SPAN_EXPORTER` is set, and for logs if `OTEL_LOGS_OTLP_SPAN_EXPORTER` is set.',
                        type: 'DropDown',
                        values: ['grpc', 'http'],
                        defaultValue: 'grpc',
                    },
                    {
                        name: 'OTEL_METRICS_OTLP_SPAN_EXPORTER',
                        description: 'Specifies the protocol for exporting OpenTelemetry metrics (gRPC or HTTP). If not specified, it uses the value of `OTEL_OTLP_SPAN_EXPORTER`.',
                        type: 'DropDown',
                        values: ['grpc', 'http'],
                    },
                    {
                        name: 'OTEL_LOGS_OTLP_SPAN_EXPORTER',
                        description: 'Specifies the protocol for exporting OpenTelemetry logs (gRPC or HTTP). If not specified, it uses the value of `OTEL_OTLP_SPAN_EXPORTER`.',
                        type: 'DropDown',
                        values: ['grpc', 'http'],
                    },
                ],
            },
            {
                section: 'Database Pool',
                items: [
                    {
                        name: 'DATABASE_URL',
                        description: 'Specifies the database URL to connect to.',
                        type: 'Input',
                        defaultValue: 'sqlite:///${DATA_DIR}/webui.db',
                    },
                    {
                        name: 'DATABASE_SCHEMA',
                        description: 'Specifies the database schema to connect to.',
                        type: 'Input',
                    },
                    {
                        name: 'DATABASE_POOL_SIZE',
                        description: 'Specifies the pooling strategy and size of the database pool.',
                        type: 'Input',
                    },
                    {
                        name: 'DATABASE_POOL_MAX_OVERFLOW',
                        description: 'Specifies the database pool max overflow.',
                        type: 'Input',
                        defaultValue: 0,
                    },
                    {
                        name: 'DATABASE_POOL_TIMEOUT',
                        description: 'Specifies the database pool timeout in seconds to get a connection.',
                        type: 'Input',
                        defaultValue: 30,
                    },
                    {
                        name: 'DATABASE_POOL_RECYCLE',
                        description: 'Specifies the database pool recycle time in seconds.',
                        type: 'Input',
                        defaultValue: 3600,
                    },
                    {
                        name: 'DATABASE_ENABLE_SQLITE_WAL',
                        description: 'Enables or disables SQLite WAL (Write-Ahead Logging) mode. When enabled, SQLite transactions can be managed more efficiently, allowing multiple readers and one writer concurrently, which can improve database performance, especially under high concurrency. **This setting only applies to SQLite databases.**',
                        type: 'CheckBox',
                    },
                    {
                        name: 'DATABASE_DEDUPLICATE_INTERVAL',
                        description: "Sets a time interval in seconds during which certain database write operations (e.g., updating a user's `last_active_at` timestamp) will be deduplicated. If a write operation is attempted within this interval for the same entity, it will be skipped. A value of `0.0` disables deduplication. Enabling this can reduce write conflicts and improve performance, but may result in less real-time accuracy for the affected fields.",
                        type: 'Input',
                        defaultValue: 0.0,
                    },
                ],
            },
            {
                section: 'Redis',
                items: [
                    {
                        name: 'REDIS_URL',
                        description: 'Specifies the URL of the Redis instance or cluster host for storing application state.',
                        type: 'Input',
                    },
                    {
                        name: 'REDIS_SENTINEL_HOSTS',
                        description: 'Comma-separated list of Redis Sentinels for app state. If specified, the "hostname" in `REDIS_URL` will be interpreted as the Sentinel service name.',
                        type: 'Input',
                    },
                    {
                        name: 'REDIS_SENTINEL_PORT',
                        description: 'Sentinel port for app state Redis.',
                        type: 'Input',
                        defaultValue: 26379,
                    },
                    {
                        name: 'REDIS_CLUSTER',
                        description: 'Connect to a Redis Cluster instead of a single instance or using Redis Sentinels. If `True`, `REDIS_URL` must also be defined.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'REDIS_KEY_PREFIX',
                        description: 'Customizes the Redis key prefix used for storing configuration values. This allows multiple Open WebUI instances to share the same Redis instance without key conflicts. When operating in Redis cluster mode, the prefix is formatted as `{prefix}:` (e.g., `{open-webui}:config:*`) to enable multi-key operations on configuration keys within the same hash slot.',
                        type: 'Input',
                        defaultValue: 'open-webui',
                    },
                    {
                        name: 'ENABLE_WEBSOCKET_SUPPORT',
                        description: 'Enables websocket support in Open WebUI.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'WEBSOCKET_MANAGER',
                        description: 'Specifies the websocket manager to use (in this case, Redis).',
                        type: 'Input',
                        defaultValue: 'redis',
                    },
                    {
                        name: 'WEBSOCKET_REDIS_URL',
                        description: 'Specifies the URL of the Redis instance or cluster host for websocket communication. It is distinct from `REDIS_URL` and in practice, it is recommended to set both.',
                        type: 'Input',
                        defaultValue: '${REDIS_URL}',
                    },
                    {
                        name: 'WEBSOCKET_SENTINEL_HOSTS',
                        description: 'Comma-separated list of Redis Sentinels for websocket. If specified, the "hostname" in `WEBSOCKET_REDIS_URL` will be interpreted as the Sentinel service name.',
                        type: 'Input',
                    },
                    {
                        name: 'WEBSOCKET_SENTINEL_PORT',
                        description: 'Sentinel port for websocket Redis.',
                        type: 'Input',
                        defaultValue: 26379,
                    },
                    {
                        name: 'WEBSOCKET_REDIS_CLUSTER',
                        description: 'Specifies that websocket should communicate with a Redis Cluster instead of a single instance or using Redis Sentinels. If `True`, `WEBSOCKET_REDIS_URL` and/or `REDIS_URL` must also be defined.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Uvicorn Settings',
                items: [
                    {
                        name: 'UVICORN_WORKERS',
                        description: 'Controls the number of worker processes that Uvicorn spawns to handle requests. Each worker runs its own instance of the application in a separate process.',
                        type: 'Input',
                        defaultValue: 1,
                    },
                ],
            },
            {
                section: 'Cache Settings',
                items: [
                    {
                        name: 'CACHE_CONTROL',
                        description: 'Sets the Cache-Control header for all HTTP responses. Supports standard directives like `public`, `private`, `no-cache`, `no-store`, `must-revalidate`, `max-age=seconds`, etc. If an invalid value is provided, defaults to `"no-store, max-age=0"` (no caching).',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Proxy Settings',
                items: [
                    {
                        name: 'http_proxy',
                        description: 'Sets the URL for the HTTP proxy.',
                        type: 'Input',
                    },
                    {
                        name: 'https_proxy',
                        description: 'Sets the URL for the HTTPS proxy.',
                        type: 'Input',
                    },
                    {
                        name: 'no_proxy',
                        description: 'Lists domain extensions (or IP addresses) for which the proxy should not be used, separated by commas.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Install Required Python Packages',
                items: [
                    {
                        name: 'PIP_OPTIONS',
                        description: 'Specifies additional command-line options that pip should use when installing packages. For example, you can include flags such as `--upgrade`, `--user`, or `--no-cache-dir` to control the installation process.',
                        type: 'Input',
                    },
                    {
                        name: 'PIP_PACKAGE_INDEX_OPTIONS',
                        description: 'Defines custom package index behavior for pip. This can include specifying additional or alternate index URLs (e.g., `--extra-index-url`), authentication credentials, or other parameters to manage how packages are retrieved from different locations.',
                        type: 'Input',
                    },
                ],
            },
        ],
    },
];

/* eslint max-len: 0 */
const geminiCliArguments = [
    {
        category: 'LynxHub Configuration',
        items: [
            {
                name: 'Settings File Location',
                description: '!!Please backup your existing settings.json, this will overwrite it!!. Choose a custom location to save your `settings.json` configuration file.',
                type: 'File',
            },
        ],
    },
    {
        category: 'Environment Variables',
        sections: [
            {
                section: 'Authentication & API',
                items: [
                    {
                        name: 'GEMINI_API_KEY',
                        description: 'Your API key for the Gemini API.',
                        type: 'Input',
                    },
                    {
                        name: 'GOOGLE_API_KEY',
                        description: 'Your Google Cloud API key, required for using Vertex AI in express mode.',
                        type: 'Input',
                    },
                    {
                        name: 'GOOGLE_CLOUD_PROJECT',
                        description: 'Your Google Cloud Project ID, required for using Code Assist or Vertex AI.',
                        type: 'Input',
                    },
                    {
                        name: 'GOOGLE_APPLICATION_CREDENTIALS',
                        description: 'The path to your Google Application Credentials JSON file.',
                        type: 'File',
                    },
                    {
                        name: 'GOOGLE_CLOUD_LOCATION',
                        description: 'Your Google Cloud Project Location (e.g., us-central1), required for using Vertex AI in non-express mode.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Configuration',
                items: [
                    {
                        name: 'GEMINI_MODEL',
                        description: 'Specifies the default Gemini model to use.',
                        type: 'Input',
                    },
                    {
                        name: 'GEMINI_SANDBOX',
                        description: 'Alternative to the `sandbox` setting. Accepts true, false, docker, podman, or a custom command string.',
                        type: 'Input',
                    },
                    {
                        name: 'SEATBELT_PROFILE',
                        description: 'Switches the Seatbelt (`sandbox-exec`) profile on macOS.',
                        type: 'DropDown',
                        defaultValue: 'permissive-open',
                        values: ['permissive-open', 'strict'],
                    },
                    {
                        name: 'CLI_TITLE',
                        description: 'Set a custom title for the CLI window.',
                        type: 'Input',
                    },
                    {
                        name: 'CODE_ASSIST_ENDPOINT',
                        description: 'Specifies the endpoint for the code assist server.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Telemetry',
                items: [
                    {
                        name: 'OTLP_GOOGLE_CLOUD_PROJECT',
                        description: 'Your Google Cloud Project ID for Telemetry in Google Cloud.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Debugging & Display',
                items: [
                    {
                        name: 'DEBUG',
                        description: 'Set to true or 1 to enable verbose debug logging.',
                        type: 'Input',
                    },
                    {
                        name: 'DEBUG_MODE',
                        description: 'Set to true or 1 to enable verbose debug logging.',
                        type: 'Input',
                    },
                    {
                        name: 'NO_COLOR',
                        description: 'Set to any value to disable all color output in the CLI.',
                        type: 'Input',
                    },
                ],
            },
        ],
    },
    {
        category: 'Command Line Arguments',
        sections: [
            {
                section: 'Core Functionality',
                items: [
                    {
                        name: '--model <model_name>',
                        description: 'Specifies the Gemini model to use for this session.',
                        type: 'Input',
                    },
                    {
                        name: '--prompt <your_prompt>',
                        description: 'Pass a prompt directly to the command for non-interactive mode.',
                        type: 'Input',
                    },
                    {
                        name: '--prompt-interactive <your_prompt>',
                        description: 'Starts an interactive session with the provided prompt as the initial input.',
                        type: 'Input',
                    },
                    {
                        name: '--all-files',
                        description: 'Recursively includes all files within the current directory as context.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--include-directories <dir1,dir2,...>',
                        description: 'Includes additional directories in the workspace for multi-directory support.',
                        type: 'Directory',
                    },
                ],
            },
            {
                section: 'Tool & Sandbox Control',
                items: [
                    {
                        name: '--sandbox',
                        description: 'Enables sandbox mode for this session.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--sandbox-image',
                        description: 'Sets the sandbox image URI.',
                        type: 'Input',
                    },
                    {
                        name: '--yolo',
                        description: 'Enables YOLO mode, which automatically approves all tool calls.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--approval-mode <mode>',
                        description: 'Sets the approval mode for tool calls.',
                        type: 'DropDown',
                        values: ['default', 'auto_edit', 'yolo'],
                    },
                    {
                        name: '--allowed-tools <tool1,tool2,...>',
                        description: 'A comma-separated list of tool names that will bypass the confirmation dialog.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Telemetry & Checkpointing',
                items: [
                    {
                        name: '--telemetry',
                        description: 'Enables telemetry.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--telemetry-target',
                        description: 'Sets the telemetry target.',
                        type: 'Input',
                    },
                    {
                        name: '--telemetry-otlp-endpoint',
                        description: 'Sets the OTLP endpoint for telemetry.',
                        type: 'Input',
                    },
                    {
                        name: '--telemetry-otlp-protocol',
                        description: 'Sets the OTLP protocol for telemetry.',
                        type: 'DropDown',
                        defaultValue: 'grpc',
                        values: ['grpc', 'http'],
                    },
                    {
                        name: '--telemetry-log-prompts',
                        description: 'Enables logging of prompts for telemetry.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--checkpointing',
                        description: 'Enables checkpointing.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Extensions & Display',
                items: [
                    {
                        name: '--extensions <extension_name ...>',
                        description: 'Specifies a list of extensions to use for the session.',
                        type: 'Input',
                    },
                    {
                        name: '--list-extensions',
                        description: 'Lists all available extensions and exits.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--proxy',
                        description: 'Sets the proxy for the CLI.',
                        type: 'Input',
                    },
                    {
                        name: '--screen-reader',
                        description: 'Enables screen reader mode for better TUI compatibility.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--show-memory-usage',
                        description: 'Displays the current memory usage.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Help & Version',
                items: [
                    {
                        name: '--debug',
                        description: 'Enables debug mode for this session, providing more verbose output.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--help',
                        description: 'Displays help information about command-line arguments.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--version',
                        description: 'Displays the version of the CLI.',
                        type: 'CheckBox',
                    },
                ],
            },
        ],
    },
    {
        category: 'Settings',
        condition: 'Settings File Location',
        sections: [
            {
                section: 'general',
                items: [
                    {
                        name: 'general.preferredEditor',
                        description: 'The preferred editor to open files in.',
                        type: 'Input',
                    },
                    {
                        name: 'general.vimMode',
                        description: 'Enable Vim keybindings.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'general.disableAutoUpdate',
                        description: 'Disable automatic updates.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'general.disableUpdateNag',
                        description: 'Disable update notification prompts.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'general.checkpointing.enabled',
                        description: 'Enable session checkpointing for recovery.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'ui',
                items: [
                    {
                        name: 'ui.theme',
                        description: 'The color theme for the UI.',
                        type: 'DropDown',
                        values: [
                            'ANSI',
                            'ANSI Light',
                            'Atom One',
                            'Ayu',
                            'Ayu Light',
                            'Default',
                            'Default Light',
                            'Dracula',
                            'GitHub',
                            'GitHub Light',
                            'Google Code',
                            'Xcode',
                        ],
                        defaultValue: 'Default',
                    },
                    {
                        name: 'ui.customThemes',
                        description: 'Custom theme definitions.',
                        type: 'Input',
                        defaultValue: {},
                    },
                    {
                        name: 'ui.hideWindowTitle',
                        description: 'Hide the window title bar.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ui.hideTips',
                        description: 'Hide helpful tips in the UI.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ui.hideBanner',
                        description: 'Hide the application banner.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ui.hideFooter',
                        description: 'Hide the footer from the UI.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ui.showMemoryUsage',
                        description: 'Display memory usage information in the UI.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ui.showLineNumbers',
                        description: 'Show line numbers in the chat.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ui.showCitations',
                        description: 'Show citations for generated text in the chat.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ui.accessibility.disableLoadingPhrases',
                        description: 'Disable loading phrases for accessibility.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'ide',
                items: [
                    {
                        name: 'ide.enabled',
                        description: 'Enable IDE integration mode.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'ide.hasSeenNudge',
                        description: 'Whether the user has seen the IDE integration nudge.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'privacy',
                items: [
                    {
                        name: 'privacy.usageStatisticsEnabled',
                        description: 'Enable collection of usage statistics.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'model',
                items: [
                    {
                        name: 'model.name',
                        description: 'The Gemini model to use for conversations.',
                        type: 'Input',
                    },
                    {
                        name: 'model.maxSessionTurns',
                        description: 'Maximum number of user/model/tool turns to keep in a session. -1 means unlimited.',
                        type: 'Input',
                        defaultValue: -1,
                    },
                    {
                        name: 'model.summarizeToolOutput',
                        description: 'Enables or disables the summarization of tool output.',
                        type: 'Input',
                    },
                    {
                        name: 'model.chatCompression.contextPercentageThreshold',
                        description: "Sets the threshold for chat history compression as a percentage of the model's total token limit.",
                        type: 'Input',
                        defaultValue: 0.7,
                    },
                    {
                        name: 'model.skipNextSpeakerCheck',
                        description: 'Skip the next speaker check.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'context',
                items: [
                    {
                        name: 'context.fileName',
                        description: 'The name of the context file(s).',
                        type: 'File',
                    },
                    {
                        name: 'context.importFormat',
                        description: 'The format to use when importing memory.',
                        type: 'Input',
                    },
                    {
                        name: 'context.discoveryMaxDirs',
                        description: 'Maximum number of directories to search for memory.',
                        type: 'Input',
                        defaultValue: 200,
                    },
                    {
                        name: 'context.includeDirectories',
                        description: 'Additional directories to include in the workspace context.',
                        type: 'Directory',
                        defaultValue: [],
                    },
                    {
                        name: 'context.loadFromIncludeDirectories',
                        description: 'If true, /memory refresh loads GEMINI.md from all added directories.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'context.fileFiltering.respectGitIgnore',
                        description: 'Respect .gitignore files when searching.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'context.fileFiltering.respectGeminiIgnore',
                        description: 'Respect .geminiignore files when searching.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'context.fileFiltering.enableRecursiveFileSearch',
                        description: 'Enable searching recursively for filenames when completing @ prefixes.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'tools',
                items: [
                    {
                        name: 'tools.sandbox',
                        description: 'Sandbox execution environment (can be a boolean or a path string).',
                        type: 'Input',
                    },
                    {
                        name: 'tools.usePty',
                        description: 'Use node-pty for shell command execution.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'tools.core',
                        description: 'Restricts the set of built-in tools with an allowlist.',
                        type: 'Input',
                    },
                    {
                        name: 'tools.exclude',
                        description: 'Tool names to exclude from discovery.',
                        type: 'Input',
                    },
                    {
                        name: 'tools.allowed',
                        description: 'A list of tool names that will bypass the confirmation dialog.',
                        type: 'Input',
                    },
                    {
                        name: 'tools.discoveryCommand',
                        description: 'Command to run for tool discovery.',
                        type: 'Input',
                    },
                    {
                        name: 'tools.callCommand',
                        description: 'Defines a custom shell command for calling a specific tool.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'mcp',
                items: [
                    {
                        name: 'mcp.serverCommand',
                        description: 'Command to start an MCP server.',
                        type: 'Input',
                    },
                    {
                        name: 'mcp.allowed',
                        description: 'An allowlist of MCP servers to allow.',
                        type: 'Input',
                    },
                    {
                        name: 'mcp.excluded',
                        description: 'A denylist of MCP servers to exclude.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'security',
                items: [
                    {
                        name: 'security.folderTrust.enabled',
                        description: 'Setting to track whether Folder trust is enabled.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'security.auth.selectedType',
                        description: 'The currently selected authentication type.',
                        type: 'Input',
                    },
                    {
                        name: 'security.auth.enforcedType',
                        description: 'The required auth type (useful for enterprises).',
                        type: 'Input',
                    },
                    {
                        name: 'security.auth.useExternal',
                        description: 'Whether to use an external authentication flow.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'advanced',
                items: [
                    {
                        name: 'advanced.autoConfigureMemory',
                        description: 'Automatically configure Node.js memory limits.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'advanced.dnsResolutionOrder',
                        description: 'The DNS resolution order.',
                        type: 'Input',
                    },
                    {
                        name: 'advanced.excludedEnvVars',
                        description: 'Environment variables to exclude from project context.',
                        type: 'Input',
                        defaultValue: ['DEBUG', 'DEBUG_MODE'],
                    },
                    {
                        name: 'advanced.bugCommand',
                        description: 'Configuration for the bug report command.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'telemetry',
                items: [
                    {
                        name: 'telemetry.enabled',
                        description: 'Whether or not telemetry is enabled.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'telemetry.target',
                        description: 'The destination for collected telemetry.',
                        type: 'DropDown',
                        values: ['local', 'gcp'],
                    },
                    {
                        name: 'telemetry.otlpEndpoint',
                        description: 'The endpoint for the OTLP Exporter.',
                        type: 'Input',
                    },
                    {
                        name: 'telemetry.otlpProtocol',
                        description: 'The protocol for the OTLP Exporter.',
                        type: 'DropDown',
                        values: ['grpc', 'http'],
                    },
                    {
                        name: 'telemetry.logPrompts',
                        description: 'Whether or not to include the content of user prompts in the logs.',
                        type: 'CheckBox',
                    },
                    {
                        name: 'telemetry.outfile',
                        description: 'The file to write telemetry to when target is local.',
                        type: 'File',
                    },
                ],
            },
        ],
    },
];

const INSTALL_TIME_KEY$2 = 'install-time-geminiCli';
const UPDATE_TIME_KEY$2 = 'update-time-geminiCli';
const UPDATE_AVAILABLE_KEY$2 = 'update-available-version-geminiCli';
function checkLinuxArgLine$2(line) {
    if (isWin && line.startsWith('set '))
        return 'set';
    if (line.startsWith('export '))
        return 'export';
    for (const arg of geminiCliArguments) {
        if (arg.category === 'Environment') {
            if (arg.sections[0].items.find(item => item.name === line.split('=')[0])) {
                return 'var';
            }
            else {
                return undefined;
            }
        }
    }
    return undefined;
}
/**
 * Finds the category and type of a given argument name.
 * @param argName The name of the argument to look up.
 * @returns An object with the category and type, or undefined if not found.
 */
function getArgumentInfo(argName) {
    for (const data of geminiCliArguments) {
        if ('sections' in data) {
            for (const section of data.sections) {
                for (const item of section.items) {
                    if (item.name.split(' ')[0] === argName) {
                        return { category: data.category, type: item.type };
                    }
                }
            }
        }
    }
    return undefined;
}
function parseArgsToFiles$1(args) {
    const executeCommand = 'gemini';
    const envArgs = [];
    const cliArgs = [];
    const settingsArgs = [];
    // 1. Categorize arguments based on their definition in Arguments.ts
    args.forEach(arg => {
        const info = getArgumentInfo(arg.name);
        if (info) {
            switch (info.category) {
                case 'Environment Variables':
                    envArgs.push(arg);
                    break;
                case 'Command Line Arguments':
                    cliArgs.push(arg);
                    break;
                case 'Settings':
                    settingsArgs.push(arg);
                    break;
            }
        }
    });
    // 2. Build the Environment Variables script preview
    let scriptString = '';
    if (envArgs.length > 0) {
        envArgs.forEach(arg => {
            scriptString += isWin ? `set ${arg.name}=${arg.value}\n` : `export ${arg.name}="${arg.value}"\n`;
        });
        scriptString += '\n\n';
    }
    scriptString += executeCommand;
    // 3. Build the Command Line execution preview
    cliArgs.forEach(arg => {
        const info = getArgumentInfo(arg.name);
        if (info?.type === 'CheckBox') {
            if (arg.value === 'true') {
                scriptString += ` ${arg.name}`;
            }
        }
        else {
            scriptString += ` ${arg.name} "${arg.value}"`;
        }
    });
    scriptString += '\n';
    // 4. Build the settings.json file preview
    let settingsString = '';
    const settingsJson = {};
    if (settingsArgs.length > 0) {
        settingsArgs.forEach(arg => {
            const keys = arg.name.split('.');
            let current = settingsJson;
            // Create nested objects if they don't exist
            keys.slice(0, -1).forEach(key => {
                current[key] = current[key] || {};
                current = current[key];
            });
            // Coerce value to the correct type (boolean, number, or string)
            let value = arg.value;
            if (value === 'true') {
                value = true;
            }
            else if (value === 'false') {
                value = false;
            }
            else if (!isNaN(Number(value)) && value.trim() !== '' && !isNaN(parseFloat(value))) {
                value = Number(value);
            }
            current[keys[keys.length - 1]] = value;
        });
        settingsString += JSON.stringify(settingsJson, null, 2);
    }
    return { scriptData: scriptString, settingsData: settingsString };
}
function parseArgsToString$4(args) {
    const { settingsData, scriptData } = parseArgsToFiles$1(args);
    let envString = `-------------Script File Preview (${isWin ? '.bat' : '.sh'})-------------\n`;
    if (!lodashExports.isEmpty(scriptData)) {
        envString += scriptData;
    }
    else {
        envString += '# No environment variables or command lines configured.\n';
    }
    let settingsString = '---------------- Settings File (settings.json) ----------------\n';
    if (!lodashExports.isEmpty(settingsData)) {
        settingsString += settingsData;
    }
    else {
        settingsString += '{\n  // No settings configured.\n}';
    }
    return `${envString}${settingsString}`;
}
function parseFilesToArgs$1(scriptContent, settingsContent) {
    // 1. Parse the script content by reusing the existing function
    const scriptArgs = parseStringToArgs$4(scriptContent);
    // 2. Parse the settings content (json)
    const settingsArgs = [];
    // 3. Combine args, with settings overriding script args for any duplicates
    const combinedArgs = new Map();
    scriptArgs.forEach(arg => combinedArgs.set(arg.name, arg.value));
    settingsArgs.forEach(arg => combinedArgs.set(arg.name, arg.value));
    return Array.from(combinedArgs, ([name, value]) => ({ name, value }));
}
function parseStringToArgs$4(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (line.startsWith('#')) {
            return;
        }
        if (line.startsWith('gemini')) {
            const clArg = line.split('gemini ')[1];
            if (!clArg)
                return;
            const clArgs = clArg.split('--').filter(Boolean);
            const result = clArgs.map((arg) => {
                const [id, ...value] = arg.trim().split(' ');
                return {
                    name: `${id}`.toUpperCase(),
                    value: value.join(' ').replace(/"/g, ''),
                };
            });
            result.forEach((value) => {
                if (isValidArg(value.name, openArguments)) {
                    if (getArgumentType(value.name, openArguments) === 'CheckBox') {
                        argResult.push({ name: value.name, value: '' });
                    }
                    else {
                        argResult.push({ name: value.name, value: value.value });
                    }
                }
            });
        }
        const lineType = checkLinuxArgLine$2(line);
        if (lineType === 'export' || lineType === 'set') {
            let [name, value] = line.replace(`${lineType} `, '').split('=');
            name = removeEscapes(name.trim());
            value = removeEscapes(value.trim());
            if (isValidArg(name, openArguments)) {
                argResult.push({ name, value });
            }
        }
        else if (checkLinuxArgLine$2(line) === 'var') {
            let [name, value] = line.split('=');
            name = removeEscapes(name.trim());
            value = removeEscapes(value.trim());
            if (isValidArg(name, openArguments)) {
                argResult.push({ name, value });
            }
        }
    });
    return argResult;
}
function startInstall$4(stepper) {
    stepper.initialSteps(['Getting Started', 'NodeJS', 'Detect Existing', 'Gemini Cli', 'All Done!']);
    stepper.starterStep({ disableSelectDir: true }).then(() => {
        stepper.nextStep().then(() => {
            stepper.progressBar(true, 'Checking if NPM is installed...');
            stepper.ipc.invoke('is_npm_available').then((isNpmInstalled) => {
                if (isNpmInstalled) {
                    stepper.nextStep().then(() => {
                        stepper.progressBar(true, 'Checking for existing Gemini Cli installation...');
                        stepper.ipc.invoke('is_geminiCli_installed').then((isGeminiCliInstalled) => {
                            if (isGeminiCliInstalled) {
                                stepper.setInstalled();
                                const currentDate = new Date();
                                stepper.storage.set(INSTALL_TIME_KEY$2, currentDate.toLocaleString());
                                stepper.showFinalStep('success', "You're All Set!", "Gemini Cli is already installed. You're good to go!");
                            }
                            else {
                                stepper.nextStep().then(() => {
                                    stepper.executeTerminalCommands('npm i -g @google/gemini-cli').then(() => {
                                        stepper.setInstalled();
                                        const currentDate = new Date();
                                        stepper.storage.set(INSTALL_TIME_KEY$2, currentDate.toLocaleString());
                                        stepper.showFinalStep('success', 'Installation Complete!', 'Your Gemini Cli environment is ready. Enjoy!');
                                    });
                                });
                            }
                        });
                    });
                }
                else {
                    stepper.showFinalStep('error', 'NodeJs is not installed!', 'Gemini Cli need NPM! Please install NodeJs then try again.');
                }
            });
        });
    });
}
function startUpdate$2(stepper) {
    stepper.initialSteps(['Update Gemini Cli', 'Complete Update']);
    stepper.executeTerminalCommands('npm -g update @google/gemini-cli').then(() => {
        const currentDate = new Date();
        stepper.storage.set(UPDATE_TIME_KEY$2, currentDate.toLocaleString());
        stepper.setUpdated();
        stepper.showFinalStep('success', 'Gemini Cli Updated Successfully!', `Gemini Cli has been updated to the latest version. You can now enjoy the new features and improvements.`);
    });
}
async function cardInfo$4(api, callback) {
    callback.setOpenFolders(undefined);
    const descManager = new DescriptionManager([
        {
            title: 'Installation Data',
            items: [
                { label: 'Install Date', result: 'loading' },
                { label: 'Update Date', result: 'loading' },
                { label: 'Current Version', result: 'loading' },
                { label: 'Latest Version', result: 'loading' },
            ],
        },
    ], callback);
    api.storage.get(INSTALL_TIME_KEY$2).then(result => {
        descManager.updateItem(0, 0, result);
    });
    api.storage.get(UPDATE_TIME_KEY$2).then(result => {
        descManager.updateItem(0, 1, result);
    });
    api.ipc.invoke('current_geminiCli_version').then(result => {
        descManager.updateItem(0, 2, result);
    });
    api.storage.get(UPDATE_AVAILABLE_KEY$2).then(result => {
        descManager.updateItem(0, 3, result);
    });
}
const GeminiCli_RM = {
    cardInfo: cardInfo$4,
    parseStringToArgs: parseStringToArgs$4,
    parseArgsToString: parseArgsToString$4,
    manager: { startInstall: startInstall$4, updater: { updateType: 'stepper', startUpdate: startUpdate$2 } },
};

/* eslint max-len: 0 */
// TODO: Support command line conditional configuration
const n8nArguments = [
    {
        category: 'Environment Variables',
        sections: [
            {
                section: 'Nodes',
                items: [
                    {
                        name: 'N8N_COMMUNITY_PACKAGES_ENABLED',
                        type: 'CheckBox',
                        description: 'Enables (true) or disables (false) the functionality to install and load community nodes. If set to false, neither verified nor unverified community packages will be available, regardless of their individual settings.',
                    },
                    {
                        name: 'N8N_COMMUNITY_PACKAGES_PREVENT_LOADING',
                        type: 'CheckBox',
                        description: 'Prevents (true) or allows (false) loading installed community nodes on instance startup. Use this if a faulty node prevents the instance from starting.',
                    },
                    {
                        name: 'N8N_COMMUNITY_PACKAGES_REGISTRY',
                        type: 'Input',
                        defaultValue: 'https://registry.npmjs.org',
                        description: 'NPM registry URL to pull community packages from (license required).',
                    },
                    {
                        name: 'N8N_CUSTOM_EXTENSIONS',
                        type: 'Input',
                        description: 'Specify the path to directories containing your custom nodes.',
                    },
                    {
                        name: 'N8N_PYTHON_ENABLED',
                        type: 'CheckBox',
                        description: 'Whether to enable Python execution on the Code node.',
                    },
                    {
                        name: 'N8N_UNVERIFIED_PACKAGES_ENABLED',
                        type: 'CheckBox',
                        description: 'When N8N_COMMUNITY_PACKAGES_ENABLED is true, this variable controls whether to enable the installation and use of unverified community nodes from an NPM registry (true) or not (false).',
                    },
                    {
                        name: 'N8N_VERIFIED_PACKAGES_ENABLED',
                        type: 'CheckBox',
                        description: 'When N8N_COMMUNITY_PACKAGES_ENABLED is true, this variable controls whether to show verified community nodes in the nodes panel for installation and use (true) or to hide them (false).',
                    },
                    {
                        name: 'NODE_FUNCTION_ALLOW_BUILTIN',
                        type: 'Input',
                        description: 'Permit users to import specific built-in modules in the Code node. Use * to allow all. n8n disables importing modules by default.',
                    },
                    {
                        name: 'NODE_FUNCTION_ALLOW_EXTERNAL',
                        type: 'Input',
                        description: 'Permit users to import specific external modules (from n8n/node_modules) in the Code node. n8n disables importing modules by default.',
                    },
                    {
                        name: 'NODES_ERROR_TRIGGER_TYPE',
                        type: 'Input',
                        defaultValue: 'n8n-nodes-base.errorTrigger',
                        description: 'Specify which node type to use as Error Trigger.',
                    },
                    {
                        name: 'NODES_EXCLUDE',
                        type: 'Input',
                        description: 'Specify which nodes not to load. For example, to block nodes that can be a security risk if users aren\'t trustworthy: NODES_EXCLUDE: "["n8n-nodes-base.executeCommand", "@n8n/n8n-nodes-langchain.lmChatDeepSeek"]"',
                    },
                    { name: 'NODES_INCLUDE', type: 'Input', description: 'Specify which nodes to load.' },
                ],
            },
            {
                section: 'User management SMTP, and two-factor authentication',
                items: [
                    { name: 'N8N_EMAIL_MODE', type: 'Input', defaultValue: 'smtp', description: 'Enable emails.' },
                    { name: 'N8N_SMTP_HOST', type: 'Input', description: 'your_SMTP_server_name' },
                    { name: 'N8N_SMTP_PORT', type: 'Input', description: 'your_SMTP_server_port' },
                    { name: 'N8N_SMTP_USER', type: 'Input', description: 'your_SMTP_username' },
                    { name: 'N8N_SMTP_PASS', type: 'Input', description: 'your_SMTP_password' },
                    {
                        name: 'N8N_SMTP_OAUTH_SERVICE_CLIENT',
                        type: 'Input',
                        description: 'If using 2LO with a service account this is your client ID',
                    },
                    {
                        name: 'N8N_SMTP_OAUTH_PRIVATE_KEY',
                        type: 'Input',
                        description: 'If using 2LO with a service account this is your private key',
                    },
                    {
                        name: 'N8N_SMTP_SENDER',
                        type: 'Input',
                        description: 'Sender email address. You can optionally include the sender name. Example with name: N8N <contact@n8n.com>',
                    },
                    { name: 'N8N_SMTP_SSL', type: 'CheckBox', description: 'Whether to use SSL for SMTP (true) or not (false).' },
                    {
                        name: 'N8N_SMTP_STARTTLS',
                        type: 'CheckBox',
                        description: 'Whether to use STARTTLS for SMTP (true) or not (false).',
                    },
                    {
                        name: 'N8N_UM_EMAIL_TEMPLATES_INVITE',
                        type: 'Input',
                        description: 'Full path to your HTML email template. This overrides the default template for invite emails.',
                    },
                    {
                        name: 'N8N_UM_EMAIL_TEMPLATES_PWRESET',
                        type: 'Input',
                        description: 'Full path to your HTML email template. This overrides the default template for password reset emails.',
                    },
                    {
                        name: 'N8N_UM_EMAIL_TEMPLATES_WORKFLOW_SHARED',
                        type: 'Input',
                        description: 'Overrides the default HTML template for notifying users that a workflow was shared. Provide the full path to the template.',
                    },
                    {
                        name: 'N8N_UM_EMAIL_TEMPLATES_CREDENTIALS_SHARED',
                        type: 'Input',
                        description: 'Overrides the default HTML template for notifying users that a credential was shared. Provide the full path to the template.',
                    },
                    {
                        name: 'N8N_UM_EMAIL_TEMPLATES_PROJECT_SHARED',
                        type: 'Input',
                        description: 'Overrides the default HTML template for notifying users that a project was shared. Provide the full path to the template.',
                    },
                    {
                        name: 'N8N_USER_MANAGEMENT_JWT_SECRET',
                        type: 'Input',
                        description: 'Set a specific JWT secret. By default, n8n generates one on start.',
                    },
                    {
                        name: 'N8N_USER_MANAGEMENT_JWT_DURATION_HOURS',
                        type: 'Input',
                        defaultValue: 168,
                        description: 'Set an expiration date for the JWTs in hours.',
                    },
                    {
                        name: 'N8N_USER_MANAGEMENT_JWT_REFRESH_TIMEOUT_HOURS',
                        type: 'Input',
                        defaultValue: 0,
                        description: 'How many hours before the JWT expires to automatically refresh it. 0 means 25% of N8N_USER_MANAGEMENT_JWT_DURATION_HOURS. -1 means it will never refresh, which forces users to log in again after the period defined in N8N_USER_MANAGEMENT_JWT_DURATION_HOURS.',
                    },
                    {
                        name: 'N8N_MFA_ENABLED',
                        type: 'CheckBox',
                        description: 'Whether to enable two-factor authentication (true) or disable (false). n8n ignores this if existing users have 2FA enabled.',
                    },
                ],
            },
            {
                section: 'Workflows',
                items: [
                    {
                        name: 'N8N_ONBOARDING_FLOW_DISABLED',
                        type: 'CheckBox',
                        description: 'Whether to disable onboarding tips when creating a new workflow (true) or not (false).',
                    },
                    {
                        name: 'N8N_WORKFLOW_ACTIVATION_BATCH_SIZE',
                        type: 'Input',
                        defaultValue: 1,
                        description: 'How many workflows to activate simultaneously during startup.',
                    },
                    {
                        name: 'N8N_WORKFLOW_CALLER_POLICY_DEFAULT_OPTION',
                        type: 'Input',
                        defaultValue: 'workflowsFromSameOwner',
                        description: 'Which workflows can call a workflow. Options are: any, none, workflowsFromAList, workflowsFromSameOwner. This feature requires Workflow sharing.',
                    },
                    {
                        name: 'N8N_WORKFLOW_TAGS_DISABLED',
                        type: 'CheckBox',
                        description: 'Whether to disable workflow tags (true) or enable tags (false).',
                    },
                    {
                        name: 'WORKFLOWS_DEFAULT_NAME',
                        type: 'Input',
                        defaultValue: 'My workflow',
                        description: 'The default name used for new workflows.',
                    },
                ],
            },
            {
                section: 'Task runner environment variables',
                items: [
                    { name: 'N8N_RUNNERS_ENABLED', type: 'CheckBox', description: 'Are task runners enabled.' },
                    {
                        name: 'N8N_RUNNERS_MODE',
                        type: 'DropDown',
                        defaultValue: 'internal',
                        values: ['internal', 'external'],
                        description: 'How to launch and run the task runner. `internal` means n8n will launch a task runner as child process. `external` means an external orchestrator will launch the task runner.',
                    },
                    {
                        name: 'N8N_RUNNERS_AUTH_TOKEN',
                        type: 'Input',
                        defaultValue: 'Random string',
                        description: 'Shared secret used by a task runner to authenticate to n8n. Required when using `external` mode.',
                    },
                    {
                        name: 'N8N_RUNNERS_BROKER_PORT',
                        type: 'Input',
                        defaultValue: 5679,
                        description: 'Port the task broker listens on for task runner connections.',
                    },
                    {
                        name: 'N8N_RUNNERS_BROKER_LISTEN_ADDRESS',
                        type: 'Input',
                        defaultValue: '127.0.0.1',
                        description: 'Address the task broker listens on.',
                    },
                    {
                        name: 'N8N_RUNNERS_MAX_PAYLOAD',
                        type: 'Input',
                        defaultValue: 1073741824,
                        description: 'Maximum payload size in bytes for communication between a task broker and a task runner.',
                    },
                    {
                        name: 'N8N_RUNNERS_MAX_OLD_SPACE_SIZE',
                        type: 'Input',
                        description: 'The --max-old-space-size option to use for a task runner (in MB). By default, Node.js will set this based on available memory.',
                    },
                    {
                        name: 'N8N_RUNNERS_MAX_CONCURRENCY',
                        type: 'Input',
                        defaultValue: 5,
                        description: 'The number of concurrent tasks a task runner can execute at a time.',
                    },
                    {
                        name: 'N8N_RUNNERS_TASK_TIMEOUT',
                        type: 'Input',
                        defaultValue: 60,
                        description: 'How long (in seconds) a task can take to complete before the task aborts and the runner restarts. Must be greater than 0.',
                    },
                    {
                        name: 'N8N_RUNNERS_HEARTBEAT_INTERVAL',
                        type: 'Input',
                        defaultValue: 30,
                        description: 'How often (in seconds) the runner must send a heartbeat to the broker, else the task aborts and the runner restarts. Must be greater than 0.',
                    },
                    {
                        name: 'N8N_RUNNERS_INSECURE_MODE',
                        type: 'CheckBox',
                        description: 'Whether to disable all security measures in the task runner, for compatibility with modules that rely on insecure JS features. **Discouraged for production use.**',
                    },
                    {
                        name: 'N8N_RUNNERS_LAUNCHER_LOG_LEVEL',
                        type: 'DropDown',
                        defaultValue: 'info',
                        values: ['debug', 'info', 'warn', 'error'],
                        description: 'Which log messages to show.',
                    },
                    {
                        name: 'N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT',
                        type: 'Input',
                        defaultValue: 15,
                        description: 'The number of seconds to wait before shutting down an idle runner.',
                    },
                    {
                        name: 'N8N_RUNNERS_TASK_BROKER_URI',
                        type: 'Input',
                        defaultValue: 'http://127.0.0.1:5679',
                        description: 'The URI of the task broker server (n8n instance).',
                    },
                    {
                        name: 'N8N_RUNNERS_LAUNCHER_HEALTH_CHECK_PORT',
                        type: 'Input',
                        defaultValue: 5680,
                        description: "Port for the launcher's health check server.",
                    },
                    { name: 'NODE_OPTIONS', type: 'Input', description: 'Options for Node.js.' },
                    {
                        name: 'N8N_RUNNERS_GRANT_TOKEN',
                        type: 'Input',
                        defaultValue: 'Random string',
                        description: 'Token the runner uses to authenticate with the task broker. This is automatically provided by the launcher.',
                    },
                    {
                        name: 'N8N_RUNNERS_ALLOW_PROTOTYPE_MUTATION',
                        type: 'CheckBox',
                        description: 'Whether to allow prototype mutation for external libraries. Set to `true` to allow modules that rely on runtime prototype mutation (for example, `puppeteer`) at the cost of relaxing security.',
                    },
                    {
                        name: 'GENERIC_TIMEZONE',
                        type: 'Input',
                        defaultValue: 'America/New_York',
                        description: 'The same default timezone as configured for the n8n instance.',
                    },
                ],
            },
            {
                section: 'Logs environment variables',
                items: [
                    {
                        name: 'N8N_LOG_LEVEL',
                        type: 'DropDown',
                        defaultValue: 'info',
                        values: ['info', 'warn', 'error', 'debug'],
                        description: 'Log output level. Refer to Log levels for details.',
                    },
                    {
                        name: 'N8N_LOG_OUTPUT',
                        type: 'DropDown',
                        defaultValue: 'console',
                        values: ['console', 'file'],
                        description: 'Where to output logs. Provide multiple values as a comma-separated list.',
                    },
                    {
                        name: 'N8N_LOG_FORMAT',
                        type: 'DropDown',
                        defaultValue: 'text',
                        values: ['text', 'json'],
                        description: 'The log format to use. `text` prints human readable messages. `json` prints one JSON object per line containing the message, level, timestamp, and all metadata. This is useful for production monitoring as well as debugging.',
                    },
                    {
                        name: 'N8N_LOG_CRON_ACTIVE_INTERVAL',
                        type: 'Input',
                        defaultValue: 0,
                        description: 'Interval in minutes to log currently active cron jobs. Set to 0 to disable.',
                    },
                    {
                        name: 'N8N_LOG_FILE_COUNT_MAX',
                        type: 'Input',
                        defaultValue: 100,
                        description: 'Max number of log files to keep.',
                    },
                    {
                        name: 'N8N_LOG_FILE_SIZE_MAX',
                        type: 'Input',
                        defaultValue: 16,
                        description: 'Max size of each log file in MB.',
                    },
                    {
                        name: 'N8N_LOG_FILE_LOCATION',
                        type: 'Input',
                        defaultValue: '<n8n-directory-path>/logs/n8n.log',
                        description: 'Log file location. Requires N8N_LOG_OUTPUT set to `file`.',
                    },
                    { name: 'DB_LOGGING_ENABLED', type: 'CheckBox', description: 'Whether to enable database-specific logging.' },
                    {
                        name: 'DB_LOGGING_OPTIONS',
                        type: 'DropDown',
                        defaultValue: 'error',
                        values: ['query', 'error', 'schema', 'warn', 'info', 'log'],
                        description: 'Database log output level. To enable all logging, specify `all`. Refer to TypeORM logging options',
                    },
                    {
                        name: 'DB_LOGGING_MAX_EXECUTION_TIME',
                        type: 'Input',
                        defaultValue: 1000,
                        description: 'Maximum execution time (in milliseconds) before n8n logs a warning. Set to 0 to disable long running query warning.',
                    },
                    {
                        name: 'CODE_ENABLE_STDOUT',
                        type: 'CheckBox',
                        description: "Set to `true` to send Code node logs to process's stdout for debugging, monitoring, or logging purposes.",
                    },
                    {
                        name: 'NO_COLOR',
                        type: 'Input',
                        defaultValue: 'undefined',
                        description: 'Set to any value to output logs without ANSI colors. For more information, see the no-color.org website.',
                    },
                    {
                        name: 'N8N_EVENTBUS_CHECKUNSENTINTERVAL',
                        type: 'Input',
                        defaultValue: 0,
                        description: 'How often (in milliseconds) to check for unsent event messages. Can in rare cases send message twice. Set to 0 to disable it.',
                    },
                    {
                        name: 'N8N_EVENTBUS_LOGWRITER_SYNCFILEACCESS',
                        type: 'CheckBox',
                        description: 'Whether all file access happens synchronously within the thread (true) or not (false).',
                    },
                    {
                        name: 'N8N_EVENTBUS_LOGWRITER_KEEPLOGCOUNT',
                        type: 'Input',
                        defaultValue: 3,
                        description: 'Number of event log files to keep.',
                    },
                    {
                        name: 'N8N_EVENTBUS_LOGWRITER_MAXFILESIZEINKB',
                        type: 'Input',
                        defaultValue: 10240,
                        description: 'Maximum size (in kilo-bytes) of an event log file before a new one starts.',
                    },
                    {
                        name: 'N8N_EVENTBUS_LOGWRITER_LOGBASENAME',
                        type: 'Input',
                        defaultValue: 'n8nEventLog',
                        description: 'Basename of the event log file.',
                    },
                ],
            },
            {
                section: 'License environment variables',
                items: [
                    { name: 'N8N_HIDE_USAGE_PAGE', type: 'CheckBox', description: 'Hide the usage and plans page in the app.' },
                    {
                        name: 'N8N_LICENSE_ACTIVATION_KEY',
                        type: 'Input',
                        defaultValue: '',
                        description: 'Activation key to initialize license. Not applicable if the n8n instance was already activated.',
                    },
                    {
                        name: 'N8N_LICENSE_AUTO_RENEW_ENABLED',
                        type: 'CheckBox',
                        description: 'Enables (true) or disables (false) autorenewal for licenses. If disabled, you need to manually renew the license every 10 days by navigating to **Settings** > **Usage and plan**, and pressing `F5`. Failure to renew the license will disable all licensed features.',
                    },
                    {
                        name: 'N8N_LICENSE_DETACH_FLOATING_ON_SHUTDOWN',
                        type: 'CheckBox',
                        description: 'Controls whether the instance releases floating entitlements back to the pool upon shutdown. Set to `true` to allow other instances to reuse the entitlements, or `false` to retain them. For production instances that must always keep their licensed features, set this to `false`.',
                    },
                    {
                        name: 'N8N_LICENSE_SERVER_URL',
                        type: 'Input',
                        defaultValue: 'https://license.n8n.io/v1',
                        description: 'Server URL to retrieve license.',
                    },
                    {
                        name: 'N8N_LICENSE_TENANT_ID',
                        type: 'Input',
                        defaultValue: 1,
                        description: 'Tenant ID associated with the license. Only set this variable if explicitly instructed by n8n.',
                    },
                    {
                        name: 'https_proxy_license_server',
                        type: 'Input',
                        defaultValue: 'https://user:pass@proxy:port',
                        description: 'Proxy server URL for HTTPS requests to retrieve license. This variable name needs to be lowercase.',
                    },
                ],
            },
            {
                section: 'Queue mode environment variables',
                items: [
                    {
                        name: 'OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS',
                        type: 'CheckBox',
                        description: 'Set to `true` if you want manual executions to run on the worker rather than on main.',
                    },
                    { name: 'QUEUE_BULL_PREFIX', type: 'Input', description: 'Prefix to use for all queue keys.' },
                    { name: 'QUEUE_BULL_REDIS_DB', type: 'Input', defaultValue: 0, description: 'The Redis database used.' },
                    { name: 'QUEUE_BULL_REDIS_HOST', type: 'Input', defaultValue: 'localhost', description: 'The Redis host.' },
                    { name: 'QUEUE_BULL_REDIS_PORT', type: 'Input', defaultValue: 6379, description: 'The Redis port used.' },
                    {
                        name: 'QUEUE_BULL_REDIS_USERNAME',
                        type: 'Input',
                        description: "The Redis username (needs Redis version 6 or above). Don't define it for Redis < 6 compatibility",
                    },
                    { name: 'QUEUE_BULL_REDIS_PASSWORD', type: 'Input', description: 'The Redis password.' },
                    {
                        name: 'QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD',
                        type: 'Input',
                        defaultValue: 10000,
                        description: 'The Redis timeout threshold (in ms).',
                    },
                    {
                        name: 'QUEUE_BULL_REDIS_CLUSTER_NODES',
                        type: 'Input',
                        description: 'Expects a comma-separated list of Redis Cluster nodes in the format `host:port`, for the Redis client to initially connect to. If running in queue mode (`EXECUTIONS_MODE = queue`), setting this variable will create a Redis Cluster client instead of a Redis client, and n8n will ignore `QUEUE_BULL_REDIS_HOST` and `QUEUE_BULL_REDIS_PORT`.',
                    },
                    { name: 'QUEUE_BULL_REDIS_TLS', type: 'CheckBox', description: 'Enable TLS on Redis connections.' },
                    {
                        name: 'QUEUE_BULL_REDIS_DUALSTACK',
                        type: 'CheckBox',
                        description: 'Enable dual-stack support (IPv4 and IPv6) on Redis connections.',
                    },
                    {
                        name: 'QUEUE_WORKER_TIMEOUT',
                        type: 'Input',
                        defaultValue: 30,
                        description: '**Deprecated** Use `N8N_GRACEFUL_SHUTDOWN_TIMEOUT` instead. How long should n8n wait (seconds) for running executions before exiting worker process on shutdown.',
                    },
                    {
                        name: 'QUEUE_HEALTH_CHECK_ACTIVE',
                        type: 'CheckBox',
                        description: 'Whether to enable health checks (true) or disable (false).',
                    },
                    {
                        name: 'QUEUE_HEALTH_CHECK_PORT',
                        type: 'Input',
                        defaultValue: 5678,
                        description: 'The port to serve health checks on. If you experience a port conflict error when starting a worker server using its default port, change this.',
                    },
                    {
                        name: 'QUEUE_WORKER_LOCK_DURATION',
                        type: 'Input',
                        defaultValue: 60000,
                        description: 'How long (in ms) is the lease period for a worker to work on a message.',
                    },
                    {
                        name: 'QUEUE_WORKER_LOCK_RENEW_TIME',
                        type: 'Input',
                        defaultValue: 10000,
                        description: 'How frequently (in ms) should a worker renew the lease time.',
                    },
                    {
                        name: 'QUEUE_WORKER_STALLED_INTERVAL',
                        type: 'Input',
                        defaultValue: 30000,
                        description: 'How often should a worker check for stalled jobs (use 0 for never).',
                    },
                    {
                        name: 'QUEUE_WORKER_MAX_STALLED_COUNT',
                        type: 'Input',
                        defaultValue: 1,
                        description: 'Maximum amount of times a stalled job will be re-processed.',
                    },
                    {
                        name: 'N8N_MULTI_MAIN_SETUP_ENABLED',
                        type: 'CheckBox',
                        description: 'Whether to enable multi-main setup for queue mode (license required).',
                    },
                    {
                        name: 'N8N_MULTI_MAIN_SETUP_KEY_TTL',
                        type: 'Input',
                        defaultValue: 10,
                        description: 'Time to live (in seconds) for leader key in multi-main setup.',
                    },
                    {
                        name: 'N8N_MULTI_MAIN_SETUP_CHECK_INTERVAL',
                        type: 'Input',
                        defaultValue: 3,
                        description: 'Interval (in seconds) for leader check in multi-main setup.',
                    },
                ],
            },
            {
                section: 'Source control environment variables',
                items: [
                    {
                        name: 'N8N_SOURCECONTROL_DEFAULT_SSH_KEY_TYPE',
                        type: 'Input',
                        defaultValue: 'ed25519',
                        description: 'Set to `rsa` to make RSA the default SSH key type for Source control setup.',
                    },
                ],
            },
            {
                section: 'Timezone and localization environment variables',
                items: [
                    {
                        name: 'GENERIC_TIMEZONE',
                        type: 'Input',
                        defaultValue: 'America/New_York',
                        description: 'The n8n instance timezone. Important for schedule nodes (such as Cron).',
                    },
                    {
                        name: 'N8N_DEFAULT_LOCALE',
                        type: 'Input',
                        defaultValue: 'en',
                        description: "A locale identifier, compatible with the Accept-Language header. n8n doesn't support regional identifiers, such as `de-AT`. When running in a locale other than the default, n8n displays UI strings in the selected locale, and falls back to `en` for any untranslated strings.",
                    },
                ],
            },
            {
                section: 'Security environment variables',
                items: [
                    {
                        name: 'N8N_BLOCK_ENV_ACCESS_IN_NODE',
                        type: 'CheckBox',
                        description: 'Whether to allow users to access environment variables in expressions and the Code node (false) or not (true).',
                    },
                    {
                        name: 'N8N_BLOCK_FILE_ACCESS_TO_N8N_FILES',
                        type: 'CheckBox',
                        description: 'Set to `true` to block access to all files in the .n8n directory and user defined configuration files.',
                    },
                    {
                        name: 'N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS',
                        type: 'CheckBox',
                        description: 'Set to `true` to try to set 0600 permissions for the settings file, giving only the owner read and write access.',
                    },
                    {
                        name: 'N8N_RESTRICT_FILE_ACCESS_TO',
                        type: 'Input',
                        description: 'Limits access to files in these directories. Provide multiple files as a colon-separated list (":").',
                    },
                    {
                        name: 'N8N_SECURITY_AUDIT_DAYS_ABANDONED_WORKFLOW',
                        type: 'Input',
                        defaultValue: 90,
                        description: "Number of days to consider a workflow abandoned if it's not executed.",
                    },
                    {
                        name: 'N8N_SECURE_COOKIE',
                        type: 'CheckBox',
                        description: 'Ensures that cookies are only sent over HTTPS, enhancing security.',
                    },
                    {
                        name: 'N8N_SAMESITE_COOKIE',
                        type: 'DropDown',
                        defaultValue: 'lax',
                        values: ['strict', 'lax', 'none'],
                        description: 'Controls cross-site cookie behavior:\n- strict: Sent only for first-party requests.\n- lax (default): Sent with top-level navigation requests.\n- none: Sent in all contexts (requires HTTPS).',
                    },
                ],
            },
            {
                section: 'External hooks environment variables',
                items: [
                    {
                        name: 'EXTERNAL_HOOK_FILES',
                        type: 'Input',
                        description: 'Files containing backend external hooks. Provide multiple files as a colon-separated list (":").',
                    },
                    {
                        name: 'EXTERNAL_FRONTEND_HOOKS_URLS',
                        type: 'Input',
                        description: 'URLs to files containing frontend external hooks. Provide multiple URLs as a colon-separated list (":").',
                    },
                ],
            },
            {
                section: 'External secrets environment variables',
                items: [
                    {
                        name: 'N8N_EXTERNAL_SECRETS_UPDATE_INTERVAL',
                        type: 'Input',
                        defaultValue: 300,
                        description: 'How often (in seconds) to check for secret updates.',
                    },
                ],
            },
            {
                section: 'Deployment environment variables',
                items: [
                    {
                        name: 'HTTP_PROXY',
                        type: 'Input',
                        description: 'A URL to proxy unencrypted HTTP requests through. When set, n8n proxies all unencrypted HTTP traffic from nodes through the proxy URL.',
                    },
                    {
                        name: 'HTTPS_PROXY',
                        type: 'Input',
                        description: 'A URL to proxy TLS/SSL encrypted HTTP requests through. When set, n8n proxies all TLS/SSL encrypted HTTP traffic from nodes through the proxy URL.',
                    },
                    {
                        name: 'ALL_PROXY',
                        type: 'Input',
                        description: "A URL to proxy both unencrypted and encrypted HTTP requests through. When set, n8n uses this value when more specific variables (`HTTP_PROXY` or `HTTPS_PROXY`) aren't present.",
                    },
                    {
                        name: 'NO_PROXY',
                        type: 'Input',
                        description: 'A comma-separated list of hostnames or URLs that should bypass the proxy. When using `HTTP_PROXY`, `HTTPS_PROXY`, or `ALL_PROXY`, n8n will connect directly to the URLs or hostnames defined here instead of using the proxy.',
                    },
                    {
                        name: 'N8N_EDITOR_BASE_URL',
                        type: 'Input',
                        description: 'Public URL where users can access the editor. Also used for emails sent from n8n and the redirect URL for SAML based authentication.',
                    },
                    {
                        name: 'N8N_CONFIG_FILES',
                        type: 'Input',
                        description: 'Use to provide the path to any JSON configuration file.',
                    },
                    { name: 'N8N_DISABLE_UI', type: 'CheckBox', description: 'Set to `true` to disable the UI.' },
                    { name: 'N8N_PREVIEW_MODE', type: 'CheckBox', description: 'Set to `true` to run in preview mode.' },
                    {
                        name: 'N8N_TEMPLATES_ENABLED',
                        type: 'CheckBox',
                        description: 'Enables workflow templates (true) or disable (false).',
                    },
                    {
                        name: 'N8N_TEMPLATES_HOST',
                        type: 'Input',
                        defaultValue: 'https://api.n8n.io',
                        description: "Change this if creating your own workflow template library. Note that to use your own workflow templates library, your API must provide the same endpoints and response structure as n8n's. Refer to Workflow templates for more information.",
                    },
                    {
                        name: 'N8N_ENCRYPTION_KEY',
                        type: 'Input',
                        defaultValue: 'Random key generated by n8n',
                        description: 'Provide a custom key used to encrypt credentials in the n8n database. By default n8n generates a random key on first launch.',
                    },
                    {
                        name: 'N8N_USER_FOLDER',
                        type: 'Input',
                        defaultValue: 'user-folder',
                        description: 'Provide the path where n8n will create the .n8n folder. This directory stores user-specific data, such as database file and encryption key.',
                    },
                    { name: 'N8N_PATH', type: 'Input', defaultValue: '/', description: 'The path n8n deploys to.' },
                    { name: 'N8N_HOST', type: 'Input', defaultValue: 'localhost', description: 'Host name n8n runs on.' },
                    { name: 'N8N_PORT', type: 'Input', defaultValue: 5678, description: 'The HTTP port n8n runs on.' },
                    {
                        name: 'N8N_LISTEN_ADDRESS',
                        type: 'Input',
                        defaultValue: '::',
                        description: 'The IP address n8n should listen on.',
                    },
                    {
                        name: 'N8N_PROTOCOL',
                        type: 'DropDown',
                        defaultValue: 'http',
                        values: ['http', 'https'],
                        description: 'The protocol used to reach n8n.',
                    },
                    { name: 'N8N_SSL_KEY', type: 'Input', description: 'The SSL key for HTTPS protocol.' },
                    { name: 'N8N_SSL_CERT', type: 'Input', description: 'The SSL certificate for HTTPS protocol.' },
                    {
                        name: 'N8N_PERSONALIZATION_ENABLED',
                        type: 'CheckBox',
                        description: 'Whether to ask users personalisation questions and then customise n8n accordingly.',
                    },
                    {
                        name: 'N8N_VERSION_NOTIFICATIONS_ENABLED',
                        type: 'CheckBox',
                        description: 'When enabled, n8n sends notifications of new versions and security updates.',
                    },
                    {
                        name: 'N8N_VERSION_NOTIFICATIONS_ENDPOINT',
                        type: 'Input',
                        defaultValue: 'https://api.n8n.io/versions/',
                        description: 'The endpoint to retrieve where version information.',
                    },
                    {
                        name: 'N8N_VERSION_NOTIFICATIONS_INFO_URL',
                        type: 'Input',
                        defaultValue: 'https://docs.n8n.io/getting-started/installation/updating.html',
                        description: 'The URL displayed in the New Versions panel for more information.',
                    },
                    {
                        name: 'N8N_DIAGNOSTICS_ENABLED',
                        type: 'CheckBox',
                        description: "Whether to share selected, anonymous telemetry with n8n. Note that if you set this to `false`, you can't enable Ask AI in the Code node.",
                    },
                    {
                        name: 'N8N_DIAGNOSTICS_CONFIG_FRONTEND',
                        type: 'Input',
                        defaultValue: '1zPn9bgWPzlQc0p8Gj1uiK6DOTn;https://telemetry.n8n.io',
                        description: 'Telemetry configuration for the frontend.',
                    },
                    {
                        name: 'N8N_DIAGNOSTICS_CONFIG_BACKEND',
                        type: 'Input',
                        defaultValue: '1zPn7YoGC3ZXE9zLeTKLuQCB4F6;https://telemetry.n8n.io/v1/batch',
                        description: 'Telemetry configuration for the backend.',
                    },
                    {
                        name: 'N8N_PUSH_BACKEND',
                        type: 'Input',
                        defaultValue: 'websocket',
                        description: 'Choose whether the n8n backend uses server-sent events (`sse`) or WebSockets (`websocket`) to send changes to the UI.',
                    },
                    {
                        name: 'VUE_APP_URL_BASE_API',
                        type: 'Input',
                        defaultValue: 'http://localhost:5678/',
                        description: 'Used when building the n8n-editor-ui package manually to set how the frontend can reach the backend API. Refer to Configure the Base URL.',
                    },
                    {
                        name: 'N8N_HIRING_BANNER_ENABLED',
                        type: 'CheckBox',
                        description: 'Whether to show the n8n hiring banner in the console (true) or not (false).',
                    },
                    {
                        name: 'N8N_PUBLIC_API_SWAGGERUI_DISABLED',
                        type: 'CheckBox',
                        description: 'Whether the Swagger UI (API playground) is disabled (true) or not (false).',
                    },
                    {
                        name: 'N8N_PUBLIC_API_DISABLED',
                        type: 'CheckBox',
                        description: 'Whether to disable the public API (true) or not (false).',
                    },
                    {
                        name: 'N8N_PUBLIC_API_ENDPOINT',
                        type: 'Input',
                        defaultValue: 'api',
                        description: 'Path for the public API endpoints.',
                    },
                    {
                        name: 'N8N_GRACEFUL_SHUTDOWN_TIMEOUT',
                        type: 'Input',
                        defaultValue: 30,
                        description: 'How long should the n8n process wait (in seconds) for components to shut down before exiting the process.',
                    },
                    {
                        name: 'N8N_DEV_RELOAD',
                        type: 'CheckBox',
                        description: 'When working on the n8n source code, set this to `true` to automatically reload or restart the application when changes occur in the source code files.',
                    },
                    {
                        name: 'N8N_REINSTALL_MISSING_PACKAGES',
                        type: 'CheckBox',
                        description: 'If set to `true`, n8n will automatically attempt to reinstall any missing packages.',
                    },
                    {
                        name: 'N8N_TUNNEL_SUBDOMAIN',
                        type: 'Input',
                        description: 'Specifies the subdomain for the n8n tunnel. If not set, n8n generates a random subdomain.',
                    },
                    {
                        name: 'N8N_PROXY_HOPS',
                        type: 'Input',
                        defaultValue: 0,
                        description: 'Number of reverse-proxies n8n is running behind.',
                    },
                ],
            },
            {
                section: 'Database environment variables',
                items: [
                    {
                        name: 'DB_TYPE',
                        type: 'DropDown',
                        defaultValue: 'sqlite',
                        values: ['sqlite', 'postgresdb'],
                        description: 'The database to use.',
                    },
                    { name: 'DB_TABLE_PREFIX', type: 'Input', description: 'Prefix to use for table names.' },
                    {
                        name: 'DB_PING_INTERVAL_SECONDS',
                        type: 'Input',
                        defaultValue: 2,
                        description: 'The interval, in seconds, between pings to the database to check if the connection is still alive.',
                    },
                    {
                        name: 'DB_POSTGRESDB_DATABASE',
                        type: 'Input',
                        defaultValue: 'n8n',
                        description: 'The name of the PostgreSQL database.',
                    },
                    { name: 'DB_POSTGRESDB_HOST', type: 'Input', defaultValue: 'localhost', description: 'The PostgreSQL host.' },
                    { name: 'DB_POSTGRESDB_PORT', type: 'Input', defaultValue: 5432, description: 'The PostgreSQL port.' },
                    { name: 'DB_POSTGRESDB_USER', type: 'Input', defaultValue: 'postgres', description: 'The PostgreSQL user.' },
                    { name: 'DB_POSTGRESDB_PASSWORD', type: 'Input', description: 'The PostgreSQL password.' },
                    {
                        name: 'DB_POSTGRESDB_POOL_SIZE',
                        type: 'Input',
                        defaultValue: 2,
                        description: 'Control how many parallel open Postgres connections n8n should have. Increasing it may help with resource utilization, but too many connections may degrade performance.',
                    },
                    {
                        name: 'DB_POSTGRESDB_CONNECTION_TIMEOUT',
                        type: 'Input',
                        defaultValue: 20000,
                        description: 'Postgres connection timeout (ms).',
                    },
                    {
                        name: 'DB_POSTGRESDB_IDLE_CONNECTION_TIMEOUT',
                        type: 'Input',
                        defaultValue: 30000,
                        description: 'Amount of time before an idle connection is eligible for eviction for being idle.',
                    },
                    { name: 'DB_POSTGRESDB_SCHEMA', type: 'Input', defaultValue: 'public', description: 'The PostgreSQL schema.' },
                    {
                        name: 'DB_POSTGRESDB_SSL_ENABLED',
                        type: 'CheckBox',
                        description: 'Whether to enable SSL. Automatically enabled if DB_POSTGRESDB_SSL_CA, DB_POSTGRESDB_SSL_CERT or DB_POSTGRESDB_SSL_KEY is defined.',
                    },
                    { name: 'DB_POSTGRESDB_SSL_CA', type: 'Input', description: 'The PostgreSQL SSL certificate authority.' },
                    { name: 'DB_POSTGRESDB_SSL_CERT', type: 'Input', description: 'The PostgreSQL SSL certificate.' },
                    { name: 'DB_POSTGRESDB_SSL_KEY', type: 'Input', description: 'The PostgreSQL SSL key.' },
                    {
                        name: 'DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED',
                        type: 'CheckBox',
                        description: 'If n8n should reject unauthorized SSL connections (true) or not (false).',
                    },
                    {
                        name: 'DB_SQLITE_POOL_SIZE',
                        type: 'Input',
                        defaultValue: 0,
                        description: 'Controls whether to open the SQLite file in WAL mode or rollback journal mode. Uses rollback journal mode when set to zero. When greater than zero, uses WAL mode with the value determining the number of parallel SQL read connections to configure. WAL mode is much more performant and reliable than the rollback journal mode.',
                    },
                    {
                        name: 'DB_SQLITE_VACUUM_ON_STARTUP',
                        type: 'CheckBox',
                        description: 'Runs VACUUM operation on startup to rebuild the database. Reduces file size and optimizes indexes. This is a long running blocking operation and increases start-up time.',
                    },
                ],
            },
            {
                section: 'Executions environment variables',
                items: [
                    {
                        name: 'EXECUTIONS_MODE',
                        type: 'DropDown',
                        defaultValue: 'regular',
                        values: ['regular', 'queue'],
                        description: 'Whether executions should run directly or using queue.',
                    },
                    {
                        name: 'EXECUTIONS_TIMEOUT',
                        type: 'Input',
                        defaultValue: -1,
                        description: 'Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in EXECUTIONS_TIMEOUT_MAX. Set EXECUTIONS_TIMEOUT to -1 to disable.',
                    },
                    {
                        name: 'EXECUTIONS_TIMEOUT_MAX',
                        type: 'Input',
                        defaultValue: 3600,
                        description: 'The maximum execution time (in seconds) that users can set for an individual workflow.',
                    },
                    {
                        name: 'EXECUTIONS_DATA_SAVE_ON_ERROR',
                        type: 'DropDown',
                        defaultValue: 'all',
                        values: ['all', 'none'],
                        description: 'Whether n8n saves execution data on error.',
                    },
                    {
                        name: 'EXECUTIONS_DATA_SAVE_ON_SUCCESS',
                        type: 'DropDown',
                        defaultValue: 'all',
                        values: ['all', 'none'],
                        description: 'Whether n8n saves execution data on success.',
                    },
                    {
                        name: 'EXECUTIONS_DATA_SAVE_ON_PROGRESS',
                        type: 'CheckBox',
                        description: 'Whether to save progress for each node executed (true) or not (false).',
                    },
                    {
                        name: 'EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS',
                        type: 'CheckBox',
                        description: 'Whether to save data of executions when started manually.',
                    },
                    {
                        name: 'EXECUTIONS_DATA_PRUNE',
                        type: 'CheckBox',
                        description: 'Whether to delete data of past executions on a rolling basis.',
                    },
                    {
                        name: 'EXECUTIONS_DATA_MAX_AGE',
                        type: 'Input',
                        defaultValue: 336,
                        description: "The execution age (in hours) before it's deleted.",
                    },
                    {
                        name: 'EXECUTIONS_DATA_PRUNE_MAX_COUNT',
                        type: 'Input',
                        defaultValue: 10000,
                        description: 'Maximum number of executions to keep in the database. 0 = no limit',
                    },
                    {
                        name: 'EXECUTIONS_DATA_HARD_DELETE_BUFFER',
                        type: 'Input',
                        defaultValue: 1,
                        description: 'How old (hours) the finished execution data has to be to get hard-deleted. By default, this buffer excludes recent executions as the user may need them while building a workflow.',
                    },
                    {
                        name: 'EXECUTIONS_DATA_PRUNE_HARD_DELETE_INTERVAL',
                        type: 'Input',
                        defaultValue: 15,
                        description: 'How often (minutes) execution data should be hard-deleted.',
                    },
                    {
                        name: 'EXECUTIONS_DATA_PRUNE_SOFT_DELETE_INTERVAL',
                        type: 'Input',
                        defaultValue: 60,
                        description: 'How often (minutes) execution data should be soft-deleted.',
                    },
                    {
                        name: 'N8N_CONCURRENCY_PRODUCTION_LIMIT',
                        type: 'Input',
                        defaultValue: -1,
                        description: 'Max production executions allowed to run concurrently, in both regular and scaling modes. -1 to disable in regular mode.',
                    },
                ],
            },
            {
                section: 'Credentials environment variables',
                items: [
                    { name: 'CREDENTIALS_OVERWRITE_DATA', type: 'Input', description: 'Overwrites for credentials.' },
                    {
                        name: 'CREDENTIALS_OVERWRITE_ENDPOINT',
                        type: 'Input',
                        description: 'The API endpoint to fetch credentials.',
                    },
                    {
                        name: 'CREDENTIALS_DEFAULT_NAME',
                        type: 'Input',
                        defaultValue: 'My credentials',
                        description: 'The default name for credentials.',
                    },
                ],
            },
            {
                section: 'Insights environment variables',
                items: [
                    {
                        name: 'N8N_DISABLED_MODULES',
                        type: 'Input',
                        description: 'Set to `insights` to disable the feature and metrics collection for an instance.',
                    },
                    {
                        name: 'N8N_INSIGHTS_COMPACTION_BATCH_SIZE',
                        type: 'Input',
                        defaultValue: 500,
                        description: 'The number of raw insights data to compact in a single batch.',
                    },
                    {
                        name: 'N8N_INSIGHTS_COMPACTION_DAILY_TO_WEEKLY_THRESHOLD_DAYS',
                        type: 'Input',
                        defaultValue: 180,
                        description: 'The maximum age (in days) of daily insights data to compact.',
                    },
                    {
                        name: 'N8N_INSIGHTS_COMPACTION_HOURLY_TO_DAILY_THRESHOLD_DAYS',
                        type: 'Input',
                        defaultValue: 90,
                        description: 'The maximum age (in days) of hourly insights data to compact.',
                    },
                    {
                        name: 'N8N_INSIGHTS_COMPACTION_INTERVAL_MINUTES',
                        type: 'Input',
                        defaultValue: 60,
                        description: 'Interval (in minutes) at which compaction should run.',
                    },
                    {
                        name: 'N8N_INSIGHTS_FLUSH_BATCH_SIZE',
                        type: 'Input',
                        defaultValue: 1000,
                        description: 'The maximum number of insights data to keep in the buffer before flushing.',
                    },
                    {
                        name: 'N8N_INSIGHTS_FLUSH_INTERVAL_SECONDS',
                        type: 'Input',
                        defaultValue: 30,
                        description: 'The interval (in seconds) at which the insights data should be flushed to the database.',
                    },
                ],
            },
            {
                section: 'Binary data environment variables',
                items: [
                    {
                        name: 'N8N_AVAILABLE_BINARY_DATA_MODES',
                        type: 'Input',
                        defaultValue: 'filesystem',
                        description: 'A comma separated list of available binary data modes.',
                    },
                    {
                        name: 'N8N_BINARY_DATA_STORAGE_PATH',
                        type: 'Input',
                        defaultValue: 'N8N_USER_FOLDER/binaryData',
                        description: 'The path where n8n stores binary data.',
                    },
                    {
                        name: 'N8N_DEFAULT_BINARY_DATA_MODE',
                        type: 'Input',
                        defaultValue: 'default',
                        description: 'The default binary data mode. `default` keeps binary data in memory. Set to `filesystem` to use the filesystem, or `s3` to AWS S3. Note that binary data pruning operates on the active binary data mode. For example, if your instance stored data in S3, and you later switched to filesystem mode, n8n only prunes binary data in the filesystem. This may change in future.',
                    },
                ],
            },
            {
                section: 'External data storage environment variables',
                items: [
                    {
                        name: 'N8N_EXTERNAL_STORAGE_S3_HOST',
                        type: 'Input',
                        description: 'Host of the n8n bucket in S3-compatible external storage. For example, `s3.us-east-1.amazonaws.com`',
                    },
                    {
                        name: 'N8N_EXTERNAL_STORAGE_S3_BUCKET_NAME',
                        type: 'Input',
                        description: 'Name of the n8n bucket in S3-compatible external storage.',
                    },
                    {
                        name: 'N8N_EXTERNAL_STORAGE_S3_BUCKET_REGION',
                        type: 'Input',
                        description: 'Region of the n8n bucket in S3-compatible external storage. For example, `us-east-1`',
                    },
                    {
                        name: 'N8N_EXTERNAL_STORAGE_S3_ACCESS_KEY',
                        type: 'Input',
                        description: 'Access key in S3-compatible external storage',
                    },
                    {
                        name: 'N8N_EXTERNAL_STORAGE_S3_ACCESS_SECRET',
                        type: 'Input',
                        description: 'Access secret in S3-compatible external storage.',
                    },
                    {
                        name: 'N8N_EXTERNAL_STORAGE_S3_AUTH_AUTO_DETECT',
                        type: 'CheckBox',
                        description: 'Use automatic credential detection to authenticate S3 calls for external storage. This will ignore the access key and access secret and use the default credential provider chain.',
                    },
                ],
            },
            {
                section: 'Endpoints environment variables',
                items: [
                    {
                        name: 'N8N_PAYLOAD_SIZE_MAX',
                        type: 'Input',
                        defaultValue: 16,
                        description: 'The maximum payload size in MiB.',
                    },
                    {
                        name: 'N8N_FORMDATA_FILE_SIZE_MAX',
                        type: 'Input',
                        defaultValue: 200,
                        description: 'Max payload size for files in form-data webhook payloads in MiB.',
                    },
                    { name: 'N8N_METRICS', type: 'CheckBox', description: 'Whether to enable the /metrics endpoint.' },
                    {
                        name: 'N8N_METRICS_PREFIX',
                        type: 'Input',
                        defaultValue: 'n8n_',
                        description: 'Optional prefix for n8n specific metrics names.',
                    },
                    {
                        name: 'N8N_METRICS_INCLUDE_DEFAULT_METRICS',
                        type: 'CheckBox',
                        description: 'Whether to expose default system and node.js metrics.',
                    },
                    {
                        name: 'N8N_METRICS_INCLUDE_CACHE_METRICS',
                        type: 'CheckBox',
                        description: 'Whether to include metrics (true) for cache hits and misses, or not include them (false).',
                    },
                    {
                        name: 'N8N_METRICS_INCLUDE_MESSAGE_EVENT_BUS_METRICS',
                        type: 'CheckBox',
                        description: 'Whether to include metrics (true) for events, or not include them (false).',
                    },
                    {
                        name: 'N8N_METRICS_INCLUDE_WORKFLOW_ID_LABEL',
                        type: 'CheckBox',
                        description: 'Whether to include a label for the workflow ID on workflow metrics.',
                    },
                    {
                        name: 'N8N_METRICS_INCLUDE_NODE_TYPE_LABEL',
                        type: 'CheckBox',
                        description: 'Whether to include a label for the node type on node metrics.',
                    },
                    {
                        name: 'N8N_METRICS_INCLUDE_CREDENTIAL_TYPE_LABEL',
                        type: 'CheckBox',
                        description: 'Whether to include a label for the credential type on credential metrics.',
                    },
                    {
                        name: 'N8N_METRICS_INCLUDE_API_ENDPOINTS',
                        type: 'CheckBox',
                        description: 'Whether to expose metrics for API endpoints.',
                    },
                    {
                        name: 'N8N_METRICS_INCLUDE_API_PATH_LABEL',
                        type: 'CheckBox',
                        description: 'Whether to include a label for the path of API invocations.',
                    },
                    {
                        name: 'N8N_METRICS_INCLUDE_API_METHOD_LABEL',
                        type: 'CheckBox',
                        description: 'Whether to include a label for the HTTP method (GET, POST, ...) of API invocations.',
                    },
                    {
                        name: 'N8N_METRICS_INCLUDE_API_STATUS_CODE_LABEL',
                        type: 'CheckBox',
                        description: 'Whether to include a label for the HTTP status code (200, 404, ...) of API invocations.',
                    },
                    {
                        name: 'N8N_METRICS_INCLUDE_QUEUE_METRICS',
                        type: 'CheckBox',
                        description: 'Whether to include metrics for jobs in scaling mode. Not supported in multi-main setup.',
                    },
                    {
                        name: 'N8N_METRICS_QUEUE_METRICS_INTERVAL',
                        type: 'Input',
                        defaultValue: 20,
                        description: 'How often (in seconds) to update queue metrics.',
                    },
                    {
                        name: 'N8N_ENDPOINT_REST',
                        type: 'Input',
                        defaultValue: 'rest',
                        description: 'The path used for REST endpoint.',
                    },
                    {
                        name: 'N8N_ENDPOINT_WEBHOOK',
                        type: 'Input',
                        defaultValue: 'webhook',
                        description: 'The path used for webhook endpoint.',
                    },
                    {
                        name: 'N8N_ENDPOINT_WEBHOOK_TEST',
                        type: 'Input',
                        defaultValue: 'webhook-test',
                        description: 'The path used for test-webhook endpoint.',
                    },
                    {
                        name: 'N8N_ENDPOINT_WEBHOOK_WAIT',
                        type: 'Input',
                        defaultValue: 'webhook-waiting',
                        description: 'The path used for waiting-webhook endpoint.',
                    },
                    {
                        name: 'WEBHOOK_URL',
                        type: 'Input',
                        description: 'Used to manually provide the Webhook URL when running n8n behind a reverse proxy.',
                    },
                    {
                        name: 'N8N_DISABLE_PRODUCTION_MAIN_PROCESS',
                        type: 'CheckBox',
                        description: 'Disable production webhooks from main process. This helps ensure no HTTP traffic load to main process when using webhook-specific processes.',
                    },
                ],
            },
        ],
    },
];

const INSTALL_TIME_KEY$1 = 'install-time-n8n';
const UPDATE_TIME_KEY$1 = 'update-time-n8n';
const UPDATE_AVAILABLE_KEY$1 = 'update-available-version-n8n';
function checkLinuxArgLine$1(line) {
    if (isWin && line.startsWith('set '))
        return 'set';
    if (line.startsWith('export '))
        return 'export';
    for (const arg of n8nArguments) {
        if (arg.category === 'Environment') {
            if (arg.sections[0].items.find(item => item.name === line.split('=')[0])) {
                return 'var';
            }
            else {
                return undefined;
            }
        }
    }
    return undefined;
}
function parseArgsToString$3(args) {
    let result = isWin ? '@echo off\n\n' : '#!/bin/bash\n\n';
    args.forEach(arg => {
        if (getArgumentType(arg.name, n8nArguments) === 'CheckBox') {
            const eWinResult = `set ${arg.name}=true\n`;
            const eResult = `export ${arg.name}="true"\n`;
            result += isWin ? eWinResult : eResult;
        }
        else {
            const eWinResult = `set ${arg.name}=${arg.value}\n`;
            const eResult = `export ${arg.name}="${arg.value}"\n`;
            result += isWin ? eWinResult : eResult;
        }
    });
    result += isWin ? `\nn8n start` : `n8n start`;
    return result;
}
function parseStringToArgs$3(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (line.startsWith('#')) {
            return;
        }
        const lineType = checkLinuxArgLine$1(line);
        if (lineType === 'export' || lineType === 'set') {
            let [name, value] = line.replace(`${lineType} `, '').split('=');
            name = removeEscapes(name.trim());
            value = removeEscapes(value.trim());
            if (isValidArg(name, n8nArguments)) {
                argResult.push({ name, value });
            }
        }
        else if (checkLinuxArgLine$1(line) === 'var') {
            let [name, value] = line.split('=');
            name = removeEscapes(name.trim());
            value = removeEscapes(value.trim());
            if (isValidArg(name, n8nArguments)) {
                argResult.push({ name, value });
            }
        }
    });
    return argResult;
}
// TODO: support selecting available versions or @next
function startInstall$3(stepper) {
    stepper.initialSteps(['Getting Started', 'Checking NodeJS', 'Detect Existing', 'Install N8N', 'All Done!']);
    stepper.starterStep({ disableSelectDir: true }).then(() => {
        stepper.nextStep().then(() => {
            stepper.progressBar(true, 'Checking if NPM is installed...');
            stepper.ipc.invoke('is_npm_available').then((isNpmInstalled) => {
                if (isNpmInstalled) {
                    stepper.nextStep().then(() => {
                        stepper.progressBar(true, 'Checking for existing N8N installation...');
                        stepper.ipc.invoke('is_n8n_installed').then((isN8nInstalled) => {
                            if (isN8nInstalled) {
                                stepper.setInstalled();
                                const currentDate = new Date();
                                stepper.storage.set(INSTALL_TIME_KEY$1, currentDate.toLocaleString());
                                stepper.showFinalStep('success', "You're All Set!", "N8N is already installed. You're good to go!");
                            }
                            else {
                                stepper.nextStep().then(() => {
                                    stepper.executeTerminalCommands('npm i -g n8n').then(() => {
                                        stepper.setInstalled();
                                        const currentDate = new Date();
                                        stepper.storage.set(INSTALL_TIME_KEY$1, currentDate.toLocaleString());
                                        stepper.showFinalStep('success', 'Installation Complete!', 'Your N8N environment is ready. Enjoy!');
                                    });
                                });
                            }
                        });
                    });
                }
                else {
                    stepper.showFinalStep('error', 'NodeJs is not installed!', 'N8N need NPM! Please install NodeJs then try again.');
                }
            });
        });
    });
}
function startUpdate$1(stepper) {
    stepper.initialSteps(['Update N8N', 'Complete Update']);
    stepper.executeTerminalCommands('npm -g update n8n').then(() => {
        const currentDate = new Date();
        stepper.storage.set(UPDATE_TIME_KEY$1, currentDate.toLocaleString());
        stepper.setUpdated();
        stepper.showFinalStep('success', 'N8N Updated Successfully!', `N8N has been updated to the latest version. You can now enjoy the new features and improvements.`);
    });
}
async function cardInfo$3(api, callback) {
    callback.setOpenFolders(undefined);
    const descManager = new DescriptionManager([
        {
            title: 'Installation Data',
            items: [
                { label: 'Install Date', result: 'loading' },
                { label: 'Update Date', result: 'loading' },
                { label: 'Current Version', result: 'loading' },
                { label: 'Latest Version', result: 'loading' },
            ],
        },
    ], callback);
    api.storage.get(INSTALL_TIME_KEY$1).then(result => {
        descManager.updateItem(0, 0, result);
    });
    api.storage.get(UPDATE_TIME_KEY$1).then(result => {
        descManager.updateItem(0, 1, result);
    });
    api.ipc.invoke('current_n8n_version').then(result => {
        descManager.updateItem(0, 2, result);
    });
    api.storage.get(UPDATE_AVAILABLE_KEY$1).then(result => {
        descManager.updateItem(0, 3, result);
    });
}
const N8N_RM = {
    catchAddress: catchAddress$3,
    cardInfo: cardInfo$3,
    parseStringToArgs: parseStringToArgs$3,
    parseArgsToString: parseArgsToString$3,
    manager: { startInstall: startInstall$3, updater: { updateType: 'stepper', startUpdate: startUpdate$1 } },
};

const INSTALL_TIME_KEY = 'install-time-openwebui';
const UPDATE_TIME_KEY = 'update-time-openwebui';
const UPDATE_AVAILABLE_KEY = 'update-available-version-openwebui';
function checkLinuxArgLine(line) {
    if (isWin && line.startsWith('set '))
        return 'set';
    if (line.startsWith('export '))
        return 'export';
    for (const arg of openArguments) {
        if (arg.category === 'Environment') {
            if (arg.sections[0].items.find(item => item.name === line.split('=')[0])) {
                return 'var';
            }
            else {
                return undefined;
            }
        }
    }
    return undefined;
}
function parseArgsToString$2(args) {
    let result = isWin ? '@echo off\n\n' : '#!/bin/bash\n\n';
    let cmArgs = '';
    args.forEach(arg => {
        if (arg.name === 'PORT') {
            cmArgs = `--port ${arg.value}`;
            return;
        }
        if (getArgumentType(arg.name, openArguments) === 'CheckBox') {
            const eWinResult = `set ${arg.name}=true\n`;
            const eResult = `export ${arg.name}="true"\n`;
            result += isWin ? eWinResult : eResult;
        }
        else {
            const eWinResult = `set ${arg.name}=${arg.value}\n`;
            const eResult = `export ${arg.name}="${arg.value}"\n`;
            result += isWin ? eWinResult : eResult;
        }
    });
    result += isWin ? `\nopen-webui serve ${cmArgs}` : `open-webui serve ${cmArgs}`;
    return result;
}
function parseStringToArgs$2(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (line.startsWith('#')) {
            return;
        }
        if (line.startsWith('open-webui serve')) {
            const clArg = line.split('open-webui serve ')[1];
            if (!clArg)
                return;
            const clArgs = clArg.split('--').filter(Boolean);
            const result = clArgs.map((arg) => {
                const [id, ...value] = arg.trim().split(' ');
                return {
                    name: `${id}`.toUpperCase(),
                    value: value.join(' ').replace(/"/g, ''),
                };
            });
            result.forEach((value) => {
                if (isValidArg(value.name, openArguments)) {
                    if (getArgumentType(value.name, openArguments) === 'CheckBox') {
                        argResult.push({ name: value.name, value: '' });
                    }
                    else {
                        argResult.push({ name: value.name, value: value.value });
                    }
                }
            });
        }
        const lineType = checkLinuxArgLine(line);
        if (lineType === 'export' || lineType === 'set') {
            let [name, value] = line.replace(`${lineType} `, '').split('=');
            name = removeEscapes(name.trim());
            value = removeEscapes(value.trim());
            if (isValidArg(name, openArguments)) {
                argResult.push({ name, value });
            }
        }
        else if (checkLinuxArgLine(line) === 'var') {
            let [name, value] = line.split('=');
            name = removeEscapes(name.trim());
            value = removeEscapes(value.trim());
            if (isValidArg(name, openArguments)) {
                argResult.push({ name, value });
            }
        }
    });
    return argResult;
}
function startInstall$2(stepper) {
    stepper.initialSteps(['Getting Started', 'Detect Existing', 'Install Open WebUI', 'All Done!']);
    stepper.starterStep({ disableSelectDir: true }).then(() => {
        stepper.nextStep().then(() => {
            stepper.progressBar(true, 'Checking for existing Open WebUI installation...');
            stepper.ipc.invoke('is_openwebui_installed').then((isInstalled) => {
                if (isInstalled) {
                    stepper.setInstalled();
                    const currentDate = new Date();
                    stepper.storage.set(INSTALL_TIME_KEY, currentDate.toLocaleString());
                    stepper.showFinalStep('success', "You're All Set!", "Open WebUI is already installed. You're good to go!");
                }
                else {
                    stepper.nextStep().then(() => {
                        stepper.executeTerminalCommands('pip install open-webui').then(() => {
                            stepper.setInstalled();
                            const currentDate = new Date();
                            stepper.storage.set(INSTALL_TIME_KEY, currentDate.toLocaleString());
                            stepper.showFinalStep('success', 'Installation Complete!', 'Your Open WebUI environment is ready. Enjoy!');
                        });
                    });
                }
            });
        });
    });
}
function startUpdate(stepper) {
    stepper.initialSteps(['Update Open WebUI', 'Complete Update']);
    stepper.executeTerminalCommands('pip install --upgrade open-webui').then(() => {
        const currentDate = new Date();
        stepper.storage.set(UPDATE_TIME_KEY, currentDate.toLocaleString());
        stepper.setUpdated();
        stepper.showFinalStep('success', 'Open WebUI Updated Successfully!', `Open WebUI has been updated to the latest version. You can now enjoy the new features and improvements.`);
    });
}
async function cardInfo$2(api, callback) {
    callback.setOpenFolders(undefined);
    const descManager = new DescriptionManager([
        {
            title: 'Installation Data',
            items: [
                { label: 'Install Date', result: 'loading' },
                { label: 'Update Date', result: 'loading' },
                { label: 'Current Version', result: 'loading' },
                { label: 'Latest Version', result: 'loading' },
            ],
        },
    ], callback);
    api.storage.get(INSTALL_TIME_KEY).then(result => {
        descManager.updateItem(0, 0, result);
    });
    api.storage.get(UPDATE_TIME_KEY).then(result => {
        descManager.updateItem(0, 1, result);
    });
    api.ipc.invoke('current_openwebui_version').then(result => {
        descManager.updateItem(0, 2, result);
    });
    api.storage.get(UPDATE_AVAILABLE_KEY).then(result => {
        descManager.updateItem(0, 3, result);
    });
}
function catchAddress$1(input) {
    const localhostPatterns = [
        /https?:\/\/localhost(?::\d+)?/i,
        /https?:\/\/127\.0\.0\.1(?::\d+)?/i,
        /https?:\/\/0\.0\.0\.0(?::\d+)?/i,
        /https?:\/\/\[::1](?::\d+)?/i,
        /https?:\/\/(?:[\w-]+\.)*localhost(?::\d+)?/i,
    ];
    for (const pattern of localhostPatterns) {
        const match = input.match(pattern);
        if (match) {
            return replaceAddress(match[0]);
        }
        else if (input.toLowerCase().includes('started server process')) {
            return 'http://localhost:8080';
        }
    }
    return undefined;
}
const OPEN_WEBUI_RM = {
    catchAddress: catchAddress$1,
    cardInfo: cardInfo$2,
    parseStringToArgs: parseStringToArgs$2,
    parseArgsToString: parseArgsToString$2,
    manager: { startInstall: startInstall$2, updater: { updateType: 'stepper', startUpdate } },
};

/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */
function isNothing(subject) {
  return (typeof subject === 'undefined') || (subject === null);
}


function isObject(subject) {
  return (typeof subject === 'object') && (subject !== null);
}


function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;
  else if (isNothing(sequence)) return [];

  return [ sequence ];
}


function extend(target, source) {
  var index, length, key, sourceKeys;

  if (source) {
    sourceKeys = Object.keys(source);

    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }

  return target;
}


function repeat(string, count) {
  var result = '', cycle;

  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }

  return result;
}


function isNegativeZero(number) {
  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);
}


var isNothing_1      = isNothing;
var isObject_1       = isObject;
var toArray_1        = toArray;
var repeat_1         = repeat;
var isNegativeZero_1 = isNegativeZero;
var extend_1         = extend;

var common = {
	isNothing: isNothing_1,
	isObject: isObject_1,
	toArray: toArray_1,
	repeat: repeat_1,
	isNegativeZero: isNegativeZero_1,
	extend: extend_1
};

// YAML error class. http://stackoverflow.com/questions/8458984


function formatError(exception, compact) {
  var where = '', message = exception.reason || '(unknown reason)';

  if (!exception.mark) return message;

  if (exception.mark.name) {
    where += 'in "' + exception.mark.name + '" ';
  }

  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';

  if (!compact && exception.mark.snippet) {
    where += '\n\n' + exception.mark.snippet;
  }

  return message + ' ' + where;
}


function YAMLException$1(reason, mark) {
  // Super constructor
  Error.call(this);

  this.name = 'YAMLException';
  this.reason = reason;
  this.mark = mark;
  this.message = formatError(this, false);

  // Include stack trace in error object
  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = (new Error()).stack || '';
  }
}


// Inherit from Error
YAMLException$1.prototype = Object.create(Error.prototype);
YAMLException$1.prototype.constructor = YAMLException$1;


YAMLException$1.prototype.toString = function toString(compact) {
  return this.name + ': ' + formatError(this, compact);
};


var exception = YAMLException$1;

// get snippet for a single line, respecting maxLength
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = '';
  var tail = '';
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;

  if (position - lineStart > maxHalfLength) {
    head = ' ... ';
    lineStart = position - maxHalfLength + head.length;
  }

  if (lineEnd - position > maxHalfLength) {
    tail = ' ...';
    lineEnd = position + maxHalfLength - tail.length;
  }

  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, '→') + tail,
    pos: position - lineStart + head.length // relative position
  };
}


function padStart(string, max) {
  return common.repeat(' ', max - string.length) + string;
}


function makeSnippet(mark, options) {
  options = Object.create(options || null);

  if (!mark.buffer) return null;

  if (!options.maxLength) options.maxLength = 79;
  if (typeof options.indent      !== 'number') options.indent      = 1;
  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;
  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;

  var re = /\r?\n|\r|\0/g;
  var lineStarts = [ 0 ];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;

  while ((match = re.exec(mark.buffer))) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);

    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }

  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;

  var result = '', i, line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);

  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo - i],
      lineEnds[foundLineNo - i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
      maxLineLength
    );
    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +
      ' | ' + line.str + '\n' + result;
  }

  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +
    ' | ' + line.str + '\n';
  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\n';

  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo + i],
      lineEnds[foundLineNo + i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
      maxLineLength
    );
    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +
      ' | ' + line.str + '\n';
  }

  return result.replace(/\n$/, '');
}


var snippet = makeSnippet;

var TYPE_CONSTRUCTOR_OPTIONS = [
  'kind',
  'multi',
  'resolve',
  'construct',
  'instanceOf',
  'predicate',
  'represent',
  'representName',
  'defaultStyle',
  'styleAliases'
];

var YAML_NODE_KINDS = [
  'scalar',
  'sequence',
  'mapping'
];

function compileStyleAliases(map) {
  var result = {};

  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }

  return result;
}

function Type$1(tag, options) {
  options = options || {};

  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });

  // TODO: Add tag format check.
  this.options       = options; // keep original options in case user wants to extend this type later
  this.tag           = tag;
  this.kind          = options['kind']          || null;
  this.resolve       = options['resolve']       || function () { return true; };
  this.construct     = options['construct']     || function (data) { return data; };
  this.instanceOf    = options['instanceOf']    || null;
  this.predicate     = options['predicate']     || null;
  this.represent     = options['represent']     || null;
  this.representName = options['representName'] || null;
  this.defaultStyle  = options['defaultStyle']  || null;
  this.multi         = options['multi']         || false;
  this.styleAliases  = compileStyleAliases(options['styleAliases'] || null);

  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}

var type = Type$1;

/*eslint-disable max-len*/





function compileList(schema, name) {
  var result = [];

  schema[name].forEach(function (currentType) {
    var newIndex = result.length;

    result.forEach(function (previousType, previousIndex) {
      if (previousType.tag === currentType.tag &&
          previousType.kind === currentType.kind &&
          previousType.multi === currentType.multi) {

        newIndex = previousIndex;
      }
    });

    result[newIndex] = currentType;
  });

  return result;
}


function compileMap(/* lists... */) {
  var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {},
        multi: {
          scalar: [],
          sequence: [],
          mapping: [],
          fallback: []
        }
      }, index, length;

  function collectType(type) {
    if (type.multi) {
      result.multi[type.kind].push(type);
      result.multi['fallback'].push(type);
    } else {
      result[type.kind][type.tag] = result['fallback'][type.tag] = type;
    }
  }

  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}


function Schema$1(definition) {
  return this.extend(definition);
}


Schema$1.prototype.extend = function extend(definition) {
  var implicit = [];
  var explicit = [];

  if (definition instanceof type) {
    // Schema.extend(type)
    explicit.push(definition);

  } else if (Array.isArray(definition)) {
    // Schema.extend([ type1, type2, ... ])
    explicit = explicit.concat(definition);

  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })
    if (definition.implicit) implicit = implicit.concat(definition.implicit);
    if (definition.explicit) explicit = explicit.concat(definition.explicit);

  } else {
    throw new exception('Schema.extend argument should be a Type, [ Type ], ' +
      'or a schema definition ({ implicit: [...], explicit: [...] })');
  }

  implicit.forEach(function (type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }

    if (type$1.loadKind && type$1.loadKind !== 'scalar') {
      throw new exception('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    }

    if (type$1.multi) {
      throw new exception('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');
    }
  });

  explicit.forEach(function (type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }
  });

  var result = Object.create(Schema$1.prototype);

  result.implicit = (this.implicit || []).concat(implicit);
  result.explicit = (this.explicit || []).concat(explicit);

  result.compiledImplicit = compileList(result, 'implicit');
  result.compiledExplicit = compileList(result, 'explicit');
  result.compiledTypeMap  = compileMap(result.compiledImplicit, result.compiledExplicit);

  return result;
};


var schema = Schema$1;

var str = new type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function (data) { return data !== null ? data : ''; }
});

var seq = new type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function (data) { return data !== null ? data : []; }
});

var map = new type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function (data) { return data !== null ? data : {}; }
});

var failsafe = new schema({
  explicit: [
    str,
    seq,
    map
  ]
});

function resolveYamlNull(data) {
  if (data === null) return true;

  var max = data.length;

  return (max === 1 && data === '~') ||
         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));
}

function constructYamlNull() {
  return null;
}

function isNull(object) {
  return object === null;
}

var _null = new type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function () { return '~';    },
    lowercase: function () { return 'null'; },
    uppercase: function () { return 'NULL'; },
    camelcase: function () { return 'Null'; },
    empty:     function () { return '';     }
  },
  defaultStyle: 'lowercase'
});

function resolveYamlBoolean(data) {
  if (data === null) return false;

  var max = data.length;

  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||
         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));
}

function constructYamlBoolean(data) {
  return data === 'true' ||
         data === 'True' ||
         data === 'TRUE';
}

function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]';
}

var bool = new type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function (object) { return object ? 'true' : 'false'; },
    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },
    camelcase: function (object) { return object ? 'True' : 'False'; }
  },
  defaultStyle: 'lowercase'
});

function isHexCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||
         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||
         ((0x61/* a */ <= c) && (c <= 0x66/* f */));
}

function isOctCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));
}

function isDecCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));
}

function resolveYamlInteger(data) {
  if (data === null) return false;

  var max = data.length,
      index = 0,
      hasDigits = false,
      ch;

  if (!max) return false;

  ch = data[index];

  // sign
  if (ch === '-' || ch === '+') {
    ch = data[++index];
  }

  if (ch === '0') {
    // 0
    if (index + 1 === max) return true;
    ch = data[++index];

    // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch !== '0' && ch !== '1') return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }


    if (ch === 'x') {
      // base 16
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }


    if (ch === 'o') {
      // base 8
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isOctCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }
  }

  // base 10 (except 0)

  // value should not start with `_`;
  if (ch === '_') return false;

  for (; index < max; index++) {
    ch = data[index];
    if (ch === '_') continue;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }

  // Should have digits and should not end with `_`
  if (!hasDigits || ch === '_') return false;

  return true;
}

function constructYamlInteger(data) {
  var value = data, sign = 1, ch;

  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '');
  }

  ch = value[0];

  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1;
    value = value.slice(1);
    ch = value[0];
  }

  if (value === '0') return 0;

  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);
    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);
  }

  return sign * parseInt(value, 10);
}

function isInteger(object) {
  return (Object.prototype.toString.call(object)) === '[object Number]' &&
         (object % 1 === 0 && !common.isNegativeZero(object));
}

var int = new type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },
    octal:       function (obj) { return obj >= 0 ? '0o'  + obj.toString(8) : '-0o'  + obj.toString(8).slice(1); },
    decimal:     function (obj) { return obj.toString(10); },
    /* eslint-disable max-len */
    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary:      [ 2,  'bin' ],
    octal:       [ 8,  'oct' ],
    decimal:     [ 10, 'dec' ],
    hexadecimal: [ 16, 'hex' ]
  }
});

var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
  // .2e4, .2
  // special case, seems not from spec
  '|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
  // .inf
  '|[-+]?\\.(?:inf|Inf|INF)' +
  // .nan
  '|\\.(?:nan|NaN|NAN))$');

function resolveYamlFloat(data) {
  if (data === null) return false;

  if (!YAML_FLOAT_PATTERN.test(data) ||
      // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === '_') {
    return false;
  }

  return true;
}

function constructYamlFloat(data) {
  var value, sign;

  value  = data.replace(/_/g, '').toLowerCase();
  sign   = value[0] === '-' ? -1 : 1;

  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }

  if (value === '.inf') {
    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;

  } else if (value === '.nan') {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}


var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

function representYamlFloat(object, style) {
  var res;

  if (isNaN(object)) {
    switch (style) {
      case 'lowercase': return '.nan';
      case 'uppercase': return '.NAN';
      case 'camelcase': return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '.inf';
      case 'uppercase': return '.INF';
      case 'camelcase': return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '-.inf';
      case 'uppercase': return '-.INF';
      case 'camelcase': return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }

  res = object.toString(10);

  // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}

function isFloat(object) {
  return (Object.prototype.toString.call(object) === '[object Number]') &&
         (object % 1 !== 0 || common.isNegativeZero(object));
}

var float = new type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});

var json = failsafe.extend({
  implicit: [
    _null,
    bool,
    int,
    float
  ]
});

var core = json;

var YAML_DATE_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9])'                    + // [2] month
  '-([0-9][0-9])$');                   // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9]?)'                   + // [2] month
  '-([0-9][0-9]?)'                   + // [3] day
  '(?:[Tt]|[ \\t]+)'                 + // ...
  '([0-9][0-9]?)'                    + // [4] hour
  ':([0-9][0-9])'                    + // [5] minute
  ':([0-9][0-9])'                    + // [6] second
  '(?:\\.([0-9]*))?'                 + // [7] fraction
  '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}

function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0,
      delta = null, tz_hour, tz_minute, date;

  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);

  if (match === null) throw new Error('Date resolve error');

  // match: [1] year [2] month [3] day

  year = +(match[1]);
  month = +(match[2]) - 1; // JS month starts with 0
  day = +(match[3]);

  if (!match[4]) { // no hour
    return new Date(Date.UTC(year, month, day));
  }

  // match: [4] hour [5] minute [6] second [7] fraction

  hour = +(match[4]);
  minute = +(match[5]);
  second = +(match[6]);

  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) { // milli-seconds
      fraction += '0';
    }
    fraction = +fraction;
  }

  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

  if (match[9]) {
    tz_hour = +(match[10]);
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
    if (match[9] === '-') delta = -delta;
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));

  if (delta) date.setTime(date.getTime() - delta);

  return date;
}

function representYamlTimestamp(object /*, style*/) {
  return object.toISOString();
}

var timestamp = new type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});

function resolveYamlMerge(data) {
  return data === '<<' || data === null;
}

var merge = new type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge
});

/*eslint-disable no-bitwise*/





// [ 64, 65, 66 ] -> [ padding, CR, LF ]
var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';


function resolveYamlBinary(data) {
  if (data === null) return false;

  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;

  // Convert one by one.
  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx));

    // Skip CR/LF
    if (code > 64) continue;

    // Fail on illegal characters
    if (code < 0) return false;

    bitlen += 6;
  }

  // If there are any bits left, source was corrupted
  return (bitlen % 8) === 0;
}

function constructYamlBinary(data) {
  var idx, tailbits,
      input = data.replace(/[\r\n=]/g, ''), // remove CR/LF & padding to simplify scan
      max = input.length,
      map = BASE64_MAP,
      bits = 0,
      result = [];

  // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if ((idx % 4 === 0) && idx) {
      result.push((bits >> 16) & 0xFF);
      result.push((bits >> 8) & 0xFF);
      result.push(bits & 0xFF);
    }

    bits = (bits << 6) | map.indexOf(input.charAt(idx));
  }

  // Dump tail

  tailbits = (max % 4) * 6;

  if (tailbits === 0) {
    result.push((bits >> 16) & 0xFF);
    result.push((bits >> 8) & 0xFF);
    result.push(bits & 0xFF);
  } else if (tailbits === 18) {
    result.push((bits >> 10) & 0xFF);
    result.push((bits >> 2) & 0xFF);
  } else if (tailbits === 12) {
    result.push((bits >> 4) & 0xFF);
  }

  return new Uint8Array(result);
}

function representYamlBinary(object /*, style*/) {
  var result = '', bits = 0, idx, tail,
      max = object.length,
      map = BASE64_MAP;

  // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if ((idx % 3 === 0) && idx) {
      result += map[(bits >> 18) & 0x3F];
      result += map[(bits >> 12) & 0x3F];
      result += map[(bits >> 6) & 0x3F];
      result += map[bits & 0x3F];
    }

    bits = (bits << 8) + object[idx];
  }

  // Dump tail

  tail = max % 3;

  if (tail === 0) {
    result += map[(bits >> 18) & 0x3F];
    result += map[(bits >> 12) & 0x3F];
    result += map[(bits >> 6) & 0x3F];
    result += map[bits & 0x3F];
  } else if (tail === 2) {
    result += map[(bits >> 10) & 0x3F];
    result += map[(bits >> 4) & 0x3F];
    result += map[(bits << 2) & 0x3F];
    result += map[64];
  } else if (tail === 1) {
    result += map[(bits >> 2) & 0x3F];
    result += map[(bits << 4) & 0x3F];
    result += map[64];
    result += map[64];
  }

  return result;
}

function isBinary(obj) {
  return Object.prototype.toString.call(obj) ===  '[object Uint8Array]';
}

var binary = new type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});

var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
var _toString$2       = Object.prototype.toString;

function resolveYamlOmap(data) {
  if (data === null) return true;

  var objectKeys = [], index, length, pair, pairKey, pairHasKey,
      object = data;

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;

    if (_toString$2.call(pair) !== '[object Object]') return false;

    for (pairKey in pair) {
      if (_hasOwnProperty$3.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;
        else return false;
      }
    }

    if (!pairHasKey) return false;

    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
    else return false;
  }

  return true;
}

function constructYamlOmap(data) {
  return data !== null ? data : [];
}

var omap = new type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});

var _toString$1 = Object.prototype.toString;

function resolveYamlPairs(data) {
  if (data === null) return true;

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    if (_toString$1.call(pair) !== '[object Object]') return false;

    keys = Object.keys(pair);

    if (keys.length !== 1) return false;

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return true;
}

function constructYamlPairs(data) {
  if (data === null) return [];

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    keys = Object.keys(pair);

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return result;
}

var pairs = new type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});

var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;

function resolveYamlSet(data) {
  if (data === null) return true;

  var key, object = data;

  for (key in object) {
    if (_hasOwnProperty$2.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }

  return true;
}

function constructYamlSet(data) {
  return data !== null ? data : {};
}

var set = new type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet
});

var _default = core.extend({
  implicit: [
    timestamp,
    merge
  ],
  explicit: [
    binary,
    omap,
    pairs,
    set
  ]
});

/*eslint-disable max-len,no-use-before-define*/







var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;


var CONTEXT_FLOW_IN   = 1;
var CONTEXT_FLOW_OUT  = 2;
var CONTEXT_BLOCK_IN  = 3;
var CONTEXT_BLOCK_OUT = 4;


var CHOMPING_CLIP  = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP  = 3;


var PATTERN_NON_PRINTABLE         = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS       = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI               = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;


function _class(obj) { return Object.prototype.toString.call(obj); }

function is_EOL(c) {
  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);
}

function is_WHITE_SPACE(c) {
  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);
}

function is_WS_OR_EOL(c) {
  return (c === 0x09/* Tab */) ||
         (c === 0x20/* Space */) ||
         (c === 0x0A/* LF */) ||
         (c === 0x0D/* CR */);
}

function is_FLOW_INDICATOR(c) {
  return c === 0x2C/* , */ ||
         c === 0x5B/* [ */ ||
         c === 0x5D/* ] */ ||
         c === 0x7B/* { */ ||
         c === 0x7D/* } */;
}

function fromHexCode(c) {
  var lc;

  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  /*eslint-disable no-bitwise*/
  lc = c | 0x20;

  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {
    return lc - 0x61 + 10;
  }

  return -1;
}

function escapedHexLen(c) {
  if (c === 0x78/* x */) { return 2; }
  if (c === 0x75/* u */) { return 4; }
  if (c === 0x55/* U */) { return 8; }
  return 0;
}

function fromDecimalCode(c) {
  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  return -1;
}

function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return (c === 0x30/* 0 */) ? '\x00' :
        (c === 0x61/* a */) ? '\x07' :
        (c === 0x62/* b */) ? '\x08' :
        (c === 0x74/* t */) ? '\x09' :
        (c === 0x09/* Tab */) ? '\x09' :
        (c === 0x6E/* n */) ? '\x0A' :
        (c === 0x76/* v */) ? '\x0B' :
        (c === 0x66/* f */) ? '\x0C' :
        (c === 0x72/* r */) ? '\x0D' :
        (c === 0x65/* e */) ? '\x1B' :
        (c === 0x20/* Space */) ? ' ' :
        (c === 0x22/* " */) ? '\x22' :
        (c === 0x2F/* / */) ? '/' :
        (c === 0x5C/* \ */) ? '\x5C' :
        (c === 0x4E/* N */) ? '\x85' :
        (c === 0x5F/* _ */) ? '\xA0' :
        (c === 0x4C/* L */) ? '\u2028' :
        (c === 0x50/* P */) ? '\u2029' : '';
}

function charFromCodepoint(c) {
  if (c <= 0xFFFF) {
    return String.fromCharCode(c);
  }
  // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
  return String.fromCharCode(
    ((c - 0x010000) >> 10) + 0xD800,
    ((c - 0x010000) & 0x03FF) + 0xDC00
  );
}

var simpleEscapeCheck = new Array(256); // integer, for fast access
var simpleEscapeMap = new Array(256);
for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}


function State$1(input, options) {
  this.input = input;

  this.filename  = options['filename']  || null;
  this.schema    = options['schema']    || _default;
  this.onWarning = options['onWarning'] || null;
  // (Hidden) Remove? makes the loader to expect YAML 1.1 documents
  // if such documents have no explicit %YAML directive
  this.legacy    = options['legacy']    || false;

  this.json      = options['json']      || false;
  this.listener  = options['listener']  || null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap       = this.schema.compiledTypeMap;

  this.length     = input.length;
  this.position   = 0;
  this.line       = 0;
  this.lineStart  = 0;
  this.lineIndent = 0;

  // position of first leading tab in the current line,
  // used to make sure there are no tabs in the indentation
  this.firstTabInLine = -1;

  this.documents = [];

  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/

}


function generateError(state, message) {
  var mark = {
    name:     state.filename,
    buffer:   state.input.slice(0, -1), // omit trailing \0
    position: state.position,
    line:     state.line,
    column:   state.position - state.lineStart
  };

  mark.snippet = snippet(mark);

  return new exception(message, mark);
}

function throwError(state, message) {
  throw generateError(state, message);
}

function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}


var directiveHandlers = {

  YAML: function handleYamlDirective(state, name, args) {

    var match, major, minor;

    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive');
    }

    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument');
    }

    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive');
    }

    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);

    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document');
    }

    state.version = args[0];
    state.checkLineBreaks = (minor < 2);

    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document');
    }
  },

  TAG: function handleTagDirective(state, name, args) {

    var handle, prefix;

    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments');
    }

    handle = args[0];
    prefix = args[1];

    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
    }

    if (_hasOwnProperty$1.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }

    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
    }

    try {
      prefix = decodeURIComponent(prefix);
    } catch (err) {
      throwError(state, 'tag prefix is malformed: ' + prefix);
    }

    state.tagMap[handle] = prefix;
  }
};


function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;

  if (start < end) {
    _result = state.input.slice(start, end);

    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 0x09 ||
              (0x20 <= _character && _character <= 0x10FFFF))) {
          throwError(state, 'expected valid JSON character');
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters');
    }

    state.result += _result;
  }
}

function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;

  if (!common.isObject(source)) {
    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
  }

  sourceKeys = Object.keys(source);

  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];

    if (!_hasOwnProperty$1.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}

function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode,
  startLine, startLineStart, startPos) {

  var index, quantity;

  // The output is a plain object here, so keys can only be strings.
  // We need to convert keyNode to a string, but doing so can hang the process
  // (deeply nested arrays that explode exponentially using aliases).
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);

    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, 'nested arrays are not supported inside keys');
      }

      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
        keyNode[index] = '[object Object]';
      }
    }
  }

  // Avoid code execution in load() via toString property
  // (still use its own toString for arrays, timestamps,
  // and whatever user schema extensions happen to have @@toStringTag)
  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
    keyNode = '[object Object]';
  }


  keyNode = String(keyNode);

  if (_result === null) {
    _result = {};
  }

  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json &&
        !_hasOwnProperty$1.call(overridableKeys, keyNode) &&
        _hasOwnProperty$1.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, 'duplicated mapping key');
    }

    // used for this specific key only because Object.defineProperty is slow
    if (keyNode === '__proto__') {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }

  return _result;
}

function readLineBreak(state) {
  var ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x0A/* LF */) {
    state.position++;
  } else if (ch === 0x0D/* CR */) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {
      state.position++;
    }
  } else {
    throwError(state, 'a line break is expected');
  }

  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}

function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
      ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 0x09/* Tab */ && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }

    if (allowComments && ch === 0x23/* # */) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);
    }

    if (is_EOL(ch)) {
      readLineBreak(state);

      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;

      while (ch === 0x20/* Space */) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }

  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, 'deficient indentation');
  }

  return lineBreaks;
}

function testDocumentSeparator(state) {
  var _position = state.position,
      ch;

  ch = state.input.charCodeAt(_position);

  // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.
  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&
      ch === state.input.charCodeAt(_position + 1) &&
      ch === state.input.charCodeAt(_position + 2)) {

    _position += 3;

    ch = state.input.charCodeAt(_position);

    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }

  return false;
}

function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' ';
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1);
  }
}


function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
      following,
      captureStart,
      captureEnd,
      hasPendingContent,
      _line,
      _lineStart,
      _lineIndent,
      _kind = state.kind,
      _result = state.result,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (is_WS_OR_EOL(ch)      ||
      is_FLOW_INDICATOR(ch) ||
      ch === 0x23/* # */    ||
      ch === 0x26/* & */    ||
      ch === 0x2A/* * */    ||
      ch === 0x21/* ! */    ||
      ch === 0x7C/* | */    ||
      ch === 0x3E/* > */    ||
      ch === 0x27/* ' */    ||
      ch === 0x22/* " */    ||
      ch === 0x25/* % */    ||
      ch === 0x40/* @ */    ||
      ch === 0x60/* ` */) {
    return false;
  }

  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {
    following = state.input.charCodeAt(state.position + 1);

    if (is_WS_OR_EOL(following) ||
        withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }

  state.kind = 'scalar';
  state.result = '';
  captureStart = captureEnd = state.position;
  hasPendingContent = false;

  while (ch !== 0) {
    if (ch === 0x3A/* : */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following) ||
          withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }

    } else if (ch === 0x23/* # */) {
      preceding = state.input.charCodeAt(state.position - 1);

      if (is_WS_OR_EOL(preceding)) {
        break;
      }

    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||
               withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;

    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);

      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }

    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }

    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }

    ch = state.input.charCodeAt(++state.position);
  }

  captureSegment(state, captureStart, captureEnd, false);

  if (state.result) {
    return true;
  }

  state.kind = _kind;
  state.result = _result;
  return false;
}

function readSingleQuotedScalar(state, nodeIndent) {
  var ch,
      captureStart, captureEnd;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x27/* ' */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27/* ' */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (ch === 0x27/* ' */) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a single quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a single quoted scalar');
}

function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart,
      captureEnd,
      hexLength,
      hexResult,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x22/* " */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22/* " */) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;

    } else if (ch === 0x5C/* \ */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);

        // TODO: rework to inline fn with no type cast?
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;

      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;

        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);

          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;

          } else {
            throwError(state, 'expected hexadecimal character');
          }
        }

        state.result += charFromCodepoint(hexResult);

        state.position++;

      } else {
        throwError(state, 'unknown escape sequence');
      }

      captureStart = captureEnd = state.position;

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a double quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a double quoted scalar');
}

function readFlowCollection(state, nodeIndent) {
  var readNext = true,
      _line,
      _lineStart,
      _pos,
      _tag     = state.tag,
      _result,
      _anchor  = state.anchor,
      following,
      terminator,
      isPair,
      isExplicitPair,
      isMapping,
      overridableKeys = Object.create(null),
      keyNode,
      keyTag,
      valueNode,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x5B/* [ */) {
    terminator = 0x5D;/* ] */
    isMapping = false;
    _result = [];
  } else if (ch === 0x7B/* { */) {
    terminator = 0x7D;/* } */
    isMapping = true;
    _result = {};
  } else {
    return false;
  }

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(++state.position);

  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? 'mapping' : 'sequence';
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries');
    } else if (ch === 0x2C/* , */) {
      // "flow collection entries can never be completely empty", as per YAML 1.2, section 7.4
      throwError(state, "expected the node content, but found ','");
    }

    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;

    if (ch === 0x3F/* ? */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }

    _line = state.line; // Save the current line.
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }

    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }

    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === 0x2C/* , */) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }

  throwError(state, 'unexpected end of the stream within a flow collection');
}

function readBlockScalar(state, nodeIndent) {
  var captureStart,
      folding,
      chomping       = CHOMPING_CLIP,
      didReadContent = false,
      detectedIndent = false,
      textIndent     = nodeIndent,
      emptyLines     = 0,
      atMoreIndented = false,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x7C/* | */) {
    folding = false;
  } else if (ch === 0x3E/* > */) {
    folding = true;
  } else {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';

  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);

    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {
      if (CHOMPING_CLIP === chomping) {
        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, 'repeat of a chomping mode identifier');
      }

    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, 'repeat of an indentation width identifier');
      }

    } else {
      break;
    }
  }

  if (is_WHITE_SPACE(ch)) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (is_WHITE_SPACE(ch));

    if (ch === 0x23/* # */) {
      do { ch = state.input.charCodeAt(++state.position); }
      while (!is_EOL(ch) && (ch !== 0));
    }
  }

  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;

    ch = state.input.charCodeAt(state.position);

    while ((!detectedIndent || state.lineIndent < textIndent) &&
           (ch === 0x20/* Space */)) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }

    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }

    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }

    // End of the scalar.
    if (state.lineIndent < textIndent) {

      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) { // i.e. only if the scalar is not empty.
          state.result += '\n';
        }
      }

      // Break this `while` cycle and go to the funciton's epilogue.
      break;
    }

    // Folded style: use fancy rules to handle line breaks.
    if (folding) {

      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        // except for the first content line (cf. Example 8.1)
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);

      // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat('\n', emptyLines + 1);

      // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) { // i.e. only if we have already read some scalar content.
          state.result += ' ';
        }

      // Several line breaks - perceive as different lines.
      } else {
        state.result += common.repeat('\n', emptyLines);
      }

    // Literal style: just add exact number of line breaks between content lines.
    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
    }

    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;

    while (!is_EOL(ch) && (ch !== 0)) {
      ch = state.input.charCodeAt(++state.position);
    }

    captureSegment(state, captureStart, state.position, false);
  }

  return true;
}

function readBlockSequence(state, nodeIndent) {
  var _line,
      _tag      = state.tag,
      _anchor   = state.anchor,
      _result   = [],
      following,
      detected  = false,
      ch;

  // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar
  if (state.firstTabInLine !== -1) return false;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }

    if (ch !== 0x2D/* - */) {
      break;
    }

    following = state.input.charCodeAt(state.position + 1);

    if (!is_WS_OR_EOL(following)) {
      break;
    }

    detected = true;
    state.position++;

    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
      throwError(state, 'bad indentation of a sequence entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'sequence';
    state.result = _result;
    return true;
  }
  return false;
}

function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
      allowCompact,
      _line,
      _keyLine,
      _keyLineStart,
      _keyPos,
      _tag          = state.tag,
      _anchor       = state.anchor,
      _result       = {},
      overridableKeys = Object.create(null),
      keyTag        = null,
      keyNode       = null,
      valueNode     = null,
      atExplicitKey = false,
      detected      = false,
      ch;

  // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar
  if (state.firstTabInLine !== -1) return false;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }

    following = state.input.charCodeAt(state.position + 1);
    _line = state.line; // Save the current line.

    //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //
    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {

      if (ch === 0x3F/* ? */) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }

        detected = true;
        atExplicitKey = true;
        allowCompact = true;

      } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false;
        allowCompact = true;

      } else {
        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
      }

      state.position += 1;
      ch = following;

    //
    // Implicit notation case. Flow-style node as the key first, then ":", and the value.
    //
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;

      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        // Neither implicit nor explicit notation.
        // Reading is done. Go to the epilogue.
        break;
      }

      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);

        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (ch === 0x3A/* : */) {
          ch = state.input.charCodeAt(++state.position);

          if (!is_WS_OR_EOL(ch)) {
            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
          }

          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }

          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;

        } else if (detected) {
          throwError(state, 'can not read an implicit mapping pair; a colon is missed');

        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true; // Keep the result of `composeNode`.
        }

      } else if (detected) {
        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');

      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true; // Keep the result of `composeNode`.
      }
    }

    //
    // Common reading code for both explicit and implicit notations.
    //
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }

      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }

      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }

      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }

    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
      throwError(state, 'bad indentation of a mapping entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  //
  // Epilogue.
  //

  // Special case: last mapping's node contains only the key in explicit notation.
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }

  // Expose the resulting mapping.
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'mapping';
    state.result = _result;
  }

  return detected;
}

function readTagProperty(state) {
  var _position,
      isVerbatim = false,
      isNamed    = false,
      tagHandle,
      tagName,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x21/* ! */) return false;

  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property');
  }

  ch = state.input.charCodeAt(++state.position);

  if (ch === 0x3C/* < */) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);

  } else if (ch === 0x21/* ! */) {
    isNamed = true;
    tagHandle = '!!';
    ch = state.input.charCodeAt(++state.position);

  } else {
    tagHandle = '!';
  }

  _position = state.position;

  if (isVerbatim) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (ch !== 0 && ch !== 0x3E/* > */);

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag');
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {

      if (ch === 0x21/* ! */) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);

          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, 'named tag handle cannot contain such characters');
          }

          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, 'tag suffix cannot contain exclamation marks');
        }
      }

      ch = state.input.charCodeAt(++state.position);
    }

    tagName = state.input.slice(_position, state.position);

    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
  }

  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName);
  }

  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, 'tag name is malformed: ' + tagName);
  }

  if (isVerbatim) {
    state.tag = tagName;

  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;

  } else if (tagHandle === '!') {
    state.tag = '!' + tagName;

  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName;

  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }

  return true;
}

function readAnchorProperty(state) {
  var _position,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x26/* & */) return false;

  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property');
  }

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an anchor node must contain at least one character');
  }

  state.anchor = state.input.slice(_position, state.position);
  return true;
}

function readAlias(state) {
  var _position, alias,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x2A/* * */) return false;

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an alias node must contain at least one character');
  }

  alias = state.input.slice(_position, state.position);

  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }

  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}

function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles,
      allowBlockScalars,
      allowBlockCollections,
      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent
      atNewLine  = false,
      hasContent = false,
      typeIndex,
      typeQuantity,
      typeList,
      type,
      flowIndent,
      blockIndent;

  if (state.listener !== null) {
    state.listener('open', state);
  }

  state.tag    = null;
  state.anchor = null;
  state.kind   = null;
  state.result = null;

  allowBlockStyles = allowBlockScalars = allowBlockCollections =
    CONTEXT_BLOCK_OUT === nodeContext ||
    CONTEXT_BLOCK_IN  === nodeContext;

  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;

      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }

  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;

        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }

  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }

  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }

    blockIndent = state.position - state.lineStart;

    if (indentStatus === 1) {
      if (allowBlockCollections &&
          (readBlockSequence(state, blockIndent) ||
           readBlockMapping(state, blockIndent, flowIndent)) ||
          readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||
            readSingleQuotedScalar(state, flowIndent) ||
            readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;

        } else if (readAlias(state)) {
          hasContent = true;

          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties');
          }

        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;

          if (state.tag === null) {
            state.tag = '?';
          }
        }

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }

  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }

  } else if (state.tag === '?') {
    // Implicit resolving is not allowed for non-scalar types, and '?'
    // non-specific tag is only automatically assigned to plain scalars.
    //
    // We only need to check kind conformity in case user explicitly assigns '?'
    // tag, for example like this: "!<?> [0]"
    //
    if (state.result !== null && state.kind !== 'scalar') {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }

    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type = state.implicitTypes[typeIndex];

      if (type.resolve(state.result)) { // `state.result` updated in resolver if matched
        state.result = type.construct(state.result);
        state.tag = type.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== '!') {
    if (_hasOwnProperty$1.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
      type = state.typeMap[state.kind || 'fallback'][state.tag];
    } else {
      // looking for multi type
      type = null;
      typeList = state.typeMap.multi[state.kind || 'fallback'];

      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type = typeList[typeIndex];
          break;
        }
      }
    }

    if (!type) {
      throwError(state, 'unknown tag !<' + state.tag + '>');
    }

    if (state.result !== null && type.kind !== state.kind) {
      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
    }

    if (!type.resolve(state.result, state.tag)) { // `state.result` updated in resolver if matched
      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
    } else {
      state.result = type.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }

  if (state.listener !== null) {
    state.listener('close', state);
  }
  return state.tag !== null ||  state.anchor !== null || hasContent;
}

function readDocument(state) {
  var documentStart = state.position,
      _position,
      directiveName,
      directiveArgs,
      hasDirectives = false,
      ch;

  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = Object.create(null);
  state.anchorMap = Object.create(null);

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if (state.lineIndent > 0 || ch !== 0x25/* % */) {
      break;
    }

    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;

    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];

    if (directiveName.length < 1) {
      throwError(state, 'directive name must not be less than one character in length');
    }

    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (ch === 0x23/* # */) {
        do { ch = state.input.charCodeAt(++state.position); }
        while (ch !== 0 && !is_EOL(ch));
        break;
      }

      if (is_EOL(ch)) break;

      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      directiveArgs.push(state.input.slice(_position, state.position));
    }

    if (ch !== 0) readLineBreak(state);

    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }

  skipSeparationSpace(state, true, -1);

  if (state.lineIndent === 0 &&
      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);

  } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected');
  }

  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);

  if (state.checkLineBreaks &&
      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
  }

  state.documents.push(state.result);

  if (state.position === state.lineStart && testDocumentSeparator(state)) {

    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }

  if (state.position < (state.length - 1)) {
    throwError(state, 'end of the stream or a document separator is expected');
  } else {
    return;
  }
}


function loadDocuments(input, options) {
  input = String(input);
  options = options || {};

  if (input.length !== 0) {

    // Add tailing `\n` if not exists
    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&
        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {
      input += '\n';
    }

    // Strip BOM
    if (input.charCodeAt(0) === 0xFEFF) {
      input = input.slice(1);
    }
  }

  var state = new State$1(input, options);

  var nullpos = input.indexOf('\0');

  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, 'null byte is not allowed in input');
  }

  // Use 0 as string terminator. That significantly simplifies bounds check.
  state.input += '\0';

  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {
    state.lineIndent += 1;
    state.position += 1;
  }

  while (state.position < (state.length - 1)) {
    readDocument(state);
  }

  return state.documents;
}


function load$1(input, options) {
  var documents = loadDocuments(input, options);

  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new exception('expected a single document in the stream, but found more');
}
var load_1    = load$1;

var loader = {
	load: load_1
};

/*eslint-disable no-use-before-define*/





var _toString       = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;

var CHAR_BOM                  = 0xFEFF;
var CHAR_TAB                  = 0x09; /* Tab */
var CHAR_LINE_FEED            = 0x0A; /* LF */
var CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */
var CHAR_SPACE                = 0x20; /* Space */
var CHAR_EXCLAMATION          = 0x21; /* ! */
var CHAR_DOUBLE_QUOTE         = 0x22; /* " */
var CHAR_SHARP                = 0x23; /* # */
var CHAR_PERCENT              = 0x25; /* % */
var CHAR_AMPERSAND            = 0x26; /* & */
var CHAR_SINGLE_QUOTE         = 0x27; /* ' */
var CHAR_ASTERISK             = 0x2A; /* * */
var CHAR_COMMA                = 0x2C; /* , */
var CHAR_MINUS                = 0x2D; /* - */
var CHAR_COLON                = 0x3A; /* : */
var CHAR_EQUALS               = 0x3D; /* = */
var CHAR_GREATER_THAN         = 0x3E; /* > */
var CHAR_QUESTION             = 0x3F; /* ? */
var CHAR_COMMERCIAL_AT        = 0x40; /* @ */
var CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */
var CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */
var CHAR_GRAVE_ACCENT         = 0x60; /* ` */
var CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */
var CHAR_VERTICAL_LINE        = 0x7C; /* | */
var CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */

var ESCAPE_SEQUENCES = {};

ESCAPE_SEQUENCES[0x00]   = '\\0';
ESCAPE_SEQUENCES[0x07]   = '\\a';
ESCAPE_SEQUENCES[0x08]   = '\\b';
ESCAPE_SEQUENCES[0x09]   = '\\t';
ESCAPE_SEQUENCES[0x0A]   = '\\n';
ESCAPE_SEQUENCES[0x0B]   = '\\v';
ESCAPE_SEQUENCES[0x0C]   = '\\f';
ESCAPE_SEQUENCES[0x0D]   = '\\r';
ESCAPE_SEQUENCES[0x1B]   = '\\e';
ESCAPE_SEQUENCES[0x22]   = '\\"';
ESCAPE_SEQUENCES[0x5C]   = '\\\\';
ESCAPE_SEQUENCES[0x85]   = '\\N';
ESCAPE_SEQUENCES[0xA0]   = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';

var DEPRECATED_BOOLEANS_SYNTAX = [
  'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',
  'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'
];

var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;

function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type;

  if (map === null) return {};

  result = {};
  keys = Object.keys(map);

  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map[tag]);

    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2);
    }
    type = schema.compiledTypeMap['fallback'][tag];

    if (type && _hasOwnProperty.call(type.styleAliases, style)) {
      style = type.styleAliases[style];
    }

    result[tag] = style;
  }

  return result;
}

function encodeHex(character) {
  var string, handle, length;

  string = character.toString(16).toUpperCase();

  if (character <= 0xFF) {
    handle = 'x';
    length = 2;
  } else if (character <= 0xFFFF) {
    handle = 'u';
    length = 4;
  } else if (character <= 0xFFFFFFFF) {
    handle = 'U';
    length = 8;
  } else {
    throw new exception('code point within a string may not be greater than 0xFFFFFFFF');
  }

  return '\\' + handle + common.repeat('0', length - string.length) + string;
}


var QUOTING_TYPE_SINGLE = 1,
    QUOTING_TYPE_DOUBLE = 2;

function State(options) {
  this.schema        = options['schema'] || _default;
  this.indent        = Math.max(1, (options['indent'] || 2));
  this.noArrayIndent = options['noArrayIndent'] || false;
  this.skipInvalid   = options['skipInvalid'] || false;
  this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);
  this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);
  this.sortKeys      = options['sortKeys'] || false;
  this.lineWidth     = options['lineWidth'] || 80;
  this.noRefs        = options['noRefs'] || false;
  this.noCompatMode  = options['noCompatMode'] || false;
  this.condenseFlow  = options['condenseFlow'] || false;
  this.quotingType   = options['quotingType'] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes   = options['forceQuotes'] || false;
  this.replacer      = typeof options['replacer'] === 'function' ? options['replacer'] : null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;

  this.tag = null;
  this.result = '';

  this.duplicates = [];
  this.usedDuplicates = null;
}

// Indents every line in a string. Empty lines (\n only) are not indented.
function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
      position = 0,
      next = -1,
      result = '',
      line,
      length = string.length;

  while (position < length) {
    next = string.indexOf('\n', position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }

    if (line.length && line !== '\n') result += ind;

    result += line;
  }

  return result;
}

function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level);
}

function testImplicitResolving(state, str) {
  var index, length, type;

  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type = state.implicitTypes[index];

    if (type.resolve(str)) {
      return true;
    }
  }

  return false;
}

// [33] s-white ::= s-space | s-tab
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}

// Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
function isPrintable(c) {
  return  (0x00020 <= c && c <= 0x00007E)
      || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)
      || ((0x0E000 <= c && c <= 0x00FFFD) && c !== CHAR_BOM)
      ||  (0x10000 <= c && c <= 0x10FFFF);
}

// [34] ns-char ::= nb-char - s-white
// [27] nb-char ::= c-printable - b-char - c-byte-order-mark
// [26] b-char  ::= b-line-feed | b-carriage-return
// Including s-white (for some reason, examples doesn't match specs in this aspect)
// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark
function isNsCharOrWhitespace(c) {
  return isPrintable(c)
    && c !== CHAR_BOM
    // - b-char
    && c !== CHAR_CARRIAGE_RETURN
    && c !== CHAR_LINE_FEED;
}

// [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out
//                             c = flow-in   ⇒ ns-plain-safe-in
//                             c = block-key ⇒ ns-plain-safe-out
//                             c = flow-key  ⇒ ns-plain-safe-in
// [128] ns-plain-safe-out ::= ns-char
// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator
// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )
//                            | ( /* An ns-char preceding */ “#” )
//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (
    // ns-plain-safe
    inblock ? // c = flow-in
      cIsNsCharOrWhitespace
      : cIsNsCharOrWhitespace
        // - c-flow-indicator
        && c !== CHAR_COMMA
        && c !== CHAR_LEFT_SQUARE_BRACKET
        && c !== CHAR_RIGHT_SQUARE_BRACKET
        && c !== CHAR_LEFT_CURLY_BRACKET
        && c !== CHAR_RIGHT_CURLY_BRACKET
  )
    // ns-plain-char
    && c !== CHAR_SHARP // false on '#'
    && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '
    || (isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP) // change to true on '[^ ]#'
    || (prev === CHAR_COLON && cIsNsChar); // change to true on ':[^ ]'
}

// Simplified test for values allowed as the first character in plain style.
function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part
  return isPrintable(c) && c !== CHAR_BOM
    && !isWhitespace(c) // - s-white
    // - (c-indicator ::=
    // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
    && c !== CHAR_MINUS
    && c !== CHAR_QUESTION
    && c !== CHAR_COLON
    && c !== CHAR_COMMA
    && c !== CHAR_LEFT_SQUARE_BRACKET
    && c !== CHAR_RIGHT_SQUARE_BRACKET
    && c !== CHAR_LEFT_CURLY_BRACKET
    && c !== CHAR_RIGHT_CURLY_BRACKET
    // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
    && c !== CHAR_SHARP
    && c !== CHAR_AMPERSAND
    && c !== CHAR_ASTERISK
    && c !== CHAR_EXCLAMATION
    && c !== CHAR_VERTICAL_LINE
    && c !== CHAR_EQUALS
    && c !== CHAR_GREATER_THAN
    && c !== CHAR_SINGLE_QUOTE
    && c !== CHAR_DOUBLE_QUOTE
    // | “%” | “@” | “`”)
    && c !== CHAR_PERCENT
    && c !== CHAR_COMMERCIAL_AT
    && c !== CHAR_GRAVE_ACCENT;
}

// Simplified test for values allowed as the last character in plain style.
function isPlainSafeLast(c) {
  // just not whitespace or colon, it will be checked to be plain character later
  return !isWhitespace(c) && c !== CHAR_COLON;
}

// Same as 'string'.codePointAt(pos), but works in older browsers.
function codePointAt(string, pos) {
  var first = string.charCodeAt(pos), second;
  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);
    if (second >= 0xDC00 && second <= 0xDFFF) {
      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
    }
  }
  return first;
}

// Determines whether block indentation indicator is required.
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}

var STYLE_PLAIN   = 1,
    STYLE_SINGLE  = 2,
    STYLE_LITERAL = 3,
    STYLE_FOLDED  = 4,
    STYLE_DOUBLE  = 5;

// Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth,
  testAmbiguousType, quotingType, forceQuotes, inblock) {

  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false; // only checked if shouldTrackWidth
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1; // count the first line correctly
  var plain = isPlainSafeFirst(codePointAt(string, 0))
          && isPlainSafeLast(codePointAt(string, string.length - 1));

  if (singleLineOnly || forceQuotes) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        // Check if any line can be folded.
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine ||
            // Foldable line = too long, and not more-indented.
            (i - previousLineBreak - 1 > lineWidth &&
             string[previousLineBreak + 1] !== ' ');
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    // in case the end is missing a \n
    hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&
      (i - previousLineBreak - 1 > lineWidth &&
       string[previousLineBreak + 1] !== ' '));
  }
  // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.
  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  // Edge case: block indentation indicator can only have one digit.
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}

// Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.
function writeScalar(state, string, level, iskey, inblock) {
  state.dump = (function () {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? ('"' + string + '"') : ("'" + string + "'");
      }
    }

    var indent = state.indent * Math.max(1, level); // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.
    var lineWidth = state.lineWidth === -1
      ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);

    // Without knowing if keys are implicit/explicit, assume implicit for safety.
    var singleLineOnly = iskey
      // No block styles in flow mode.
      || (state.flowLevel > -1 && level >= state.flowLevel);
    function testAmbiguity(string) {
      return testImplicitResolving(state, string);
    }

    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth,
      testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {

      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return '|' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return '>' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string) + '"';
      default:
        throw new exception('impossible error: invalid scalar style');
    }
  }());
}

// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';

  // note the special case: the string '\n' counts as a "trailing" empty line.
  var clip =          string[string.length - 1] === '\n';
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
  var chomp = keep ? '+' : (clip ? '' : '-');

  return indentIndicator + chomp + '\n';
}

// (See the note for writeScalar.)
function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
}

// Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.
function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g;

  // first line (possibly an empty line)
  var result = (function () {
    var nextLF = string.indexOf('\n');
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }());
  // If we haven't reached the first content line yet, don't add an extra \n.
  var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
  var moreIndented;

  // rest of the lines
  var match;
  while ((match = lineRe.exec(string))) {
    var prefix = match[1], line = match[2];
    moreIndented = (line[0] === ' ');
    result += prefix
      + (!prevMoreIndented && !moreIndented && line !== ''
        ? '\n' : '')
      + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }

  return result;
}

// Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.
function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line;

  // Since a more-indented line adds a \n, breaks can't be followed by a space.
  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.
  var match;
  // start is an inclusive index. end, curr, and next are exclusive.
  var start = 0, end, curr = 0, next = 0;
  var result = '';

  // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.
  while ((match = breakRe.exec(line))) {
    next = match.index;
    // maintain invariant: curr - start <= width
    if (next - start > width) {
      end = (curr > start) ? curr : next; // derive end <= length-2
      result += '\n' + line.slice(start, end);
      // skip the space that was output as \n
      start = end + 1;                    // derive start <= length-1
    }
    curr = next;
  }

  // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.
  result += '\n';
  // Insert a break if the remainder is too long and there is a break available.
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }

  return result.slice(1); // drop extra \n joiner
}

// Escapes a double-quoted string.
function escapeString(string) {
  var result = '';
  var char = 0;
  var escapeSeq;

  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];

    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 0x10000) result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }

  return result;
}

function writeFlowSequence(state, level, object) {
  var _result = '',
      _tag    = state.tag,
      index,
      length,
      value;

  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];

    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }

    // Write only valid elements, put null instead of invalid elements.
    if (writeNode(state, level, value, false, false) ||
        (typeof value === 'undefined' &&
         writeNode(state, level, null, false, false))) {

      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');
      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = '[' + _result + ']';
}

function writeBlockSequence(state, level, object, compact) {
  var _result = '',
      _tag    = state.tag,
      index,
      length,
      value;

  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];

    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }

    // Write only valid elements, put null instead of invalid elements.
    if (writeNode(state, level + 1, value, true, true, false, true) ||
        (typeof value === 'undefined' &&
         writeNode(state, level + 1, null, true, true, false, true))) {

      if (!compact || _result !== '') {
        _result += generateNextLine(state, level);
      }

      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-';
      } else {
        _result += '- ';
      }

      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = _result || '[]'; // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      pairBuffer;

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {

    pairBuffer = '';
    if (_result !== '') pairBuffer += ', ';

    if (state.condenseFlow) pairBuffer += '"';

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }

    if (!writeNode(state, level, objectKey, false, false)) {
      continue; // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? ';

    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

    if (!writeNode(state, level, objectValue, false, false)) {
      continue; // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = '{' + _result + '}';
}

function writeBlockMapping(state, level, object, compact) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      explicitPair,
      pairBuffer;

  // Allow sorting keys so that the output file is deterministic
  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort();
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    // Something is wrong
    throw new exception('sortKeys must be a boolean or a function');
  }

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';

    if (!compact || _result !== '') {
      pairBuffer += generateNextLine(state, level);
    }

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }

    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue; // Skip this pair because of invalid key.
    }

    explicitPair = (state.tag !== null && state.tag !== '?') ||
                   (state.dump && state.dump.length > 1024);

    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?';
      } else {
        pairBuffer += '? ';
      }
    }

    pairBuffer += state.dump;

    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }

    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue; // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':';
    } else {
      pairBuffer += ': ';
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style;

  typeList = explicit ? state.explicitTypes : state.implicitTypes;

  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index];

    if ((type.instanceOf  || type.predicate) &&
        (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&
        (!type.predicate  || type.predicate(object))) {

      if (explicit) {
        if (type.multi && type.representName) {
          state.tag = type.representName(object);
        } else {
          state.tag = type.tag;
        }
      } else {
        state.tag = '?';
      }

      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle;

        if (_toString.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style);
        } else if (_hasOwnProperty.call(type.represent, style)) {
          _result = type.represent[style](object, style);
        } else {
          throw new exception('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
        }

        state.dump = _result;
      }

      return true;
    }
  }

  return false;
}

// Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;

  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }

  var type = _toString.call(state.dump);
  var inblock = block;
  var tagStr;

  if (block) {
    block = (state.flowLevel < 0 || state.flowLevel > level);
  }

  var objectOrArray = type === '[object Object]' || type === '[object Array]',
      duplicateIndex,
      duplicate;

  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }

  if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {
    compact = false;
  }

  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type === '[object Object]') {
      if (block && (Object.keys(state.dump).length !== 0)) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object Array]') {
      if (block && (state.dump.length !== 0)) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type === '[object Undefined]') {
      return false;
    } else {
      if (state.skipInvalid) return false;
      throw new exception('unacceptable kind of an object to dump ' + type);
    }

    if (state.tag !== null && state.tag !== '?') {
      // Need to encode all characters except those allowed by the spec:
      //
      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */
      // [36] ns-hex-digit    ::=  ns-dec-digit
      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */
      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */
      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”
      // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”
      //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”
      //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”
      //
      // Also need to encode '!' because it has special meaning (end of tag prefix).
      //
      tagStr = encodeURI(
        state.tag[0] === '!' ? state.tag.slice(1) : state.tag
      ).replace(/!/g, '%21');

      if (state.tag[0] === '!') {
        tagStr = '!' + tagStr;
      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {
        tagStr = '!!' + tagStr.slice(18);
      } else {
        tagStr = '!<' + tagStr + '>';
      }

      state.dump = tagStr + ' ' + state.dump;
    }
  }

  return true;
}

function getDuplicateReferences(object, state) {
  var objects = [],
      duplicatesIndexes = [],
      index,
      length;

  inspectNode(object, objects, duplicatesIndexes);

  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}

function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList,
      index,
      length;

  if (object !== null && typeof object === 'object') {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);

      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);

        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}

function dump$1(input, options) {
  options = options || {};

  var state = new State(options);

  if (!state.noRefs) getDuplicateReferences(input, state);

  var value = input;

  if (state.replacer) {
    value = state.replacer.call({ '': value }, '', value);
  }

  if (writeNode(state, 0, value, true, true)) return state.dump + '\n';

  return '';
}

var dump_1 = dump$1;

var dumper = {
	dump: dump_1
};
var load                = loader.load;
var dump                = dumper.dump;

const sillyArguments = [
    {
        category: 'Command Line Arguments',
        items: [
            { name: '--version', description: 'Show version number', type: 'CheckBox' },
            { name: '--global', description: 'Forces the use of system-wide paths for application data', type: 'CheckBox' },
            {
                name: '--configPath',
                description: 'Overrides the path to the config.yaml file (standalone mode only)',
                type: 'File',
            },
            {
                name: '--dataRoot',
                description: 'Sets the root directory for data storage (standalone mode only)',
                type: 'Directory',
            },
            {
                name: '--port',
                description: "Sets the port under which SillyTavern will run. If not provided falls back to yaml config 'port'.",
                type: 'Input',
            },
            {
                name: '--listen',
                description: "SillyTavern is listening on all network interfaces. If not provided falls back to yaml config 'listen'.",
                type: 'CheckBox',
            },
            { name: '--whitelist', description: 'Enables whitelist mode', type: 'CheckBox' },
            { name: '--basicAuthMode', description: 'Enables basic authentication', type: 'CheckBox' },
            { name: '--enableIPv4', description: 'Enables the IPv4 protocol', type: 'CheckBox' },
            { name: '--enableIPv6', description: 'Enables the IPv6 protocol', type: 'CheckBox' },
            { name: '--listenAddressIPv4', description: 'Specifies the IPv4 address to listen on', type: 'Input' },
            { name: '--listenAddressIPv6', description: 'Specifies the IPv6 address to listen on', type: 'Input' },
            {
                name: '--dnsPreferIPv6',
                description: "Prefers IPv6 for dns. If not provided falls back to yaml config 'preferIPv6'.",
                type: 'CheckBox',
            },
            { name: '--ssl', description: 'Enables SSL', type: 'CheckBox' },
            { name: '--certPath', description: 'Path to your certificate file.', type: 'File' },
            { name: '--keyPath', description: 'Path to your private key file.', type: 'File' },
            {
                name: '--browserLaunchEnabled',
                description: 'Automatically launches SillyTavern in the browser.',
                type: 'CheckBox',
            },
            { name: '--browserLaunchHostname', description: 'Sets the browser launch hostname', type: 'Input' },
            { name: '--browserLaunchPort', description: 'Overrides the port for browser launch', type: 'Input' },
            {
                name: '--browserLaunchAvoidLocalhost',
                description: "Avoids using 'localhost' for browser launch in auto mode",
                type: 'CheckBox',
            },
            {
                name: '--corsProxy',
                description: "Enables CORS proxy. If not provided falls back to yaml config 'enableCorsProxy'.",
                type: 'CheckBox',
            },
            { name: '--requestProxyEnabled', description: 'Enables a use of proxy for outgoing requests', type: 'CheckBox' },
            { name: '--requestProxyUrl', description: 'Request proxy URL (HTTP or SOCKS protocols)', type: 'Input' },
            {
                name: '--requestProxyBypass',
                description: 'Request proxy bypass list (space separated list of hosts)',
                type: 'Input',
            },
            { name: '--disableCsrf', description: 'Disables CSRF protection', type: 'CheckBox' },
        ],
    },
    {
        category: 'Configuration',
        sections: [
            {
                section: 'Data Configuration',
                items: [
                    {
                        name: 'dataRoot',
                        description: 'Root directory for user data storage (standalone mode only)',
                        type: 'Directory',
                    },
                    {
                        name: 'skipContentCheck',
                        description: 'Skip new default content checks',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                    {
                        name: 'enableDownloadableTokenizers',
                        description: 'Enable on-demand tokenizer downloads',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                ],
            },
            {
                section: 'Logging Configuration',
                items: [
                    {
                        name: 'logging.minLogLevel',
                        description: 'Minimum log level to display in the terminal',
                        type: 'DropDown',
                        defaultValue: 0,
                        values: ['0 (DEBUG)', '1 (INFO)', '2 (WARN)', '3 (ERROR)'],
                    },
                    {
                        name: 'logging.enableAccessLog',
                        description: 'Write server access log to file and console',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                ],
            },
            {
                section: 'Network Configuration',
                items: [
                    {
                        name: 'listen',
                        description: 'Enable listening for incoming connections',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                    { name: 'port', description: 'Server listening port', type: 'Input', defaultValue: 8000 },
                    {
                        name: 'protocol.ipv4',
                        description: 'Enable listening on IPv4 protocol',
                        type: 'DropDown',
                        defaultValue: 'true',
                        values: ['true', 'false', 'auto'],
                    },
                    {
                        name: 'protocol.ipv6',
                        description: 'Enable listening on IPv6 protocol',
                        type: 'DropDown',
                        defaultValue: 'false',
                        values: ['true', 'false', 'auto'],
                    },
                    {
                        name: 'listenAddress.ipv4',
                        description: 'Listen on specific IPv4 address',
                        type: 'Input',
                        defaultValue: '0.0.0.0',
                    },
                    {
                        name: 'listenAddress.ipv6',
                        description: 'Listen on specific IPv6 address',
                        type: 'Input',
                        defaultValue: '[::]',
                    },
                    { name: 'dnsPreferIPv6', description: 'Prefer IPv6 for DNS resolution', type: 'CheckBox', defaultValue: false },
                ],
            },
            {
                section: 'SSL Configuration',
                items: [
                    { name: 'ssl.enabled', description: 'Enable SSL/TLS', type: 'CheckBox', defaultValue: false },
                    {
                        name: 'ssl.keyPath',
                        description: 'Path to SSL private key',
                        type: 'File',
                        defaultValue: './certs/privkey.pem',
                    },
                    {
                        name: 'ssl.certPath',
                        description: 'Path to SSL certificate',
                        type: 'File',
                        defaultValue: './certs/cert.pem',
                    },
                ],
            },
            {
                section: 'Security Configuration',
                items: [
                    { name: 'whitelistMode', description: 'Enable IP whitelist filtering', type: 'CheckBox', defaultValue: true },
                    {
                        name: 'enableForwardedWhitelist',
                        description: 'Check forwarded headers for whitelisted IPs',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                    {
                        name: 'whitelist',
                        description: 'List of allowed IP addresses',
                        type: 'Input',
                        defaultValue: '["::1", "127.0.0.1"]',
                    }, // Note: Representing an array as a string for now.
                    {
                        name: 'whitelistDockerHosts',
                        description: 'Automatically whitelist Docker host IPs',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                    { name: 'enableCorsProxy', description: 'Enable CORS proxy middleware', type: 'CheckBox', defaultValue: false },
                    {
                        name: 'allowKeysExposure',
                        description: 'Allow API keys exposure in the UI',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                    {
                        name: 'disableCsrfProtection',
                        description: 'Disable CSRF protection (not recommended)',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                    {
                        name: 'securityOverride',
                        description: 'Disable startup security checks (not recommended)',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                ],
            },
            {
                section: 'User Authentication',
                items: [
                    { name: 'basicAuthMode', description: 'Enable basic authentication', type: 'CheckBox', defaultValue: false },
                    { name: 'basicAuthUser.username', description: 'Basic auth username', type: 'Input', defaultValue: 'user' },
                    { name: 'basicAuthUser.password', description: 'Basic auth password', type: 'Input', defaultValue: 'password' },
                    { name: 'enableUserAccounts', description: 'Enable multi-user mode', type: 'CheckBox', defaultValue: false },
                    {
                        name: 'enableDiscreetLogin',
                        description: 'Hide user list on login screen',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                    { name: 'sessionTimeout', description: 'User session timeout in seconds', type: 'Input', defaultValue: -1 },
                    {
                        name: 'autheliaAuth',
                        description: 'Enable Authelia-based auto login',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                    {
                        name: 'perUserBasicAuth',
                        description: 'Use account credentials for basic auth',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                ],
            },
            {
                section: 'Rate Limiting Configuration',
                items: [
                    {
                        name: 'rateLimiting.preferRealIpHeader',
                        description: 'Use X-Real-IP header instead of socket IP for rate limiting',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                ],
            },
            {
                section: 'Request Proxy Configuration',
                items: [
                    {
                        name: 'requestProxy.enabled',
                        description: 'Enable proxy for outgoing requests',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                    { name: 'requestProxy.url', description: 'Proxy server URL', type: 'Input' },
                    { name: 'requestProxy.bypass', description: 'Hosts to bypass proxy', type: 'Input' },
                ],
            },
            {
                section: 'Browser Launch Configuration',
                items: [
                    {
                        name: 'browserLaunch.enabled',
                        description: 'Open the browser automatically on server startup',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                    {
                        name: 'browserLaunch.browser',
                        description: 'Browser to use for opening the URL',
                        type: 'DropDown',
                        defaultValue: 'default',
                        values: ['default', 'chrome', 'firefox', 'edge', 'brave'],
                    },
                    {
                        name: 'browserLaunch.hostname',
                        description: 'Override the hostname for browser launch',
                        type: 'Input',
                        defaultValue: 'auto',
                    },
                    {
                        name: 'browserLaunch.port',
                        description: 'Override the port for browser launch',
                        type: 'Input',
                        defaultValue: -1,
                    },
                    {
                        name: 'browserLaunch.avoidLocalhost',
                        description: "Avoid using 'localhost' in a launch URL",
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                ],
            },
            {
                section: 'Performance Configuration',
                items: [
                    {
                        name: 'performance.lazyLoadCharacters',
                        description: 'Lazy-load character data',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                    {
                        name: 'performance.useDiskCache',
                        description: 'Enables disk caching for character cards',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                    {
                        name: 'performance.memoryCacheCapacity',
                        description: 'Maximum memory cache capacity',
                        type: 'Input',
                        defaultValue: '100mb',
                    },
                ],
            },
            {
                section: 'Cache Buster Configuration',
                items: [
                    {
                        name: 'cacheBuster.enabled',
                        description: 'Clear browser cache on first load or after uploading image files',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                    {
                        name: 'cacheBuster.userAgentPattern',
                        description: 'Only clear cache for the specified user agent regex pattern.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Thumbnailing Configuration',
                items: [
                    {
                        name: 'thumbnails.enabled',
                        description: 'Enable thumbnail generation',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                    { name: 'thumbnails.quality', description: 'JPEG thumbnail quality', type: 'Input', defaultValue: 95 },
                    {
                        name: 'thumbnails.format',
                        description: 'Image format for thumbnails',
                        type: 'DropDown',
                        defaultValue: 'jpg',
                        values: ['jpg', 'png'],
                    },
                    {
                        name: 'thumbnails.dimensions.bg',
                        description: 'Background thumbnails size',
                        type: 'Input',
                        defaultValue: '[160, 90]',
                    },
                    {
                        name: 'thumbnails.dimensions.avatar',
                        description: 'Avatar thumbnails size',
                        type: 'Input',
                        defaultValue: '[96, 144]',
                    },
                    {
                        name: 'thumbnails.dimensions.persona',
                        description: 'Persona thumbnails size',
                        type: 'Input',
                        defaultValue: '[96, 144]',
                    },
                ],
            },
            {
                section: 'Backup Configuration',
                items: [
                    {
                        name: 'backups.chat.enabled',
                        description: 'Enable automatic chat backups',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                    {
                        name: 'backups.chat.checkIntegrity',
                        description: 'Verify integrity of chat files before saving',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                    {
                        name: 'backups.common.numberOfBackups',
                        description: 'Number of backups to keep',
                        type: 'Input',
                        defaultValue: 50,
                    },
                    {
                        name: 'backups.chat.throttleInterval',
                        description: 'Backup throttle interval (ms)',
                        type: 'Input',
                        defaultValue: 10000,
                    },
                    {
                        name: 'backups.chat.maxTotalBackups',
                        description: 'Maximum total chat backups to keep',
                        type: 'Input',
                        defaultValue: -1,
                    },
                ],
            },
            {
                section: 'Extensions Configuration',
                items: [
                    { name: 'extensions.enabled', description: 'Enable UI extensions', type: 'CheckBox', defaultValue: true },
                    {
                        name: 'extensions.autoUpdate',
                        description: 'Auto-update extensions (if enabled by the extension manifest)',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                    {
                        name: 'extensions.models.autoDownload',
                        description: 'Enable automatic model downloads',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                    {
                        name: 'extensions.models.classification',
                        description: 'HuggingFace model ID for classification',
                        type: 'Input',
                        defaultValue: 'Cohee/distilbert-base-uncased-go-emotions-onnx',
                    },
                    {
                        name: 'extensions.models.captioning',
                        description: 'HuggingFace model ID for image captioning',
                        type: 'Input',
                        defaultValue: 'Xenova/vit-gpt2-image-captioning',
                    },
                    {
                        name: 'extensions.models.embedding',
                        description: 'HuggingFace model ID for embeddings',
                        type: 'Input',
                        defaultValue: 'Cohee/jina-embeddings-v2-base-en',
                    },
                    {
                        name: 'extensions.models.speechToText',
                        description: 'HuggingFace model ID for speech-to-text',
                        type: 'Input',
                        defaultValue: 'Xenova/whisper-small',
                    },
                    {
                        name: 'extensions.models.textToSpeech',
                        description: 'HuggingFace model ID for text-to-speech',
                        type: 'Input',
                        defaultValue: 'Xenova/speecht5_tts',
                    },
                ],
            },
            {
                section: 'Server Plugins',
                items: [
                    {
                        name: 'enableServerPlugins',
                        description: 'Enable server-side plugins',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                    {
                        name: 'enableServerPluginsAutoUpdate',
                        description: 'Attempt to automatically update server plugins on startup',
                        type: 'CheckBox',
                        defaultValue: true,
                    },
                ],
            },
            {
                section: 'API Integration Settings',
                items: [
                    {
                        name: 'promptPlaceholder',
                        description: 'Default message for empty prompts',
                        type: 'Input',
                        defaultValue: '[Start a new chat]',
                    },
                    {
                        name: 'openai.randomizeUserId',
                        description: 'Randomize user ID for API calls',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                    { name: 'openai.captionSystemPrompt', description: 'System message for caption completion', type: 'Input' },
                    {
                        name: 'mistral.enablePrefix',
                        description: 'Enable reply prefilling. The prefix will be echoed in the response',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                    {
                        name: 'ollama.keepAlive',
                        description: 'Model keep-alive duration (seconds)',
                        type: 'Input',
                        defaultValue: -1,
                    },
                    {
                        name: 'ollama.batchSize',
                        description: 'Controls the "num_batch" (batch size) parameter of the generation request',
                        type: 'Input',
                        defaultValue: -1,
                    },
                    {
                        name: 'claude.enableSystemPromptCache',
                        description: 'Enable system prompt caching',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                    {
                        name: 'claude.cachingAtDepth',
                        description: 'Enable message history caching',
                        type: 'Input',
                        defaultValue: -1,
                    },
                    {
                        name: 'claude.extendedTTL',
                        description: 'Use 1h TTL instead of the default 5m.',
                        type: 'CheckBox',
                        defaultValue: false,
                    },
                    {
                        name: 'gemini.apiVersion',
                        description: 'API endpoint version',
                        type: 'DropDown',
                        defaultValue: 'v1beta',
                        values: ['v1beta', 'v1alpha'],
                    },
                    {
                        name: 'deepl.formality',
                        description: 'Translation formality level',
                        type: 'DropDown',
                        defaultValue: 'default',
                        values: ['default', 'more', 'less', 'prefer_more', 'prefer_less'],
                    },
                ],
            },
        ],
    },
];

const shellCommand$1 = isWin ? 'call start.bat' : 'bash ./start.sh';
const URL$1 = 'https://github.com/SillyTavern/SillyTavern';
/**
 * Checks if an argument is a configuration-file argument or a command-line argument.
 * @param name The name of the argument.
 * @returns {boolean | undefined} `true` if it's a config arg, `false` if it's a command-line arg, `undefined` if not found.
 */
function isConfigArg(name) {
    if (lodashExports.isEmpty(name))
        return undefined;
    for (const argument of sillyArguments) {
        // Configuration arguments are defined within 'sections'
        if ('sections' in argument) {
            for (const section of argument.sections) {
                const found = section.items.find(item => item.name === name);
                if (found)
                    return true;
            }
        }
        else {
            // Command-line arguments are directly in 'items'
            const found = argument.items.find(item => item.name === name);
            if (found)
                return false;
        }
    }
    return undefined;
}
/**
 * Finds the full definition of an argument from the sillyArguments structure.
 * @param name - The name of the argument to find.
 * @returns The argument item definition or undefined if not found.
 */
function getArgDefinition(name) {
    for (const category of sillyArguments) {
        const items = 'sections' in category ? category.sections.flatMap(section => section.items) : category.items;
        const found = items.find(item => item.name === name);
        if (found) {
            return found;
        }
    }
    return undefined;
}
/**
 * Sets a nested property on an object based on a dot-notation path.
 * @param obj The object to modify.
 * @param path The dot-notation path (e.g., "logging.minLogLevel").
 * @param value The value to set.
 */
function setNestedValue(obj, path, value) {
    const keys = path.split('.');
    let current = obj;
    while (keys.length > 1) {
        const key = keys.shift();
        if (typeof current[key] === 'undefined') {
            current[key] = {};
        }
        current = current[key];
    }
    current[keys[0]] = value;
}
/**
 * NEW: Parses arguments into an object with separate file contents.
 * @param args The chosen arguments from the UI.
 * @returns An object with `commands` and `configs` string properties.
 */
function parseArgsToFiles(args) {
    let commandArgs = '';
    const configObject = {};
    // This logic is identical to parseArgsToString for separating arguments
    args.forEach(arg => {
        const isConfig = isConfigArg(arg.name);
        if (isConfig === true) {
            const definition = getArgDefinition(arg.name);
            if (!definition)
                return;
            let processedValue = arg.value;
            if (definition.type === 'CheckBox') {
                processedValue = true;
            }
            else if (typeof definition.defaultValue === 'number') {
                processedValue = Number(arg.value) || definition.defaultValue;
            }
            else if (definition.defaultValue === 'true' || definition.defaultValue === 'false') {
                processedValue = arg.value.toLowerCase() === 'true';
            }
            setNestedValue(configObject, arg.name, processedValue);
        }
        else if (isConfig === false) {
            const argType = getArgumentType(arg.name, sillyArguments);
            if (argType === 'CheckBox') {
                commandArgs += `${arg.name} `;
            }
            else if (argType === 'File' || argType === 'Directory') {
                commandArgs += `${arg.name} "${arg.value}" `;
            }
            else {
                commandArgs += `${arg.name} ${arg.value} `;
            }
        }
    });
    // Build the command file content
    let commandResult = isWin ? '@echo off\n\n' : '#!/bin/bash\n\n';
    commandResult += lodashExports.isEmpty(commandArgs) ? shellCommand$1 : `${shellCommand$1} ${commandArgs.trim()}`;
    // Build the config file content
    const configResult = lodashExports.isEmpty(configObject) ? '# No configuration options were selected to save.' : dump(configObject);
    return {
        commands: commandResult,
        configs: configResult,
    };
}
function parseArgsToString$1(args) {
    const { commands, configs } = parseArgsToFiles(args);
    // Combine both file contents into a single preview string
    let finalResult = '-------------Batch File Preview (.bat)-------------';
    finalResult += `\n\n${commands}\n\n`;
    finalResult += '-------------Configuration File Preview (config.yml)-------------';
    finalResult += `\n\n${configs}`;
    return finalResult;
}
/**
 * Recursively flattens a nested config object into a ChosenArgument array.
 */
function flattenConfigObject(obj, prefix = '') {
    let results = [];
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            const newPrefix = prefix ? `${prefix}.${key}` : key;
            const value = obj[key];
            if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
                results = results.concat(flattenConfigObject(value, newPrefix));
            }
            else {
                const definition = getArgDefinition(newPrefix);
                if (definition?.type === 'CheckBox' && value === true) {
                    results.push({ name: newPrefix, value: '' });
                }
                else {
                    results.push({ name: newPrefix, value: String(value) });
                }
            }
        }
    }
    return results;
}
function parseFilesToArgs(commands, configs) {
    // 1. Parse Command-line arguments from the commands string
    const commandArgResult = [];
    if (!lodashExports.isEmpty(commands)) {
        const lines = commands.split('\n');
        lines.forEach((line) => {
            if (!line.startsWith(shellCommand$1))
                return;
            const clArgs = line.split(`${shellCommand$1} `)[1];
            if (!clArgs)
                return;
            const args = clArgs.split('--').filter(Boolean);
            const result = args.map((arg) => {
                const [id, ...value] = arg.trim().split(' ');
                return { name: `--${id}`, value: value.join(' ').replace(/"/g, '') };
            });
            result.forEach((value) => {
                if (isValidArg(value.name, sillyArguments)) {
                    commandArgResult.push({
                        name: value.name,
                        value: getArgumentType(value.name, sillyArguments) === 'CheckBox' ? '' : value.value,
                    });
                }
            });
        });
    }
    // 2. Parse YAML configuration from the configs string
    let configArgResult = [];
    if (!lodashExports.isEmpty(configs)) {
        try {
            const parsedYaml = load(configs); // <-- Changed to use load from js-yaml
            if (typeof parsedYaml === 'object' && parsedYaml !== null) {
                configArgResult = flattenConfigObject(parsedYaml);
            }
        }
        catch (e) {
            console.error('Failed to parse YAML config string:', e);
        }
    }
    // 3. Combine and return both results
    return [...commandArgResult, ...configArgResult];
}
function parseStringToArgs$1(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (!line.startsWith(shellCommand$1))
            return;
        // Extract the command line arguments and clear falsy values
        const clArgs = line.split(`${shellCommand$1} `)[1];
        if (!clArgs)
            return;
        const args = clArgs.split('--').filter(Boolean);
        // Map each argument to an object with id and value
        const result = args.map((arg) => {
            const [id, ...value] = arg.trim().split(' ');
            return {
                name: `--${id}`,
                value: value.join(' ').replace(/"/g, ''),
            };
        });
        // Process each argument
        result.forEach((value) => {
            // Check if the argument exists or valid
            if (isValidArg(value.name, sillyArguments)) {
                if (getArgumentType(value.name, sillyArguments) === 'CheckBox') {
                    argResult.push({ name: value.name, value: '' });
                }
                else {
                    argResult.push({ name: value.name, value: value.value });
                }
            }
        });
    });
    return argResult;
}
function startInstall$1(stepper) {
    GitInstaller('SillyTavern', URL$1, stepper);
}
async function cardInfo$1(api, callback) {
    return CardInfo(URL$1, undefined, api, callback);
}
const SILLYTAVERN_RM = {
    catchAddress: catchAddress$3,
    parseArgsToString: parseArgsToString$1,
    parseStringToArgs: parseStringToArgs$1,
    cardInfo: cardInfo$1,
    manager: { startInstall: startInstall$1, updater: { updateType: 'git' } },
};

const oobaboogaArguments = [
    {
        category: 'Command Line Arguments',
        sections: [
            {
                section: 'Basic settings',
                items: [
                    {
                        name: '--multi-user',
                        description: 'Multi-user mode. Chat histories are not saved or automatically loaded.' +
                            ' Warning: this is likely not safe for sharing publicly.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--character',
                        description: 'The name of the character to load in chat mode by default.',
                        type: 'Input',
                    },
                    {
                        name: '--model',
                        description: 'Name of the model to load by default.',
                        type: 'Input',
                    },
                    {
                        name: '--lora',
                        description: 'The list of LoRAs to load. If you want to load more than one LoRA, write the names separated by spaces.',
                        type: 'Input',
                    },
                    {
                        name: '--model-dir',
                        description: 'Path to directory with all the models.',
                        type: 'Directory',
                        defaultValue: 'models/',
                    },
                    {
                        name: '--lora-dir',
                        description: 'Path to directory with all the loras.',
                        type: 'Directory',
                        defaultValue: 'loras/',
                    },
                    {
                        name: '--model-menu',
                        description: 'Show a model menu in the terminal when the web UI is first launched.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--settings',
                        description: 'Load the default interface settings from this yaml file. See settings-template.yaml' +
                            ' for an example. If you create a file called settings.yaml, this file will be loaded' +
                            ' by default without the need to use the --settings flag.',
                        type: 'File',
                    },
                    {
                        name: '--extensions',
                        description: 'The list of extensions to load. If you want to load more than one extension, write ' +
                            'the names separated by spaces.',
                        type: 'Input',
                    },
                    {
                        name: '--verbose',
                        description: 'Print the prompts to the terminal.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--idle-timeout',
                        description: 'Unload model after this many minutes of inactivity. It will be automatically' +
                            ' reloaded when you try to use it again.',
                        type: 'Input',
                        defaultValue: '0',
                    },
                ],
            },
            {
                section: 'Model loader',
                items: [
                    {
                        name: '--loader',
                        description: 'Choose the model loader manually, otherwise, it will get autodetected. Valid options:' +
                            ' Transformers, llama.cpp, llamacpp_HF, ExLlamav2_HF, ExLlamav2, AutoGPTQ, AutoAWQ.',
                        type: 'DropDown',
                        values: ['Transformers', 'llama.cpp', 'llamacpp_HF', 'ExLlamav2_HF', 'ExLlamav2', 'AutoGPTQ', 'AutoAWQ'],
                    },
                ],
            },
            {
                section: 'Transformers/Accelerate',
                items: [
                    {
                        name: '--cpu',
                        description: 'Use the CPU to generate text. Warning: Training on CPU is extremely slow.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--auto-devices',
                        description: 'Automatically split the model across the available GPU(s) and CPU.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--gpu-memory',
                        description: 'Maximum GPU memory in GiB to be allocated per GPU. Example: --gpu-memory 10 for a' +
                            ' single GPU, --gpu-memory 10 5 for two GPUs. You can also set values in MiB like --gpu-memory 3500MiB.',
                        type: 'Input',
                    },
                    {
                        name: '--cpu-memory',
                        description: 'Maximum CPU memory in GiB to allocate for offloaded weights. Same as above.',
                        type: 'Input',
                    },
                    {
                        name: '--disk',
                        description: 'If the model is too large for your GPU(s) and CPU combined, send the remaining layers to the disk.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disk-cache-dir',
                        description: 'Directory to save the disk cache to. Defaults to "cache".',
                        type: 'Directory',
                        defaultValue: 'cache',
                    },
                    {
                        name: '--load-in-8bit',
                        description: 'Load the model with 8-bit precision (using bitsandbytes).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--bf16',
                        description: 'Load the model with bfloat16 precision. Requires NVIDIA Ampere GPU.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--no-cache',
                        description: 'Set use_cache to False while generating text. This reduces VRAM usage slightly,' +
                            ' but it comes at a performance cost.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--trust-remote-code',
                        description: 'Set trust_remote_code=True while loading the model. Necessary for some models.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--force-safetensors',
                        description: 'Set use_safetensors=True while loading the model. This prevents arbitrary code execution.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--no_use_fast',
                        description: "Set use_fast=False while loading the tokenizer (it's True by default). Use this if you" +
                            ' have any problems related to use_fast.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use_flash_attention_2',
                        description: 'Set use_flash_attention_2=True while loading the model.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use_eager_attention',
                        description: 'Set attn_implementation= eager while loading the model.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--attn-implementation',
                        description: 'Attention implementation. Valid options: sdpa, eager, flash_attention_2.',
                        type: 'DropDown',
                        values: ['sdpa', 'eager', 'flash_attention_2'],
                        defaultValue: 'sdpa',
                    },
                ],
            },
            {
                section: 'bitsandbytes 4-bit',
                items: [
                    {
                        name: '--load-in-4bit',
                        description: 'Load the model with 4-bit precision (using bitsandbytes).',
                        type: 'CheckBox',
                    },
                    {
                        name: '--use_double_quant',
                        description: 'use_double_quant for 4-bit.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--compute_dtype',
                        description: 'compute dtype for 4-bit. Valid options: bfloat16, float16, float32.',
                        type: 'DropDown',
                        values: ['bfloat16', 'float16', 'float32'],
                        defaultValue: 'float16',
                    },
                    {
                        name: '--quant_type',
                        description: 'quant_type for 4-bit. Valid options: nf4, fp4.',
                        type: 'DropDown',
                        values: ['nf4', 'fp4'],
                        defaultValue: 'nf4',
                    },
                ],
            },
            {
                section: 'llama.cpp',
                items: [
                    {
                        name: '--flash-attn',
                        description: 'Use flash-attention.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--tensorcores',
                        description: 'NVIDIA only: use llama-cpp-python compiled with tensor cores support.' +
                            ' This may increase performance on newer cards.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--n_ctx',
                        description: 'Size of the prompt context.',
                        type: 'Input',
                        defaultValue: '2048',
                    },
                    {
                        name: '--threads',
                        description: 'Number of threads to use.',
                        type: 'Input',
                        defaultValue: '0',
                    },
                    {
                        name: '--threads-batch',
                        description: 'Number of threads to use for batches/prompt processing.',
                        type: 'Input',
                        defaultValue: '0',
                    },
                    {
                        name: '--no_mul_mat_q',
                        description: 'Disable the mulmat kernels.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--n_batch',
                        description: 'Maximum number of prompt tokens to batch together when calling llama_eval.',
                        type: 'Input',
                        defaultValue: '512',
                    },
                    {
                        name: '--no-mmap',
                        description: 'Prevent mmap from being used.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--mlock',
                        description: 'Force the system to keep the model in RAM.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--n-gpu-layers',
                        description: 'Number of layers to offload to the GPU.',
                        type: 'Input',
                        defaultValue: '0',
                    },
                    {
                        name: '--tensor_split',
                        description: 'Split the model across multiple GPUs. Comma-separated list of proportions. Example: 60,40.',
                        type: 'Input',
                    },
                    {
                        name: '--numa',
                        description: 'Activate NUMA task allocation for llama.cpp.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--logits_all',
                        description: 'Needs to be set for perplexity evaluation to work. Otherwise, ignore it, as it makes' +
                            ' prompt processing slower.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--no_offload_kqv',
                        description: 'Do not offload the K, Q, V to the GPU. This saves VRAM but reduces the performance.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--cache-capacity',
                        description: 'Maximum cache capacity (llama-cpp-python). Examples: 2000MiB, 2GiB. When provided' +
                            ' without units, bytes will be assumed.',
                        type: 'Input',
                    },
                    {
                        name: '--row_split',
                        description: 'Split the model by rows across GPUs. This may improve multi-gpu performance.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--streaming-llm',
                        description: 'Activate StreamingLLM to avoid re-evaluating the entire prompt when old messages are removed.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--attention-sink-size',
                        description: 'StreamingLLM: number of sink tokens. Only used if the trimmed prompt does not share' +
                            ' a prefix with the old prompt.',
                        type: 'Input',
                        defaultValue: '5',
                    },
                    {
                        name: '--tokenizer-dir',
                        description: 'Load the tokenizer from this folder. Meant to be used with llamacpp_HF through the command-line.',
                        type: 'Directory',
                    },
                ],
            },
            {
                section: 'ExLlamaV2',
                items: [
                    {
                        name: '--gpu-split',
                        description: 'Comma-separated list of VRAM (in GB) to use per GPU device for model layers. Example: 20,7,7.',
                        type: 'Input',
                    },
                    {
                        name: '--autosplit',
                        description: 'Autosplit the model tensors across the available GPUs. This causes --gpu-split to be ignored.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--max_seq_len',
                        description: 'Maximum sequence length.',
                        type: 'Input',
                        defaultValue: '2048',
                    },
                    {
                        name: '--cfg-cache',
                        description: 'ExLlamav2_HF: Create an additional cache for CFG negative prompts. Necessary ' +
                            'to use CFG with that loader.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--no_flash_attn',
                        description: 'Force flash-attention to not be used.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--no_xformers',
                        description: 'Force xformers to not be used.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--no_sdpa',
                        description: 'Force Torch SDPA to not be used.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--num_experts_per_token',
                        description: 'Number of experts to use for generation. Applies to MoE models like Mixtral.',
                        type: 'Input',
                        defaultValue: '2',
                    },
                    {
                        name: '--enable_tp',
                        description: 'Enable Tensor Parallelism (TP) in ExLlamaV2.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'AutoGPTQ',
                items: [
                    {
                        name: '--triton',
                        description: 'Use triton.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--no_inject_fused_mlp',
                        description: 'Triton mode only: disable the use of fused MLP, which will use less' +
                            ' VRAM at the cost of slower inference.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--no_use_cuda_fp16',
                        description: 'This can make models faster on some systems.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--desc_act',
                        description: 'For models that do not have a quantize_config.json, this parameter is used to define' +
                            ' whether to set desc_act or not in BaseQuantizeConfig.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable_exllama',
                        description: 'Disable ExLlama kernel, which can improve inference speed on some systems.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--disable_exllamav2',
                        description: 'Disable ExLlamav2 kernel.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--wbits',
                        description: 'Load a pre-quantized model with specified precision in bits. 2, 3, 4 and 8 are supported.',
                        type: 'Input',
                        defaultValue: '0',
                    },
                    {
                        name: '--groupsize',
                        description: 'Group size.',
                        type: 'Input',
                        defaultValue: '-1',
                    },
                ],
            },
            {
                section: 'HQQ',
                items: [
                    {
                        name: '--hqq-backend',
                        description: 'Backend for the HQQ loader. Valid options: PYTORCH, PYTORCH_COMPILE, ATEN.',
                        type: 'DropDown',
                        values: ['PYTORCH', 'PYTORCH_COMPILE', 'ATEN'],
                        defaultValue: 'PYTORCH_COMPILE',
                    },
                ],
            },
            {
                section: 'TensorRT-LLM',
                items: [
                    {
                        name: '--cpp-runner',
                        description: "Use the ModelRunnerCpp runner, which is faster than the default ModelRunner but doesn't support streaming yet.",
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Cache',
                items: [
                    {
                        name: '--cache_type',
                        description: 'KV cache type; valid options: llama.cpp - fp16, q8_0, q4_0; ExLlamaV2 - fp16, fp8, q8, q6, q4.',
                        type: 'Input',
                        defaultValue: 'fp16',
                    },
                ],
            },
            {
                section: 'DeepSpeed',
                items: [
                    {
                        name: '--deepspeed',
                        description: 'Enable the use of DeepSpeed ZeRO-3 for inference via the Transformers integration.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--nvme-offload-dir',
                        description: 'DeepSpeed: Directory to use for ZeRO-3 NVME offloading.',
                        type: 'Directory',
                    },
                    {
                        name: '--local_rank',
                        description: 'DeepSpeed: Optional argument for distributed setups.',
                        type: 'Input',
                        defaultValue: '0',
                    },
                ],
            },
            {
                section: 'RoPE',
                items: [
                    {
                        name: '--alpha_value',
                        description: 'Positional embeddings alpha factor for NTK RoPE scaling. Use either this or compress_pos_emb, not both.',
                        type: 'Input',
                        defaultValue: '1',
                    },
                    {
                        name: '--rope_freq_base',
                        description: 'If greater than 0, will be used instead of alpha_value. Those two are related by' +
                            ' rope_freq_base = 10000 * alpha_value ^ (64 / 63).',
                        type: 'Input',
                        defaultValue: '0',
                    },
                    {
                        name: '--compress_pos_emb',
                        description: 'Positional embeddings compression factor. Should be set to (context length) / ' +
                            "(model's original context length). Equal to 1/rope_freq_scale.",
                        type: 'Input',
                        defaultValue: '1',
                    },
                ],
            },
            {
                section: 'Gradio',
                items: [
                    {
                        name: '--listen',
                        description: 'Make the web UI reachable from your local network.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--listen-port',
                        description: 'The listening port that the server will use.',
                        type: 'Input',
                    },
                    {
                        name: '--listen-host',
                        description: 'The hostname that the server will use.',
                        type: 'Input',
                    },
                    {
                        name: '--share',
                        description: 'Create a public URL. This is useful for running the web UI on Google Colab or similar.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--auto-launch',
                        description: 'Open the web UI in the default browser upon launch.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--gradio-auth',
                        description: 'Set Gradio authentication password in the format "username:password". Multiple credentials' +
                            ' can also be supplied with "u1:p1,u2:p2,u3:p3".',
                        type: 'Input',
                    },
                    {
                        name: '--gradio-auth-path',
                        description: 'Set the Gradio authentication file path. The file should contain one or more user:password' +
                            ' pairs in the same format as above.',
                        type: 'File',
                    },
                    {
                        name: '--ssl-keyfile',
                        description: 'The path to the SSL certificate key file.',
                        type: 'File',
                    },
                    {
                        name: '--ssl-certfile',
                        description: 'The path to the SSL certificate cert file.',
                        type: 'File',
                    },
                    {
                        name: '--subpath',
                        description: 'Customize the subpath for gradio, use with reverse proxy',
                        type: 'Input',
                    },
                    {
                        name: '--old-colors',
                        description: 'Use the legacy Gradio colors, before the December/2024 update.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--portable',
                        description: 'Hide features not available in portable mode like training.',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'API',
                items: [
                    {
                        name: '--api',
                        description: 'Enable the API extension.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--public-api',
                        description: 'Create a public URL for the API using Cloudfare.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--public-api-id',
                        description: 'Tunnel ID for named Cloudflare Tunnel. Use together with public-api option.',
                        type: 'Input',
                    },
                    {
                        name: '--api-port',
                        description: 'The listening port for the API.',
                        type: 'Input',
                        defaultValue: '5000',
                    },
                    {
                        name: '--api-key',
                        description: 'API authentication key.',
                        type: 'Input',
                    },
                    {
                        name: '--admin-key',
                        description: 'API authentication key for admin tasks like loading and unloading models. If not set,' +
                            ' will be the same as --api-key.',
                        type: 'Input',
                    },
                    {
                        name: '--nowebui',
                        description: 'Do not launch the Gradio UI. Useful for launching the API in standalone mode.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--api-enable-ipv6',
                        description: 'Enable IPv6 for the API',
                        type: 'CheckBox',
                    },
                    {
                        name: '--api-disable-ipv4',
                        description: 'Disable IPv4 for the API',
                        type: 'CheckBox',
                    },
                ],
            },
            {
                section: 'Multimodal',
                items: [
                    {
                        name: '--multimodal-pipeline',
                        description: 'The multimodal pipeline to use. Examples: llava-7b, llava-13b.',
                        type: 'Input',
                    },
                ],
            },
            {
                section: 'Context and cache',
                items: [
                    {
                        name: '--ctx-size',
                        description: 'Context size in tokens.',
                        type: 'Input',
                        defaultValue: '8192',
                    },
                    {
                        name: '--cache-type',
                        description: 'KV cache type; valid options: llama.cpp - fp16, q8_0, q4_0; ExLlamaV2 - fp16, fp8, q8, q6, q4;' +
                            ' ExLlamaV3 - fp16, q2 to q8 (can specify k_bits and v_bits separately, e.g. q4_q8).',
                        type: 'Input',
                        defaultValue: 'fp16',
                    },
                ],
            },
            {
                section: 'Speculative decoding',
                items: [
                    {
                        name: '--model-draft',
                        description: 'Path to the draft model for speculative decoding.',
                        type: 'File',
                    },
                    {
                        name: '--draft-max',
                        description: 'Number of tokens to draft for speculative decoding.',
                        type: 'Input',
                        defaultValue: '4',
                    },
                    {
                        name: '--gpu-layers-draft',
                        description: 'Number of layers to offload to the GPU for the draft model.',
                        type: 'Input',
                        defaultValue: '256',
                    },
                    {
                        name: '--device-draft',
                        description: 'Comma-separated list of devices to use for offloading the draft model. Example: CUDA0,CUDA1',
                        type: 'Input',
                    },
                    {
                        name: '--ctx-size-draft',
                        description: 'Size of the prompt context for the draft model. If 0, uses the same as the main model.',
                        type: 'Input',
                        defaultValue: '0',
                    },
                ],
            },
            {
                section: 'ExLlamaV3',
                items: [
                    {
                        name: '--enable-tp',
                        description: 'Enable Tensor Parallelism (TP) to split the model across GPUs.',
                        type: 'CheckBox',
                    },
                    {
                        name: '--tp-backend',
                        description: 'The backend for tensor parallelism. Valid options: native, nccl. Default: native.',
                        type: 'DropDown',
                        values: ['native', 'nccl'],
                        defaultValue: 'native',
                    },
                ],
            },
        ],
    },
];

async function fetchExtensionList() {
    return [
        {
            url: 'https://github.com/mamei16/LLM_Web_search',
            title: 'LLM_Web_search',
            description: 'Lets your LLM search the web.',
            stars: 155,
        },
        {
            url: 'https://github.com/erew123/alltalk_tts',
            title: 'AllTalk TTS',
            description: 'Advanced TTS engine with many features.',
            stars: 828,
        },
        {
            url: 'https://github.com/Vasyanator/google_translate_plus',
            title: 'google_translate_plus',
            description: 'Improved Google Translate extension.',
            stars: 2,
        },
        {
            url: 'https://github.com/brucepro/Memoir',
            title: 'Memoir+',
            description: 'Adds memory and personality to your chatbot.',
            stars: 164,
        },
        {
            url: 'https://github.com/RandomInternetPreson/Lucid_Vision',
            title: 'Lucid_Vision',
            description: 'Integrates advanced vision models.',
            stars: 36,
        },
        {
            url: 'https://github.com/RandomInternetPreson/LucidWebSearch',
            title: 'LucidWebSearch',
            description: 'Web search extension with OCR support.',
            stars: 62,
        },
        {
            url: 'https://github.com/innightwolfsleep/text-generation-webui-telegram_bot',
            title: 'telegram_bot',
            description: 'Telegram bot interface for text-generation-webui.',
            stars: 102,
        },
        {
            url: 'https://github.com/SicariusSicariiStuff/Diffusion_TTS',
            title: 'Diffusion_TTS',
            description: 'Realistic and fast local TTS using TorToiSe.',
            stars: 59,
        },
        {
            url: 'https://github.com/SkinnyDevi/webui_tavernai_charas',
            title: 'Integrated TavernUI Characters',
            description: 'Search, download, and manage TavernAI characters.',
            stars: 58,
        },
        {
            url: 'https://github.com/DavG25/text-generation-webui-code_syntax_highlight',
            title: 'code_syntax_highlight',
            description: 'Adds syntax highlighting to code snippets.',
            stars: 62,
        },
        {
            url: 'https://github.com/Anglebrackets/web_rag',
            title: 'web_rag',
            description: 'Retrieval-Augmented Generation from web content.',
            stars: 16,
        },
        {
            url: 'https://github.com/Trojaner/text-generation-webui-stable_diffusion',
            title: 'stable_diffusion',
            description: 'Integrates Stable Diffusion image generation.',
            stars: 51,
        },
        {
            url: 'https://github.com/ill13/SpeakLocal/',
            title: 'SpeakLocal',
            description: "Local TTS using your host's native engine.",
            stars: 26,
        },
        {
            url: 'https://github.com/p-e-w/chatbot_clinic',
            title: 'Chatbot Clinic',
            description: 'Develop and compare different chatbot personalities.',
            stars: 53,
        },
        {
            url: 'https://github.com/GuizzyQC/sd_api_pictures_tag_injection',
            title: 'sd_api_pictures_tag_injection',
            description: 'Enhances character image consistency with SD.',
            stars: 24,
        },
        {
            url: 'https://github.com/theubie/complex_memory',
            title: 'complex_memory',
            description: 'KoboldAI-like memory for conversations.',
            stars: 105,
        },
        {
            url: 'https://github.com/BoredBrownBear/text-generation-webui-model_ducking',
            title: 'Model Ducking',
            description: 'Automatically unloads and reloads models to save VRAM.',
            stars: 15,
        },
        {
            url: 'https://github.com/Touch-Night/more_translators',
            title: 'More translators',
            description: 'Adds more translation options.',
            stars: 6,
        },
        {
            url: 'https://github.com/Hellisotherpeople/llm_steer-oobabooga/tree/main',
            title: 'llm_steer-oobabooga',
            description: 'Steer LLM outputs towards specific topics.',
            stars: 40,
        },
        {
            url: 'https://github.com/FartyPants/VirtualLora',
            title: 'Virtual Lora',
            description: 'Advanced LoRA management system.',
            stars: 13,
        },
        {
            url: 'https://github.com/tijo95/piper_tts',
            title: 'piper_tts',
            description: 'Fast and multilingual TTS using Piper.',
            stars: 11,
        },
        {
            url: 'https://github.com/simbake/web_search',
            title: 'Web_Search',
            description: 'Simple Google Search integration.',
            stars: 91,
        },
        {
            url: 'https://github.com/BuffMcBigHuge/text-generation-webui-edge-tts',
            title: 'edge_tts',
            description: 'Microsoft Edge TTS with RVC support.',
            stars: 38,
        },
        {
            url: 'https://github.com/brucepro/LibreTranslate-extension-for-text-generation-webui',
            title: 'LibreTranslate',
            description: 'Offline translation using LibreTranslate.',
            stars: 1,
        },
        {
            url: 'https://github.com/xr4dsh/CodeRunner',
            title: 'CodeRunner',
            description: 'Allows your LLM to execute code.',
            stars: 25,
        },
        {
            url: 'https://github.com/FartyPants/Playground',
            title: 'Playground for Writers',
            description: 'Advanced notebook with extra features.',
            stars: 128,
        },
        {
            url: 'https://github.com/TheInvisibleMage/ooba_dieroller',
            title: 'Ooba_Dieroller',
            description: 'Dice roller for tabletop RPGs.',
            stars: 4,
        },
        {
            url: 'https://github.com/FartyPants/Twinbook',
            title: 'Twinbook',
            description: 'Combined chat and notebook with advanced controls.',
            stars: 28,
        },
        {
            url: 'https://github.com/yhyu13/Emotivoice_TTS',
            title: 'Emotivoice_TTS',
            description: 'Fast Chinese-English TTS by NetEase.',
            stars: 4,
        },
        {
            url: 'https://github.com/bekkayya/session_manager/',
            title: 'Session_Manager',
            description: 'Save and load sessions with parameters.',
            stars: 7,
        },
        {
            url: 'https://github.com/kanttouchthis/text_generation_webui_xtts',
            title: 'XTTSv2',
            description: 'XTTSv2 TTS with narrator feature.',
            stars: 143,
        },
        {
            url: 'https://github.com/ThereforeGames/echoproof',
            title: 'Echoproof',
            description: 'Reduces LLM repetition in conversations.',
            stars: 33,
        },
        {
            url: 'https://github.com/RandomInternetPreson/text-generation-webui-barktts',
            title: 'bark_tts (forked and updated)',
            description: 'Updated Bark TTS with multi-language support.',
            stars: 9,
        },
        {
            url: 'https://github.com/minemo/text-generation-webui-barktts',
            title: 'bark_tts (original)',
            description: 'Multi-lingual Bark TTS.',
            stars: 35,
        },
        {
            url: 'https://github.com/asadfgglie/voicevox_tts',
            title: 'voicevox_tts',
            description: 'Japanese TTS with optional translation.',
            stars: 4,
        },
        {
            url: 'https://github.com/sammyf/moztts',
            title: 'moztts',
            description: 'Integrates Mozilla TTS engine.',
            stars: 15,
        },
        {
            url: 'https://github.com/jason-brian-anderson/long_term_memory_with_qdrant',
            title: 'Long term memory with qdrant vector database',
            description: 'Long-term memory using qdrant database.',
            stars: 45,
        },
        {
            url: 'https://github.com/GiusTex/EdgeGPT',
            title: 'EdgeGPT',
            description: 'Provides internet access for your bot.',
            stars: 126,
        },
        {
            url: 'https://github.com/xanthousm/text-gen-webui-ui_tweaks',
            title: 'UI Tweaks',
            description: 'Improves UI with sticky tabs and sidebar.',
            stars: 21,
        },
        {
            url: 'https://github.com/ill13/AutoSave/',
            title: 'AutoSave',
            description: 'Automatically saves generated text.',
            stars: 21,
        },
        {
            url: 'https://github.com/ChobPT/oobaboogas-webui-langchain_agent/',
            title: 'webui_langchain_agent',
            description: 'Creates a Langchain agent for the WebUI.',
            stars: 73,
        },
        {
            url: 'https://github.com/SnowMasaya/text-generation-webui/tree/deepl/extensions/deepl_translate',
            title: 'deepl_translator',
            description: 'DeepL translation for input and output.',
            stars: 1,
        },
        {
            url: 'https://github.com/chrisrude/oobabot-plugin',
            title: 'oobabot',
            description: 'Discord bot with command-line and GUI modes.',
            stars: 40,
        },
        {
            url: 'https://github.com/wawawario2/long_term_memory',
            title: 'long_term_memory',
            description: 'Sophisticated long-term memory for chatbots.',
            stars: 304,
        },
        {
            url: 'https://github.com/dibrale/webui-autonomics',
            title: 'webui-autonomics',
            description: 'Dynamically adjusts parameters based on emotional tone.',
            stars: 32,
        },
        {
            url: 'https://github.com/danikhan632/guidance_api',
            title: 'Guidance API',
            description: 'Enables guidance for generating schemaful data.',
            stars: 34,
        },
        {
            url: 'https://github.com/hallucinate-games/oobabooga-jsonformer-plugin',
            title: 'jsonformer',
            description: 'Forces model output to conform to JSON schema.',
            stars: 25,
        },
        {
            url: 'https://github.com/FartyPants/FPreloader',
            title: 'FPreloader',
            description: 'Reloads extensions without rebooting the WebUI.',
            stars: 15,
        },
        {
            url: 'https://github.com/elPatrixF/dynamic_context',
            title: 'dynamic_context',
            description: 'Adds dynamic time and date context.',
            stars: 11,
        },
        {
            url: 'https://github.com/janvarev/api_advanced',
            title: 'api_advanced',
            description: 'Enhanced API with advanced translation logic.',
            stars: 11,
        },
        {
            url: 'https://github.com/janvarev/multi_translate',
            title: 'multi_translate',
            description: 'Expanded Google Translate with more options.',
            stars: 25,
        },
        {
            url: 'https://github.com/ChobPT/text-generation-webui-discord_bot',
            title: 'discord_bot',
            description: 'Discord integration via webhooks.',
            stars: 13,
        },
    ];
}

const shellCommand = isWin ? 'call start_windows.bat' : 'bash ./start_linux.sh';
const URL = 'https://github.com/oobabooga/text-generation-webui';
function parseArgsToString(args) {
    let result = isWin ? '@echo off\n\n' : '#!/bin/bash\n\n';
    let argResult = '';
    args.forEach(arg => {
        const argType = getArgumentType(arg.name, oobaboogaArguments);
        if (argType === 'CheckBox') {
            argResult += `${arg.name} `;
        }
        else if (argType === 'File' || argType === 'Directory') {
            argResult += `${arg.name} "${arg.value}" `;
        }
        else {
            argResult += `${arg.name} ${arg.value} `;
        }
    });
    result += lodashExports.isEmpty(argResult) ? shellCommand : `${shellCommand} ${argResult}`;
    return result;
}
function parseStringToArgs(args) {
    const argResult = [];
    const lines = args.split('\n');
    lines.forEach((line) => {
        if (!line.startsWith(shellCommand))
            return;
        // Extract the command line arguments and clear falsy values
        const clArgs = line.split(`${shellCommand} `)[1];
        if (!clArgs)
            return;
        const args = clArgs.split('--').filter(Boolean);
        // Map each argument to an object with id and value
        const result = args.map((arg) => {
            const [id, ...value] = arg.trim().split(' ');
            return {
                name: `--${id}`,
                value: value.join(' ').replace(/"/g, ''),
            };
        });
        // Process each argument
        result.forEach((value) => {
            // Check if the argument exists or valid
            if (isValidArg(value.name, oobaboogaArguments)) {
                if (getArgumentType(value.name, oobaboogaArguments) === 'CheckBox') {
                    argResult.push({ name: value.name, value: '' });
                }
                else {
                    argResult.push({ name: value.name, value: value.value });
                }
            }
        });
    });
    return argResult;
}
function startInstall(stepper) {
    GitInstaller('Text Generation', URL, stepper);
}
async function cardInfo(api, callback) {
    return CardInfo(URL, '/extensions', api, callback);
}
function catchAddress(input) {
    const webUiPattern = /Running on local URL:\s*(https?:\/\/[^\s]+)/i;
    const match = input.match(webUiPattern);
    if (match) {
        return replaceAddress(match[1]);
    }
    return undefined;
}
const TG_RM = {
    catchAddress,
    fetchExtensionList,
    parseArgsToString,
    parseStringToArgs,
    cardInfo,
    manager: { startInstall, updater: { updateType: 'git' } },
};

export { SILLYTAVERN_ID as $, AG_ID as A, parseArgsToString$7 as B, COMFYUI_ID as C, parseStringToArgs$7 as D, SWARM_ID as E, parseArgsToString$6 as F, parseStringToArgs$6 as G, BOLT_DIY_ID as H, INVOKEAI_INSTALL_DIR_KEY as I, removeAnsi as J, KOHYA_ID as K, getCdCommand as L, FLOWISEAI_ID as M, parseArgsToString$5 as N, OPEN_WEBUI_ID as O, parseStringToArgs$5 as P, parseFilesToArgs$1 as Q, parseArgsToFiles$1 as R, SD_AMD_ID as S, TTS_ID as T, GeminiCli_ID as U, LoLLMS_ID as V, N8N_ID as W, parseArgsToString$3 as X, parseStringToArgs$3 as Y, parseArgsToString$2 as Z, parseStringToArgs$2 as _, getVenvPythonPath as a, parseArgsToFiles as a0, parseFilesToArgs as a1, TG_ID as a2, parseArgsToString as a3, parseStringToArgs as a4, SD_FORGE_ID as a5, SD_FORGE_AMD_ID as a6, SD_UIUX_ID as a7, ALLTALK_ID as a8, CardInfo as a9, openArguments as aA, OPEN_WEBUI_RM as aB, n8nArguments as aC, N8N_RM as aD, SILLYTAVERN_RM as aE, sillyArguments as aF, GitInstaller as aa, AG_RM as ab, gitmyloArguments as ac, fetchExtensionList$2 as ad, catchAddress$3 as ae, lodashExports as af, automatic1111Arguments as ag, COMFYUI_RM as ah, comfyArguments as ai, INVOKE_RM as aj, SD_NEXT_RM as ak, vladmandicArguments as al, KOHYA_GUI_RM as am, bmaltaisArguments as an, COMFYUI_ZLUDA_RM as ao, comfyZludaArguments as ap, SD_AMD_RM as aq, lshqqytigerArguments as ar, SWARM_RM as as, mcMonkeyArguments as at, GeminiCli_RM as au, geminiCliArguments as av, TG_RM as aw, oobaboogaArguments as ax, flowiseArguments as ay, Flow_RM as az, parseStringToArgs$e as b, commonjsGlobal as c, parseArgsToString$d as d, parseStringToArgs$d as e, COMFYUI_ZLUDA_ID as f, getDefaultExportFromCjs as g, parseArgsToString$c as h, isWin as i, parseStringToArgs$c as j, INVOKE_ID as k, extractGitUrl as l, INVOKEAI_UPDATE_AVAILABLE_KEY as m, Invoke_Command_ActivateVenv as n, parseArgsToString$b as o, parseArgsToString$e as p, parseStringToArgs$b as q, parseArgsToString$a as r, parseStringToArgs$a as s, ONETRAINER_ID as t, A1_ID as u, parseArgsToString$9 as v, parseStringToArgs$9 as w, parseArgsToString$8 as x, parseStringToArgs$8 as y, SD_NEXT_ID as z };
